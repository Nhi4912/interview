2:I[5907,["918","static/chunks/918-3273b83890f10546.js","930","static/chunks/930-3262a6c9c5acace4.js","687","static/chunks/app/docs/%5B...slug%5D/page-32962e9542d32755.js"],"default"]
4:I[4707,[],""]
6:I[6423,[],""]
7:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
3:T7b74,# Visual Architecture Diagrams

## Frontend System Design Visual Reference

### 1. Browser Rendering Pipeline

```
┌─────────────────────────────────────────────────────────────────┐
│                    BROWSER RENDERING PIPELINE                   │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  User Input: URL                                               │
│       ↓                                                        │
│  ┌─────────────┐    ┌──────────────┐    ┌─────────────────┐   │
│  │ DNS Lookup  │ →  │ TCP Handshake│ →  │ HTTP Request    │   │
│  └─────────────┘    └──────────────┘    └─────────────────┘   │
│       ↓                                                        │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │                HTML PARSING                             │   │
│  │  ┌─────────────┐    ┌──────────────┐                   │   │
│  │  │ HTML Parser │ →  │   DOM Tree   │                   │   │
│  │  └─────────────┘    └──────────────┘                   │   │
│  └─────────────────────────────────────────────────────────┘   │
│       ↓                                                        │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │                CSS PARSING                              │   │
│  │  ┌─────────────┐    ┌──────────────┐                   │   │
│  │  │ CSS Parser  │ →  │  CSSOM Tree  │                   │   │
│  │  └─────────────┘    └──────────────┘                   │   │
│  └─────────────────────────────────────────────────────────┘   │
│       ↓                                                        │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │              JAVASCRIPT EXECUTION                       │   │
│  │  ┌─────────────┐    ┌──────────────┐                   │   │
│  │  │ JS Engine   │ →  │ DOM Updates  │                   │   │
│  │  └─────────────┘    └──────────────┘                   │   │
│  └─────────────────────────────────────────────────────────┘   │
│       ↓                                                        │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │                RENDER PIPELINE                          │   │
│  │  ┌──────────┐  ┌────────┐  ┌───────┐  ┌─────────────┐  │   │
│  │  │ Render   │→ │ Layout │→ │ Paint │→ │ Composite   │  │   │
│  │  │ Tree     │  │ (Refl) │  │       │  │             │  │   │
│  │  └──────────┘  └────────┘  └───────┘  └─────────────┘  │   │
│  └─────────────────────────────────────────────────────────┘   │
│       ↓                                                        │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │                 SCREEN DISPLAY                          │   │
│  └─────────────────────────────────────────────────────────┘   │
└─────────────────────────────────────────────────────────────────┘
```

### 2. React Fiber Architecture

```
┌─────────────────────────────────────────────────────────────────┐
│                    REACT FIBER ARCHITECTURE                     │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  ┌─────────────────┐    ┌──────────────────┐                   │
│  │   Scheduler     │ →  │    Work Loop     │                   │
│  │  - Priority     │    │  - Time Slicing  │                   │
│  │  - Task Queue   │    │  - Interruption  │                   │
│  └─────────────────┘    └──────────────────┘                   │
│         ↓                         ↓                            │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │                 FIBER TREE                              │   │
│  │                                                         │   │
│  │     App                                                 │   │
│  │      ├── Header (Priority: 3)                          │   │
│  │      ├── Main                                           │   │
│  │      │    ├── Sidebar (Priority: 2)                    │   │
│  │      │    └── Content (Priority: 1)                    │   │
│  │      └── Footer (Priority: 4)                          │   │
│  │                                                         │   │
│  │  Each node is a Fiber with:                            │   │
│  │  - type, props, state                                  │   │
│  │  - child, sibling, return pointers                     │   │
│  │  - effectTag, priority                                 │   │
│  └─────────────────────────────────────────────────────────┘   │
│         ↓                                                       │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │              RECONCILIATION PHASES                      │   │
│  │                                                         │   │
│  │  Phase 1: RENDER (Interruptible)                       │   │
│  │  ┌─────────────┐    ┌──────────────┐                   │   │
│  │  │ Diff Algo   │ →  │ Effect List  │                   │   │
│  │  │ - Compare   │    │ - Updates    │                   │   │
│  │  │ - Mark      │    │ - Insertions │                   │   │
│  │  └─────────────┘    └──────────────┘                   │   │
│  │                                                         │   │
│  │  Phase 2: COMMIT (Not Interruptible)                   │   │
│  │  ┌─────────────┐    ┌──────────────┐                   │   │
│  │  │ Apply       │ →  │ DOM Updates  │                   │   │
│  │  │ Effects     │    │ Lifecycle    │                   │   │
│  │  └─────────────┘    └──────────────┘                   │   │
│  └─────────────────────────────────────────────────────────┘   │
└─────────────────────────────────────────────────────────────────┘
```

### 3. Micro-Frontend Architecture

```
┌─────────────────────────────────────────────────────────────────┐
│                  MICRO-FRONTEND ARCHITECTURE                    │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │                 SHELL APPLICATION                       │   │
│  │  ┌─────────────┐  ┌─────────────┐  ┌─────────────────┐  │   │
│  │  │   Router    │  │  Auth Guard │  │ Error Boundary  │  │   │
│  │  └─────────────┘  └─────────────┘  └─────────────────┘  │   │
│  └─────────────────────────────────────────────────────────┘   │
│         ↓              ↓              ↓                        │
│  ┌─────────────┐ ┌─────────────┐ ┌─────────────────────────┐   │
│  │  MF Header  │ │ MF Sidebar  │ │      MF Main Content    │   │
│  │             │ │             │ │                         │   │
│  │ - React 18  │ │ - Vue 3     │ │     - Angular 15        │   │
│  │ - Team A    │ │ - Team B    │ │     - Team C            │   │
│  │ - Port 3001 │ │ - Port 3002 │ │     - Port 3003         │   │
│  └─────────────┘ └─────────────┘ └─────────────────────────┘   │
│         ↓              ↓              ↓                        │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │              SHARED DEPENDENCIES                        │   │
│  │  ┌─────────────┐  ┌─────────────┐  ┌─────────────────┐  │   │
│  │  │   Shared    │  │   Design    │  │   State Mgmt    │  │   │
│  │  │   Utils     │  │   System    │  │   (Redux/Zustand)│  │   │
│  │  └─────────────┘  └─────────────┘  └─────────────────┘  │   │
│  └─────────────────────────────────────────────────────────┘   │
│                                                                 │
│  Module Federation (Webpack 5):                                │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │  Shell: ModuleFederationPlugin({                        │   │
│  │    remotes: {                                           │   │
│  │      header: "header@http://localhost:3001/remoteEntry.js" │
│  │      sidebar: "sidebar@http://localhost:3002/remoteEntry.js"│
│  │      main: "main@http://localhost:3003/remoteEntry.js"  │   │
│  │    }                                                    │   │
│  │  })                                                     │   │
│  └─────────────────────────────────────────────────────────┘   │
└─────────────────────────────────────────────────────────────────┘
```

### 4. Performance Optimization Flow

```
┌─────────────────────────────────────────────────────────────────┐
│               PERFORMANCE OPTIMIZATION PIPELINE                 │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │                   MEASUREMENT                           │   │
│  │  ┌─────────────┐  ┌─────────────┐  ┌─────────────────┐  │   │
│  │  │ Lighthouse  │  │ Web Vitals  │  │ Custom Metrics  │  │   │
│  │  │ - LCP       │  │ - FID       │  │ - TTI           │  │   │
│  │  │ - CLS       │  │ - FCP       │  │ - Bundle Size   │  │   │
│  │  └─────────────┘  └─────────────┘  └─────────────────┘  │   │
│  └─────────────────────────────────────────────────────────┘   │
│         ↓                                                       │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │                   ANALYSIS                              │   │
│  │  ┌─────────────┐  ┌─────────────┐  ┌─────────────────┐  │   │
│  │  │ Bundle      │  │ Runtime     │  │ Network         │  │   │
│  │  │ Analysis    │  │ Performance │  │ Optimization    │  │   │
│  │  │ - Tree      │  │ - Memory    │  │ - Caching       │  │   │
│  │  │   Shaking   │  │ - CPU Usage │  │ - Compression   │  │   │
│  │  │ - Code      │  │ - Frame     │  │ - CDN           │  │   │
│  │  │   Splitting │  │   Drops     │  │ - Preloading    │  │   │
│  │  └─────────────┘  └─────────────┘  └─────────────────┘  │   │
│  └─────────────────────────────────────────────────────────┘   │
│         ↓                                                       │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │                 OPTIMIZATION                            │   │
│  │                                                         │   │
│  │  Build Time:           Runtime:           Load Time:    │   │
│  │  ┌─────────────┐      ┌─────────────┐    ┌──────────┐   │   │
│  │  │ Tree Shake  │      │ Memoization │    │ Lazy     │   │   │
│  │  │ Dead Code   │      │ Virtualize  │    │ Loading  │   │   │
│  │  │ Minification│      │ Debounce    │    │ Prefetch │   │   │
│  │  │ Compression │      │ Web Workers │    │ Preload  │   │   │
│  │  └─────────────┘      └─────────────┘    └──────────┘   │   │
│  └─────────────────────────────────────────────────────────┘   │
│         ↓                                                       │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │                 MONITORING                              │   │
│  │  ┌─────────────┐  ┌─────────────┐  ┌─────────────────┐  │   │
│  │  │ Real User   │  │ Synthetic   │  │ Performance     │  │   │
│  │  │ Monitoring  │  │ Testing     │  │ Budget          │  │   │
│  │  │ (RUM)       │  │ - CI/CD     │  │ - Alerts        │  │   │
│  │  └─────────────┘  └─────────────┘  └─────────────────┘  │   │
│  └─────────────────────────────────────────────────────────┘   │
└─────────────────────────────────────────────────────────────────┘
```

### 5. State Management Architecture Comparison

```
┌─────────────────────────────────────────────────────────────────┐
│              STATE MANAGEMENT PATTERNS COMPARISON               │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │                    REDUX PATTERN                        │   │
│  │                                                         │   │
│  │  Component → Action → Reducer → Store → Component      │   │
│  │      ↑                                      ↓          │   │
│  │      └──────────── UI Update ←──────────────┘          │   │
│  │                                                         │   │
│  │  Pros: Predictable, DevTools, Time Travel              │   │
│  │  Cons: Boilerplate, Learning Curve                     │   │
│  └─────────────────────────────────────────────────────────┘   │
│                                                                 │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │                   ZUSTAND PATTERN                       │   │
│  │                                                         │   │
│  │  Component → Store.setState() → Store → Component      │   │
│  │      ↑                                      ↓          │   │
│  │      └──────────── Re-render ←──────────────┘          │   │
│  │                                                         │   │
│  │  Pros: Simple API, Small Bundle, TypeScript            │   │
│  │  Cons: Less Ecosystem, Manual Optimization             │   │
│  └─────────────────────────────────────────────────────────┘   │
│                                                                 │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │                 REACT CONTEXT PATTERN                   │   │
│  │                                                         │   │
│  │  Provider → Consumer/useContext → State → Provider     │   │
│  │      ↑                                      ↓          │   │
│  │      └──────────── Re-render ←──────────────┘          │   │
│  │                                                         │   │
│  │  Pros: Built-in, No Dependencies                       │   │
│  │  Cons: Performance Issues, Prop Drilling               │   │
│  └─────────────────────────────────────────────────────────┘   │
│                                                                 │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │                   JOTAI PATTERN                         │   │
│  │                                                         │   │
│  │  Atom → useAtom() → Component → Atom Update            │   │
│  │    ↑                               ↓                   │   │
│  │    └──────── Atomic Updates ←──────┘                   │   │
│  │                                                         │   │
│  │  Pros: Atomic, Bottom-up, Minimal Re-renders           │   │
│  │  Cons: New Paradigm, Smaller Community                 │   │
│  └─────────────────────────────────────────────────────────┘   │
└─────────────────────────────────────────────────────────────────┘
```

### 6. Security Threat Model

```
┌─────────────────────────────────────────────────────────────────┐
│                   FRONTEND SECURITY THREATS                     │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │                    XSS ATTACKS                          │   │
│  │                                                         │   │
│  │  Stored XSS:     Reflected XSS:     DOM-based XSS:     │   │
│  │  ┌─────────┐     ┌─────────────┐    ┌─────────────┐    │   │
│  │  │Database │ →   │URL Parameter│ →  │JavaScript   │ →  │   │
│  │  │Payload  │     │Payload      │    │Sink         │    │   │
│  │  └─────────┘     └─────────────┘    └─────────────┘    │   │
│  │                                                         │   │
│  │  Prevention:                                            │   │
│  │  • Content Security Policy (CSP)                       │   │
│  │  • Input Sanitization                                  │   │
│  │  • Output Encoding                                     │   │
│  │  • HTTP-only Cookies                                   │   │
│  └─────────────────────────────────────────────────────────┘   │
│                                                                 │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │                   CSRF ATTACKS                          │   │
│  │                                                         │   │
│  │  Malicious Site → User Browser → Legitimate Site       │   │
│  │       ↓               ↓              ↓                 │   │
│  │  ┌─────────┐     ┌─────────┐    ┌─────────────┐        │   │
│  │  │Hidden   │     │Cookies  │    │Unauthorized │        │   │
│  │  │Form     │  →  │Sent     │ →  │Action       │        │   │
│  │  └─────────┘     └─────────┘    └─────────────┘        │   │
│  │                                                         │   │
│  │  Prevention:                                            │   │
│  │  • CSRF Tokens                                         │   │
│  │  • SameSite Cookies                                    │   │
│  │  • Origin Header Validation                            │   │
│  │  • Custom Headers                                      │   │
│  └─────────────────────────────────────────────────────────┘   │
│                                                                 │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │               SUPPLY CHAIN ATTACKS                      │   │
│  │                                                         │   │
│  │  npm Package → Build Process → Production Bundle       │   │
│  │       ↓             ↓              ↓                   │   │
│  │  ┌─────────┐   ┌─────────┐    ┌─────────────┐          │   │
│  │  │Malicious│   │Webpack  │    │Injected     │          │   │
│  │  │Code     │ → │Bundle   │ →  │Payload      │          │   │
│  │  └─────────┘   └─────────┘    └─────────────┘          │   │
│  │                                                         │   │
│  │  Prevention:                                            │   │
│  │  • Package Auditing (npm audit)                        │   │
│  │  • Subresource Integrity (SRI)                         │   │
│  │  • Lock Files (package-lock.json)                      │   │
│  │  • Dependency Scanning                                 │   │
│  └─────────────────────────────────────────────────────────┘   │
└─────────────────────────────────────────────────────────────────┘
```

These visual diagrams provide clear mental models for complex frontend concepts that are crucial for system design interviews at Big Tech companies.
5:["slug","src/content/frontend/system-design/visual-architecture-diagrams","c"]
0:["7uJ7BVaXJTiEOD9iYDv3n",[[["",{"children":["docs",{"children":[["slug","src/content/frontend/system-design/visual-architecture-diagrams","c"],{"children":["__PAGE__?{\"slug\":[\"src\",\"content\",\"frontend\",\"system-design\",\"visual-architecture-diagrams\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["docs",{"children":[["slug","src/content/frontend/system-design/visual-architecture-diagrams","c"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"style":{"maxWidth":"1200px","margin":"0 auto","padding":"2rem","paddingTop":"6rem"},"children":[["$","div",null,{"style":{"marginBottom":"2rem"},"children":[["$","nav",null,{"style":{"color":"#64748b","fontSize":"0.9rem","marginBottom":"1rem"},"children":[["$","a",null,{"href":"/","style":{"color":"#3b82f6","textDecoration":"none"},"children":"Home"}]," > ",["$","span",null,{"children":"src > content > frontend > system-design > visual-architecture-diagrams"}]]}],["$","h1",null,{"style":{"fontSize":"2.5rem","fontWeight":"800","marginBottom":"0.5rem","color":"#1e293b"},"children":"Visual Architecture Diagrams"}],["$","div",null,{"style":{"color":"#64748b","fontSize":"0.9rem","marginBottom":"2rem"},"children":[["$","span",null,{"children":["📁 ","src/content/frontend/system-design/visual-architecture-diagrams.md"]}],"$undefined","$undefined"]}]]}],["$","$L2",null,{"content":"$3"}]]}],null],null],null]},[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children","$5","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L7",null,{"children":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L8",null]]]]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Visual Architecture Diagrams - Frontend Interview Docs"}],["$","meta","3",{"name":"description","content":"# Visual Architecture Diagrams  ## Frontend System Design Visual Reference  ### 1. Browser Rendering Pipeline  ``` ┌────────────────────────────────────────────"}],["$","meta","4",{"property":"og:title","content":"Visual Architecture Diagrams - Frontend Interview Docs"}],["$","meta","5",{"property":"og:description","content":"# Visual Architecture Diagrams  ## Frontend System Design Visual Reference  ### 1. Browser Rendering Pipeline  ``` ┌────────────────────────────────────────────"}],["$","meta","6",{"property":"og:type","content":"article"}],["$","meta","7",{"name":"twitter:card","content":"summary"}],["$","meta","8",{"name":"twitter:title","content":"Visual Architecture Diagrams - Frontend Interview Docs"}],["$","meta","9",{"name":"twitter:description","content":"# Visual Architecture Diagrams  ## Frontend System Design Visual Reference  ### 1. Browser Rendering Pipeline  ``` ┌────────────────────────────────────────────"}],["$","meta","10",{"name":"next-size-adjust"}]]
1:null
