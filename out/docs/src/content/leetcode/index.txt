2:I[5907,["918","static/chunks/918-3273b83890f10546.js","930","static/chunks/930-3262a6c9c5acace4.js","687","static/chunks/app/docs/%5B...slug%5D/page-32962e9542d32755.js"],"default"]
4:I[4707,[],""]
6:I[6423,[],""]
7:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
3:T13bb,
# Algorithm Practice - LeetCode Problems

Master data structures and algorithms with our comprehensive collection of LeetCode problems, all implemented in TypeScript with detailed explanations.

## Problem Categories

### [Array & String Problems](array/)
**45 Problems** covering fundamental array operations (26) and string manipulation (19)

Key concepts:
- Two pointers technique
- Sliding window patterns
- Array manipulation
- String processing algorithms

**Difficulty Distribution:**
- Easy: 12 problems
- Medium: 10 problems  
- Hard: 4 problems

[**Start with Array Problems ‚Üí**](array/)

---

### [String Algorithms](string/)
**19 Problems** focusing on string manipulation and pattern matching

Key concepts:
- Pattern matching algorithms
- String transformation
- Palindrome detection
- Substring problems

**Difficulty Distribution:**
- Easy: 8 problems
- Medium: 8 problems
- Hard: 3 problems

[**Practice String Problems ‚Üí**](string/)

---

### [Linked List Operations](linked-list/)
**11 Problems** covering linked list manipulation and algorithms

Key concepts:
- List traversal and modification
- Cycle detection
- List merging and sorting
- Complex pointer manipulation

**Difficulty Distribution:**
- Easy: 5 problems
- Medium: 4 problems
- Hard: 2 problems

[**Master Linked Lists ‚Üí**](linked-list/)

---

### [Tree & Graph Algorithms](tree-graph/)
**18 Problems** exploring tree and graph data structures

Key concepts:
- Tree traversal (DFS, BFS)
- Binary search trees
- Graph algorithms
- Path finding

**Difficulty Distribution:**
- Easy: 6 problems
- Medium: 8 problems
- Hard: 4 problems

[**Explore Trees & Graphs ‚Üí**](tree-graph/)

---

### [Dynamic Programming](dp/)
**11 Problems** covering classic dynamic programming patterns

Key concepts:
- Memoization techniques
- Bottom-up approaches
- Optimization problems
- State transition

**Difficulty Distribution:**
- Easy: 3 problems
- Medium: 5 problems
- Hard: 3 problems

[**Learn Dynamic Programming ‚Üí**](dp/)

---

### [Backtracking](backtracking/)
**11 Problems** focusing on backtracking and recursion

Key concepts:
- Recursive problem solving
- Decision trees
- Constraint satisfaction
- Combinatorial problems

**Difficulty Distribution:**
- Easy: 2 problems
- Medium: 6 problems
- Hard: 3 problems

[**Practice Backtracking ‚Üí**](backtracking/)

---

### [Sorting & Searching](sorting-searching/)
**4 Problems** covering sorting algorithms and binary search

Key concepts:
- Binary search variations
- Sorting algorithm implementation
- Search optimization
- Time complexity analysis

**Difficulty Distribution:**
- Easy: 1 problem
- Medium: 2 problems
- Hard: 1 problem

[**Master Sorting & Search ‚Üí**](sorting-searching/)

---

### [Stack & Queue / Other Problems](others/)
**10 Problems** covering stack, queue, and miscellaneous algorithms

Key concepts:
- Stack applications
- Queue implementations
- Design patterns
- Data structure design

**Difficulty Distribution:**
- Easy: 4 problems
- Medium: 4 problems
- Hard: 2 problems

[**Solve Other Problems ‚Üí**](others/)

---

### [System Design](design/)
**9 Problems** focusing on data structure and system design

Key concepts:
- Data structure design
- API design
- Scalability considerations
- Object-oriented design

**Difficulty Distribution:**
- Easy: 3 problems
- Medium: 4 problems
- Hard: 2 problems

[**Design Systems ‚Üí**](design/)

---

### [Mathematical Problems](math/)
**5 Problems** covering mathematical algorithms and number theory

Key concepts:
- Number theory
- Mathematical formulas
- Algorithmic mathematics
- Optimization

**Difficulty Distribution:**
- Easy: 2 problems
- Medium: 2 problems
- Hard: 1 problem

[**Solve Math Problems ‚Üí**](math/)

---

## Study Approach

### For Beginners
1. Start with **Array** problems to build foundational skills
2. Move to **String** algorithms for pattern recognition
3. Practice **Linked List** for pointer manipulation
4. Build up to **Tree & Graph** problems

### For Intermediate
1. Focus on **Dynamic Programming** for optimization
2. Master **Backtracking** for complex recursion
3. Practice **System Design** problems
4. Challenge yourself with **Hard** difficulty problems

### For Advanced
1. Optimize solutions for time and space complexity
2. Practice explaining solutions clearly
3. Focus on edge cases and error handling
4. Prepare for live coding scenarios

## Progress Tracking

Each problem includes:
- ‚úÖ **Detailed solution** in TypeScript
- üìù **Step-by-step explanation**
- ‚è±Ô∏è **Time & space complexity analysis**
- üéØ **Key insights and patterns**
- üîó **Related problems**

## Interview Tips

1. **Understand the problem** - Ask clarifying questions
2. **Think out loud** - Explain your thought process
3. **Start simple** - Begin with brute force, then optimize
4. **Test your solution** - Walk through examples
5. **Analyze complexity** - Discuss time and space trade-offs

---

*All solutions are implemented in TypeScript with modern ES6+ syntax and include comprehensive test cases.*5:["slug","src/content/leetcode/index","c"]
0:["GkGybauu5extr5oVPcZnD",[[["",{"children":["docs",{"children":[["slug","src/content/leetcode/index","c"],{"children":["__PAGE__?{\"slug\":[\"src\",\"content\",\"leetcode\",\"index\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["docs",{"children":[["slug","src/content/leetcode/index","c"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"style":{"maxWidth":"1200px","margin":"0 auto","padding":"2rem","paddingTop":"6rem"},"children":[["$","div",null,{"style":{"marginBottom":"2rem"},"children":[["$","nav",null,{"style":{"color":"#64748b","fontSize":"0.9rem","marginBottom":"1rem"},"children":[["$","a",null,{"href":"/interview","style":{"color":"#3b82f6","textDecoration":"none"},"children":"Home"}]," > ",["$","span",null,{"children":"src > content > leetcode > index"}]]}],["$","h1",null,{"style":{"fontSize":"2.5rem","fontWeight":"800","marginBottom":"0.5rem","color":"#1e293b"},"children":"LeetCode Problems"}],["$","div",null,{"style":{"color":"#64748b","fontSize":"0.9rem","marginBottom":"2rem"},"children":[["$","span",null,{"children":["üìÅ ","src/content/leetcode/index.md"]}],"$undefined","$undefined"]}]]}],["$","$L2",null,{"content":"$3"}]]}],null],null],null]},[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children","$5","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L7",null,{"children":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L8",null]]]]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"LeetCode Problems - Frontend Interview Docs"}],["$","meta","3",{"name":"description","content":"Comprehensive algorithm practice with 200+ problems organized by category"}],["$","meta","4",{"property":"og:title","content":"LeetCode Problems - Frontend Interview Docs"}],["$","meta","5",{"property":"og:description","content":"Comprehensive algorithm practice with 200+ problems organized by category"}],["$","meta","6",{"property":"og:type","content":"article"}],["$","meta","7",{"name":"twitter:card","content":"summary"}],["$","meta","8",{"name":"twitter:title","content":"LeetCode Problems - Frontend Interview Docs"}],["$","meta","9",{"name":"twitter:description","content":"Comprehensive algorithm practice with 200+ problems organized by category"}],["$","meta","10",{"name":"next-size-adjust"}]]
1:null
