2:I[5907,["918","static/chunks/918-3273b83890f10546.js","930","static/chunks/930-3262a6c9c5acace4.js","687","static/chunks/app/docs/%5B...slug%5D/page-32962e9542d32755.js"],"default"]
4:I[4707,[],""]
6:I[6423,[],""]
7:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
3:T20e2,
# Reverse String

**LeetCode Problem # * 344. Reverse String**

## Problem Description

 * Write a function that reverses a string. The input string is given as an array of characters s.  * You must do this by modifying the input array in-place with O(1) extra memory.  *  * Input: s = ["h","e","l","l","o"]  * Output: ["o","l","l","e","h"] 

## Solutions

{% raw %}
/**
 * 344. Reverse String
 *
 * Problem:
 * Write a function that reverses a string. The input string is given as an array of characters s.
 * You must do this by modifying the input array in-place with O(1) extra memory.
 *
 * Example:
 * Input: s = ["h","e","l","l","o"]
 * Output: ["o","l","l","e","h"]
 *
 * Input: s = ["H","a","n","n","a","h"]
 * Output: ["h","a","n","n","a","H"]
 *
 * LeetCode: https://leetcode.com/problems/reverse-string/
 */

/**
 * Solution 1: Two Pointers (Optimal)
 *
 * Approach:
 * - Use two pointers, one at start and one at end
 * - Swap characters at both pointers
 * - Move pointers towards center
 *
 * Time Complexity: O(n) - traverse half the array
 * Space Complexity: O(1) - in-place modification
 */
function reverseString(s: string[]): void {
  let left = 0;
  let right = s.length - 1;

  while (left < right) {
    // Swap characters
    [s[left], s[right]] = [s[right], s[left]];
    left++;
    right--;
  }
}

/**
 * Solution 2: Using Array Methods (Not in-place, but clean)
 *
 * Approach:
 * - Use reverse() method
 * - Simple and readable
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1) - modifies in-place
 */
function reverseStringArrayMethod(s: string[]): void {
  s.reverse();
}

/**
 * Solution 3: Recursive Approach
 *
 * Approach:
 * - Use recursion to swap characters
 * - Base case: when left >= right
 *
 * Time Complexity: O(n)
 * Space Complexity: O(n) - recursion stack
 */
function reverseStringRecursive(s: string[]): void {
  function reverseHelper(left: number, right: number): void {
    if (left >= right) return;

    // Swap characters
    [s[left], s[right]] = [s[right], s[left]];

    // Recursive call
    reverseHelper(left + 1, right - 1);
  }

  reverseHelper(0, s.length - 1);
}

/**
 * Solution 4: Using XOR Swap (Bit manipulation)
 *
 * Approach:
 * - Use XOR to swap without temporary variable
 * - More complex but shows bit manipulation
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function reverseStringXOR(s: string[]): void {
  let left = 0;
  let right = s.length - 1;

  while (left < right) {
    // XOR swap (works for numbers, but here we're swapping strings)
    // For strings, we still need temporary variable
    const temp = s[left];
    s[left] = s[right];
    s[right] = temp;

    left++;
    right--;
  }
}

/**
 * Solution 5: Using Stack (Not in-place, educational)
 *
 * Approach:
 * - Push all characters to stack
 * - Pop them back to reverse order
 *
 * Time Complexity: O(n)
 * Space Complexity: O(n) - stack storage
 */
function reverseStringStack(s: string[]): void {
  const stack: string[] = [];

  // Push all characters to stack
  for (const char of s) {
    stack.push(char);
  }

  // Pop characters back to array
  for (let i = 0; i < s.length; i++) {
    s[i] = stack.pop()!;
  }
}

/**
 * Solution 6: Manual Loop (Alternative approach)
 *
 * Approach:
 * - Use single loop to swap characters
 * - Calculate opposite index for each position
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function reverseStringManual(s: string[]): void {
  const n = s.length;

  for (let i = 0; i < Math.floor(n / 2); i++) {
    const oppositeIndex = n - 1 - i;
    [s[i], s[oppositeIndex]] = [s[oppositeIndex], s[i]];
  }
}

// Test cases
function testReverseString() {
  console.log("=== Testing Reverse String ===\n");

  const testCases = [
    {
      input: ["h", "e", "l", "l", "o"],
      expected: ["o", "l", "l", "e", "h"],
      description: "Basic case",
    },
    {
      input: ["H", "a", "n", "n", "a", "h"],
      expected: ["h", "a", "n", "n", "a", "H"],
      description: "Mixed case",
    },
    {
      input: ["a", "b", "c"],
      expected: ["c", "b", "a"],
      description: "Three characters",
    },
    {
      input: ["a", "b"],
      expected: ["b", "a"],
      description: "Two characters",
    },
    {
      input: ["a"],
      expected: ["a"],
      description: "Single character",
    },
    {
      input: [],
      expected: [],
      description: "Empty array",
    },
  ];

  testCases.forEach((testCase, index) => {
    console.log(`Test Case ${index + 1}: ${testCase.description}`);
    console.log(`Input: [${testCase.input.join('","')}]`);
    console.log(`Expected: [${testCase.expected.join('","')}]\n`);

    // Test Solution 1 (Two Pointers)
    const s1 = [...testCase.input];
    reverseString(s1);
    console.log(
      `Solution 1 (Two Pointers): [${s1.join('","')}] ${
        JSON.stringify(s1) === JSON.stringify(testCase.expected) ? "✅" : "❌"
      }`
    );

    // Test Solution 2 (Array Method)
    const s2 = [...testCase.input];
    reverseStringArrayMethod(s2);
    console.log(
      `Solution 2 (Array Method): [${s2.join('","')}] ${
        JSON.stringify(s2) === JSON.stringify(testCase.expected) ? "✅" : "❌"
      }`
    );

    // Test Solution 3 (Recursive)
    const s3 = [...testCase.input];
    reverseStringRecursive(s3);
    console.log(
      `Solution 3 (Recursive): [${s3.join('","')}] ${
        JSON.stringify(s3) === JSON.stringify(testCase.expected) ? "✅" : "❌"
      }`
    );

    // Test Solution 4 (XOR)
    const s4 = [...testCase.input];
    reverseStringXOR(s4);
    console.log(
      `Solution 4 (XOR): [${s4.join('","')}] ${
        JSON.stringify(s4) === JSON.stringify(testCase.expected) ? "✅" : "❌"
      }`
    );

    // Test Solution 5 (Stack)
    const s5 = [...testCase.input];
    reverseStringStack(s5);
    console.log(
      `Solution 5 (Stack): [${s5.join('","')}] ${
        JSON.stringify(s5) === JSON.stringify(testCase.expected) ? "✅" : "❌"
      }`
    );

    // Test Solution 6 (Manual)
    const s6 = [...testCase.input];
    reverseStringManual(s6);
    console.log(
      `Solution 6 (Manual): [${s6.join('","')}] ${
        JSON.stringify(s6) === JSON.stringify(testCase.expected) ? "✅" : "❌"
      }`
    );

    console.log("\n---\n");
  });
}

// Performance comparison
function performanceComparison() {
  console.log("=== Performance Comparison ===\n");

  // Create large string array
  const largeString = Array.from({ length: 100000 }, (_, i) =>
    String.fromCharCode(97 + (i % 26))
  );

  const testCases = [
    { name: "Two Pointers", func: reverseString },
    { name: "Array Method", func: reverseStringArrayMethod },
    { name: "Recursive", func: reverseStringRecursive },
    { name: "XOR", func: reverseStringXOR },
    { name: "Stack", func: reverseStringStack },
    { name: "Manual", func: reverseStringManual },
  ];

  testCases.forEach(({ name, func }) => {
    const testString = [...largeString];
    const start = performance.now();
    func(testString);
    const end = performance.now();

    console.log(`${name}:`);
    console.log(`  Time: ${(end - start).toFixed(2)}ms`);
    console.log(
      `  Memory: ${
        name === "Recursive" || name === "Stack" ? "O(n)" : "O(1)"
      }\n`
    );
  });
}

// Unicode test
function testUnicode() {
  console.log("=== Unicode Test ===\n");

  const unicodeTests = [
    {
      input: ["🚀", "🌍", "💻"],
      description: "Emojis",
    },
    {
      input: ["ñ", "é", "ü"],
      description: "Accented characters",
    },
    {
      input: ["中", "文", "测", "试"],
      description: "Chinese characters",
    },
  ];

  unicodeTests.forEach((testCase, index) => {
    console.log(`Unicode Test ${index + 1}: ${testCase.description}`);
    console.log(`Input: [${testCase.input.join('","')}]`);

    const result = [...testCase.input];
    reverseString(result);
    console.log(`Result: [${result.join('","')}]`);
    console.log(
      `Valid: ${result.length === testCase.input.length ? "✅" : "❌"}\n`
    );
  });
}

// Run tests
// Uncomment the following lines to run tests
// testReverseString();
// performanceComparison();
// testUnicode();

export {
  reverseString,
  reverseStringArrayMethod,
  reverseStringRecursive,
  reverseStringXOR,
  reverseStringStack,
  reverseStringManual,
  testReverseString,
  performanceComparison,
  testUnicode,
};
{% endraw %}
5:["slug","leetcode/string/problems/01-reverse-string","c"]
0:["7uJ7BVaXJTiEOD9iYDv3n",[[["",{"children":["docs",{"children":[["slug","leetcode/string/problems/01-reverse-string","c"],{"children":["__PAGE__?{\"slug\":[\"leetcode\",\"string\",\"problems\",\"01-reverse-string\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["docs",{"children":[["slug","leetcode/string/problems/01-reverse-string","c"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"style":{"maxWidth":"1200px","margin":"0 auto","padding":"2rem","paddingTop":"6rem"},"children":[["$","div",null,{"style":{"marginBottom":"2rem"},"children":[["$","nav",null,{"style":{"color":"#64748b","fontSize":"0.9rem","marginBottom":"1rem"},"children":[["$","a",null,{"href":"/","style":{"color":"#3b82f6","textDecoration":"none"},"children":"Home"}]," > ",["$","span",null,{"children":"leetcode > string > problems > 01-reverse-string"}]]}],["$","h1",null,{"style":{"fontSize":"2.5rem","fontWeight":"800","marginBottom":"0.5rem","color":"#1e293b"},"children":"Reverse String"}],["$","div",null,{"style":{"color":"#64748b","fontSize":"0.9rem","marginBottom":"2rem"},"children":[["$","span",null,{"children":["📁 ","leetcode/string/problems/01-reverse-string.md"]}],"$undefined","$undefined"]}]]}],["$","$L2",null,{"content":"$3"}]]}],null],null],null]},[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children","$5","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L7",null,{"children":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L8",null]]]]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Reverse String - Frontend Interview Docs"}],["$","meta","3",{"name":"description","content":" # Reverse String  **LeetCode Problem # * 344. Reverse String**  ## Problem Description   * Write a function that reverses a string. The input string is given a"}],["$","meta","4",{"property":"og:title","content":"Reverse String - Frontend Interview Docs"}],["$","meta","5",{"property":"og:description","content":" # Reverse String  **LeetCode Problem # * 344. Reverse String**  ## Problem Description   * Write a function that reverses a string. The input string is given a"}],["$","meta","6",{"property":"og:type","content":"article"}],["$","meta","7",{"name":"twitter:card","content":"summary"}],["$","meta","8",{"name":"twitter:title","content":"Reverse String - Frontend Interview Docs"}],["$","meta","9",{"name":"twitter:description","content":" # Reverse String  **LeetCode Problem # * 344. Reverse String**  ## Problem Description   * Write a function that reverses a string. The input string is given a"}],["$","meta","10",{"name":"next-size-adjust"}]]
1:null
