2:I[5907,["918","static/chunks/918-3273b83890f10546.js","930","static/chunks/930-3262a6c9c5acace4.js","687","static/chunks/app/docs/%5B...slug%5D/page-036ada1d0a865043.js"],"default"]
4:I[4707,[],""]
6:I[6423,[],""]
7:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
3:T1cc4,
# Best Time to Buy and Sell Stock



## Problem Description

 *  * You are given an array prices where prices[i] is the price of a given stock on the ith day.  * You want to maximize your profit by choosing a single day to buy one stock and choosing  * a different day in the future to sell that stock.  * 

## Solutions

{% raw %}
/**
 * Best Time to Buy and Sell Stock
 *
 * Problem: https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
 *
 * You are given an array prices where prices[i] is the price of a given stock on the ith day.
 * You want to maximize your profit by choosing a single day to buy one stock and choosing
 * a different day in the future to sell that stock.
 *
 * Return the maximum profit you can achieve from this transaction. If you cannot achieve
 * any profit, return 0.
 *
 * Example 1:
 * Input: prices = [7,1,5,3,6,4]
 * Output: 5
 * Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
 * Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
 *
 * Example 2:
 * Input: prices = [7,6,4,3,1]
 * Output: 0
 * Explanation: In this case, no transactions are done and the max profit = 0.
 *
 * Constraints:
 * - 1 <= prices.length <= 10^5
 * - 0 <= prices[i] <= 10^4
 *
 * Solution Approach:
 * 1. One Pass Algorithm (Kadane's Algorithm variant)
 * 2. Keep track of minimum price seen so far
 * 3. Calculate potential profit at each step
 * 4. Update maximum profit if current profit is higher
 *
 * Time Complexity: O(n) where n is the length of prices array
 * Space Complexity: O(1) as we only use a constant amount of extra space
 */

/**
 * Best Time to Buy and Sell Stock - One Pass Solution
 *
 * Thu·∫≠t to√°n m·ªôt l·∫ßn duy·ªát (bi·∫øn th·ªÉ c·ªßa thu·∫≠t to√°n Kadane)
 *
 * @param prices - M·∫£ng gi√° c·ªï phi·∫øu theo ng√†y
 * @returns L·ª£i nhu·∫≠n t·ªëi ƒëa c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c
 */
function maxProfit(prices: number[]): number {
  if (prices.length < 2) return 0;

  let minPrice = prices[0]; // Gi√° th·∫•p nh·∫•t ƒë√£ th·∫•y
  let maxProfit = 0; // L·ª£i nhu·∫≠n t·ªëi ƒëa

  for (let i = 1; i < prices.length; i++) {
    // C·∫≠p nh·∫≠t gi√° th·∫•p nh·∫•t n·∫øu t√¨m th·∫•y gi√° th·∫•p h∆°n
    minPrice = Math.min(minPrice, prices[i]);

    // T√≠nh l·ª£i nhu·∫≠n ti·ªÅm nƒÉng n·∫øu b√°n t·∫°i ng√†y hi·ªán t·∫°i
    const currentProfit = prices[i] - minPrice;

    // C·∫≠p nh·∫≠t l·ª£i nhu·∫≠n t·ªëi ƒëa n·∫øu l·ª£i nhu·∫≠n hi·ªán t·∫°i cao h∆°n
    maxProfit = Math.max(maxProfit, currentProfit);
  }

  return maxProfit;
}

/**
 * Alternative Solution: Two Pointers Approach
 *
 * Gi·∫£i ph√°p thay th·∫ø: S·ª≠ d·ª•ng hai con tr·ªè
 *
 * @param prices - M·∫£ng gi√° c·ªï phi·∫øu theo ng√†y
 * @returns L·ª£i nhu·∫≠n t·ªëi ƒëa c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c
 */
function maxProfitTwoPointers(prices: number[]): number {
  if (prices.length < 2) return 0;

  let buy = 0; // Con tr·ªè mua
  let sell = 1; // Con tr·ªè b√°n
  let maxProfit = 0;

  while (sell < prices.length) {
    const profit = prices[sell] - prices[buy];

    if (profit > 0) {
      // C√≥ l·ª£i nhu·∫≠n, c·∫≠p nh·∫≠t maxProfit
      maxProfit = Math.max(maxProfit, profit);
    } else {
      // Kh√¥ng c√≥ l·ª£i nhu·∫≠n, di chuy·ªÉn con tr·ªè mua
      buy = sell;
    }

    sell++;
  }

  return maxProfit;
}

/**
 * Brute Force Solution (for comparison)
 *
 * Gi·∫£i ph√°p v√©t c·∫°n (ƒë·ªÉ so s√°nh)
 *
 * @param prices - M·∫£ng gi√° c·ªï phi·∫øu theo ng√†y
 * @returns L·ª£i nhu·∫≠n t·ªëi ƒëa c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c
 */
function maxProfitBruteForce(prices: number[]): number {
  let maxProfit = 0;

  for (let i = 0; i < prices.length - 1; i++) {
    for (let j = i + 1; j < prices.length; j++) {
      const profit = prices[j] - prices[i];
      maxProfit = Math.max(maxProfit, profit);
    }
  }

  return maxProfit;
}

// Test cases / C√°c tr∆∞·ªùng h·ª£p ki·ªÉm th·ª≠
function runTests() {
  console.log("=== Best Time to Buy and Sell Stock Tests ===");
  console.log("=== Ki·ªÉm th·ª≠ b√†i to√°n Mua b√°n c·ªï phi·∫øu ===\n");

  const testCases = [
    {
      name: "Example 1: Normal case with profit",
      input: [7, 1, 5, 3, 6, 4],
      expected: 5,
      description: "Buy at 1, sell at 6 = profit of 5",
    },
    {
      name: "Example 2: No profit possible",
      input: [7, 6, 4, 3, 1],
      expected: 0,
      description: "Prices only decrease, no profit possible",
    },
    {
      name: "Single day",
      input: [5],
      expected: 0,
      description: "Cannot buy and sell on same day",
    },
    {
      name: "Two days - profit",
      input: [3, 8],
      expected: 5,
      description: "Buy at 3, sell at 8 = profit of 5",
    },
    {
      name: "Two days - no profit",
      input: [8, 3],
      expected: 0,
      description: "Price decreases, no profit",
    },
    {
      name: "All same prices",
      input: [5, 5, 5, 5],
      expected: 0,
      description: "No price difference, no profit",
    },
    {
      name: "Large profit at end",
      input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      expected: 9,
      description: "Buy at 1, sell at 10 = profit of 9",
    },
    {
      name: "Large profit at beginning",
      input: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],
      expected: 0,
      description: "Prices only decrease, no profit",
    },
    {
      name: "Profit in middle",
      input: [3, 2, 6, 5, 0, 3],
      expected: 4,
      description: "Buy at 2, sell at 6 = profit of 4",
    },
  ];

  let passedTests = 0;
  const totalTests = testCases.length;

  for (const testCase of testCases) {
    console.log(`Test: ${testCase.name}`);
    console.log(`Input: [${testCase.input.join(", ")}]`);
    console.log(`Expected: ${testCase.expected}`);
    console.log(`Description: ${testCase.description}`);

    const result = maxProfit(testCase.input);
    const passed = result === testCase.expected;

    console.log(`Result: ${result}`);
    console.log(`Status: ${passed ? "‚úÖ PASSED" : "‚ùå FAILED"}`);

    if (passed) {
      passedTests++;
    } else {
      console.log(`Expected: ${testCase.expected}, Got: ${result}`);
    }

    console.log("---");
  }

  console.log(`\nTest Summary: ${passedTests}/${totalTests} tests passed`);
  console.log(
    `T√≥m t·∫Øt ki·ªÉm th·ª≠: ${passedTests}/${totalTests} b√†i ki·ªÉm th·ª≠ ƒë√£ qua`
  );

  // Performance comparison / So s√°nh hi·ªáu su·∫•t
  console.log("\n=== Performance Comparison ===");
  console.log("=== So s√°nh hi·ªáu su·∫•t ===\n");

  const largeInput = Array.from({ length: 10000 }, (_, i) =>
    Math.floor(Math.random() * 1000)
  );

  console.log("Testing with large input (10,000 elements)...");
  console.log("Ki·ªÉm th·ª≠ v·ªõi d·ªØ li·ªáu l·ªõn (10,000 ph·∫ßn t·ª≠)...");

  const start1 = performance.now();
  const result1 = maxProfit(largeInput);
  const time1 = performance.now() - start1;

  const start2 = performance.now();
  const result2 = maxProfitTwoPointers(largeInput);
  const time2 = performance.now() - start2;

  console.log(`One Pass Solution: ${time1.toFixed(4)}ms`);
  console.log(`Two Pointers Solution: ${time2.toFixed(4)}ms`);
  console.log(`Results match: ${result1 === result2 ? "‚úÖ Yes" : "‚ùå No"}`);
}

// Run tests if this file is executed directly
if (require.main === module) {
  runTests();
}

export { maxProfit, maxProfitTwoPointers, maxProfitBruteForce };
{% endraw %}
5:["slug","leetcode/dp/problems/02-best-time-to-buy-and-sell-stock","c"]
0:["fjDGwqtt1UnBZeA2uH4xO",[[["",{"children":["docs",{"children":[["slug","leetcode/dp/problems/02-best-time-to-buy-and-sell-stock","c"],{"children":["__PAGE__?{\"slug\":[\"leetcode\",\"dp\",\"problems\",\"02-best-time-to-buy-and-sell-stock\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["docs",{"children":[["slug","leetcode/dp/problems/02-best-time-to-buy-and-sell-stock","c"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"style":{"maxWidth":"1200px","margin":"0 auto","padding":"2rem","paddingTop":"6rem"},"children":[["$","div",null,{"style":{"marginBottom":"2rem"},"children":[["$","nav",null,{"style":{"color":"#64748b","fontSize":"0.9rem","marginBottom":"1rem"},"children":[["$","a",null,{"href":"/interview","style":{"color":"#3b82f6","textDecoration":"none"},"children":"Home"}]," > ",["$","span",null,{"children":"leetcode > dp > problems > 02-best-time-to-buy-and-sell-stock"}]]}],["$","h1",null,{"style":{"fontSize":"2.5rem","fontWeight":"800","marginBottom":"0.5rem","color":"#1e293b"},"children":"Best Time to Buy and Sell Stock"}],["$","div",null,{"style":{"color":"#64748b","fontSize":"0.9rem","marginBottom":"2rem"},"children":[["$","span",null,{"children":["üìÅ ","leetcode/dp/problems/02-best-time-to-buy-and-sell-stock.md"]}],"$undefined","$undefined"]}]]}],["$","$L2",null,{"content":"$3"}]]}],null],null],null]},[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children","$5","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L7",null,{"children":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L8",null]]]]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Best Time to Buy and Sell Stock - Frontend Interview Docs"}],["$","meta","3",{"name":"description","content":" # Best Time to Buy and Sell Stock    ## Problem Description   *  * You are given an array prices where prices[i] is the price of a given stock on the ith day. "}],["$","meta","4",{"property":"og:title","content":"Best Time to Buy and Sell Stock - Frontend Interview Docs"}],["$","meta","5",{"property":"og:description","content":" # Best Time to Buy and Sell Stock    ## Problem Description   *  * You are given an array prices where prices[i] is the price of a given stock on the ith day. "}],["$","meta","6",{"property":"og:type","content":"article"}],["$","meta","7",{"name":"twitter:card","content":"summary"}],["$","meta","8",{"name":"twitter:title","content":"Best Time to Buy and Sell Stock - Frontend Interview Docs"}],["$","meta","9",{"name":"twitter:description","content":" # Best Time to Buy and Sell Stock    ## Problem Description   *  * You are given an array prices where prices[i] is the price of a given stock on the ith day. "}],["$","meta","10",{"name":"next-size-adjust"}]]
1:null
