2:I[2972,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","877","static/chunks/app/problems/%5Bid%5D/page-d9618ec722ca2502.js"],""]
3:I[5907,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","877","static/chunks/app/problems/%5Bid%5D/page-d9618ec722ca2502.js"],"default"]
5:I[4707,[],""]
7:I[6423,[],""]
8:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
4:T2d94,
# Trapping Rain Water

**LeetCode Problem # * 42. Trapping Rain Water**

## Problem Description

LeetCode problem solution with multiple approaches and explanations.

## Solutions


/**
 * 42. Trapping Rain Water
 * 
 * Given n non-negative integers representing an elevation map where the width of each bar is 1, 
 * compute how much water it can trap after raining.
 * 
 * Example 1:
 * Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
 * Output: 6
 * Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. 
 * In this case, 6 units of rain water (blue section) are being trapped.
 * 
 * Example 2:
 * Input: height = [4,2,0,3,2,5]
 * Output: 9
 * 
 * Constraints:
 * - n == height.length
 * - 1 <= n <= 2 * 10^4
 * - 0 <= height[i] <= 3 * 10^4
 */

// Solution 1: Brute Force (For each position, find left and right max)
// Time: O(nÂ²), Space: O(1)
export function trap1(height: number[]): number {
    if (height.length < 3) return 0;
    
    let totalWater = 0;
    
    for (let i = 1; i < height.length - 1; i++) {
        // Find max height to the left
        let leftMax = 0;
        for (let j = 0; j < i; j++) {
            leftMax = Math.max(leftMax, height[j]);
        }
        
        // Find max height to the right
        let rightMax = 0;
        for (let j = i + 1; j < height.length; j++) {
            rightMax = Math.max(rightMax, height[j]);
        }
        
        // Water level is minimum of left and right max
        const waterLevel = Math.min(leftMax, rightMax);
        
        // Add trapped water at current position
        if (waterLevel > height[i]) {
            totalWater += waterLevel - height[i];
        }
    }
    
    return totalWater;
}

// Solution 2: Dynamic Programming (Precompute left and right max arrays)
// Time: O(n), Space: O(n)
export function trap2(height: number[]): number {
    if (height.length < 3) return 0;
    
    const n = height.length;
    const leftMax = new Array(n);
    const rightMax = new Array(n);
    
    // Compute left max for each position
    leftMax[0] = height[0];
    for (let i = 1; i < n; i++) {
        leftMax[i] = Math.max(leftMax[i - 1], height[i]);
    }
    
    // Compute right max for each position
    rightMax[n - 1] = height[n - 1];
    for (let i = n - 2; i >= 0; i--) {
        rightMax[i] = Math.max(rightMax[i + 1], height[i]);
    }
    
    // Calculate trapped water
    let totalWater = 0;
    for (let i = 0; i < n; i++) {
        const waterLevel = Math.min(leftMax[i], rightMax[i]);
        totalWater += Math.max(0, waterLevel - height[i]);
    }
    
    return totalWater;
}

// Solution 3: Two Pointers (Optimal)
// Time: O(n), Space: O(1)
export function trap3(height: number[]): number {
    if (height.length < 3) return 0;
    
    let left = 0;
    let right = height.length - 1;
    let leftMax = 0;
    let rightMax = 0;
    let totalWater = 0;
    
    while (left < right) {
        if (height[left] < height[right]) {
            if (height[left] >= leftMax) {
                leftMax = height[left];
            } else {
                totalWater += leftMax - height[left];
            }
            left++;
        } else {
            if (height[right] >= rightMax) {
                rightMax = height[right];
            } else {
                totalWater += rightMax - height[right];
            }
            right--;
        }
    }
    
    return totalWater;
}

// Solution 4: Stack-based Approach
// Time: O(n), Space: O(n)
export function trap4(height: number[]): number {
    if (height.length < 3) return 0;
    
    const stack: number[] = [];
    let totalWater = 0;
    
    for (let i = 0; i < height.length; i++) {
        while (stack.length > 0 && height[i] > height[stack[stack.length - 1]]) {
            const bottom = stack.pop()!;
            
            if (stack.length === 0) break;
            
            const left = stack[stack.length - 1];
            const width = i - left - 1;
            const waterHeight = Math.min(height[left], height[i]) - height[bottom];
            
            totalWater += width * waterHeight;
        }
        
        stack.push(i);
    }
    
    return totalWater;
}

// Solution 5: Divide and Conquer
// Time: O(n log n), Space: O(log n)
export function trap5(height: number[]): number {
    if (height.length < 3) return 0;
    
    function divideAndConquer(left: number, right: number, maxLeft: number, maxRight: number): number {
        if (left >= right) return 0;
        
        // Find the maximum height in current range
        let maxIdx = left;
        for (let i = left + 1; i <= right; i++) {
            if (height[i] > height[maxIdx]) {
                maxIdx = i;
            }
        }
        
        let water = 0;
        
        // Calculate water trapped to the left of max
        for (let i = left; i < maxIdx; i++) {
            water += Math.max(0, Math.min(maxLeft, height[maxIdx]) - height[i]);
        }
        
        // Calculate water trapped to the right of max
        for (let i = maxIdx + 1; i <= right; i++) {
            water += Math.max(0, Math.min(height[maxIdx], maxRight) - height[i]);
        }
        
        // Recursively solve left and right parts
        water += divideAndConquer(left, maxIdx - 1, maxLeft, height[maxIdx]);
        water += divideAndConquer(maxIdx + 1, right, height[maxIdx], maxRight);
        
        return water;
    }
    
    return divideAndConquer(0, height.length - 1, 0, 0);
}

// Solution 6: Segment Tree Approach (Advanced)
// Time: O(n log n), Space: O(n)
export function trap6(height: number[]): number {
    if (height.length < 3) return 0;
    
    class SegmentTree {
        tree: number[];
        n: number;
        
        constructor(arr: number[]) {
            this.n = arr.length;
            this.tree = new Array(4 * this.n);
            this.build(arr, 1, 0, this.n - 1);
        }
        
        build(arr: number[], node: number, start: number, end: number): void {
            if (start === end) {
                this.tree[node] = arr[start];
            } else {
                const mid = Math.floor((start + end) / 2);
                this.build(arr, 2 * node, start, mid);
                this.build(arr, 2 * node + 1, mid + 1, end);
                this.tree[node] = Math.max(this.tree[2 * node], this.tree[2 * node + 1]);
            }
        }
        
        query(node: number, start: number, end: number, l: number, r: number): number {
            if (r < start || end < l) return 0;
            if (l <= start && end <= r) return this.tree[node];
            
            const mid = Math.floor((start + end) / 2);
            const leftMax = this.query(2 * node, start, mid, l, r);
            const rightMax = this.query(2 * node + 1, mid + 1, end, l, r);
            return Math.max(leftMax, rightMax);
        }
        
        rangeMax(l: number, r: number): number {
            return this.query(1, 0, this.n - 1, l, r);
        }
    }
    
    const segTree = new SegmentTree(height);
    let totalWater = 0;
    
    for (let i = 1; i < height.length - 1; i++) {
        const leftMax = segTree.rangeMax(0, i - 1);
        const rightMax = segTree.rangeMax(i + 1, height.length - 1);
        const waterLevel = Math.min(leftMax, rightMax);
        totalWater += Math.max(0, waterLevel - height[i]);
    }
    
    return totalWater;
}

// Test cases
export function testTrap() {
    console.log("Testing Trapping Rain Water:");
    
    const testCases = [
        {
            input: [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1],
            expected: 6
        },
        {
            input: [4, 2, 0, 3, 2, 5],
            expected: 9
        },
        {
            input: [3, 0, 2, 0, 4],
            expected: 7
        },
        {
            input: [0, 1, 0],
            expected: 0
        },
        {
            input: [1, 0, 1],
            expected: 1
        },
        {
            input: [5, 4, 1, 2],
            expected: 1
        },
        {
            input: [2, 1, 2],
            expected: 1
        }
    ];
    
    const solutions = [
        { name: "Brute Force", fn: trap1 },
        { name: "Dynamic Programming", fn: trap2 },
        { name: "Two Pointers", fn: trap3 },
        { name: "Stack-based", fn: trap4 },
        { name: "Divide and Conquer", fn: trap5 },
        { name: "Segment Tree", fn: trap6 }
    ];
    
    solutions.forEach(solution => {
        console.log(`\n${solution.name}:`);
        testCases.forEach((test, i) => {
            const result = solution.fn([...test.input]);
            const passed = result === test.expected;
            console.log(`  Test ${i + 1}: ${passed ? 'PASS' : 'FAIL'}`);
            if (!passed) {
                console.log(`    Input: ${JSON.stringify(test.input)}`);
                console.log(`    Expected: ${test.expected}`);
                console.log(`    Got: ${result}`);
            }
        });
    });
}

/**
 * Key Insights:
 * 
 * 1. **Core Concept**:
 *    - Water at position i = min(leftMax, rightMax) - height[i]
 *    - Can only trap water if surrounded by higher walls
 *    - Water level determined by the shorter of the two sides
 * 
 * 2. **Two Pointers Intuition**:
 *    - Move pointer with smaller height
 *    - If left < right, process left (we know leftMax <= rightMax)
 *    - Safe to calculate water at left position
 * 
 * 3. **Stack Approach**:
 *    - Process horizontal layers of water
 *    - When height increases, calculate trapped water
 *    - Stack maintains decreasing heights
 * 
 * 4. **Time Complexity Analysis**:
 *    - Brute Force: O(nÂ²) - for each position, scan left and right
 *    - DP: O(n) - precompute max arrays
 *    - Two Pointers: O(n) - single pass
 *    - Stack: O(n) - each element pushed/popped once
 * 
 * 5. **Space Complexity**:
 *    - Two Pointers: O(1) - optimal space
 *    - DP: O(n) - two arrays for left/right max
 *    - Stack: O(n) - worst case all elements in stack
 * 
 * 6. **Interview Strategy**:
 *    - Start with brute force explanation
 *    - Optimize with DP (precomputation)
 *    - Further optimize with two pointers
 *    - Discuss stack approach for variety
 * 
 * 7. **Edge Cases**:
 *    - Array length < 3 (no water possible)
 *    - All heights increasing/decreasing
 *    - All heights equal
 *    - Heights with value 0
 * 
 * 8. **Why Two Pointers Work**:
 *    - We don't need exact leftMax/rightMax values
 *    - Only need to know which side limits water level
 *    - Process the side that's guaranteed to be limiting
 * 
 * 9. **Common Mistakes**:
 *    - Not handling edge positions properly
 *    - Incorrect water level calculation
 *    - Off-by-one errors in array access
 *    - Not considering negative water amounts
 * 
 * 10. **Big Tech Variations**:
 *     - Google: 2D rain water trapping
 *     - Meta: Container with most water (different problem)
 *     - Amazon: Rain water with obstacles
 *     - Microsoft: Circular array trapping
 * 
 * 11. **Follow-up Questions**:
 *     - 2D version of the problem
 *     - Find positions where water is trapped
 *     - Handle negative heights
 *     - Optimize for very large arrays
 * 
 * 12. **Real-world Applications**:
 *     - Urban planning and drainage
 *     - Terrain analysis for water retention
 *     - Architecture and roof design
 *     - Environmental engineering
 *     - Game development (water physics)
 * 
 * 13. **Visualization Tips**:
 *     - Draw the elevation map
 *     - Mark left and right boundaries
 *     - Fill water level by level
 *     - Understand why certain positions can't hold water
 */

6:["id","20","d"]
0:["fjDGwqtt1UnBZeA2uH4xO",[[["",{"children":["problems",{"children":[["id","20","d"],{"children":["__PAGE__?{\"id\":\"20\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["problems",{"children":[["id","20","d"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"max-w-6xl mx-auto px-8 py-24","children":[["$","div",null,{"className":"flex items-center gap-4 mb-8","children":["$","$L2",null,{"href":"/problems","children":["$","button",null,{"className":"flex items-center gap-2 bg-gray-100 border border-gray-300 text-gray-700 px-4 py-3 rounded-md font-medium hover:bg-gray-200 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left ","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Problems"]}]}]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8 mb-8","children":[["$","div",null,{"className":"flex items-center justify-between mb-4","children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900","children":"Trapping Rain Water"}],["$","div",null,{"className":"flex gap-4","children":[["$","button",null,{"className":"flex items-center gap-2 bg-blue-600 text-white px-6 py-3 rounded-md font-semibold hover:bg-blue-700 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-play ","children":[["$","polygon","191637",{"points":"5 3 19 12 5 21 5 3"}],"$undefined"]}],"Solve"]}],["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-star ","children":[["$","polygon","8f66p6",{"points":"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"}],"$undefined"]}],"Star"]}]]}]]}],["$","div",null,{"className":"flex gap-8 mb-4","children":[["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold text-white bg-red-500","children":"Hard"}],["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-code ","children":[["$","polyline","z7tu5w",{"points":"16 18 22 12 16 6"}],["$","polyline","1eg1df",{"points":"8 6 2 12 8 18"}],"$undefined"]}],"Array"]}],["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock ","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],"Time: ","O(n)"]}],["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-file-text ","children":[["$","path","1nnpy2",{"d":"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"}],["$","polyline","1ew0cm",{"points":"14 2 14 8 20 8"}],["$","line","14keom",{"x1":"16","x2":"8","y1":"13","y2":"13"}],["$","line","17nazh",{"x1":"16","x2":"8","y1":"17","y2":"17"}],["$","line","1a5vjj",{"x1":"10","x2":"8","y1":"9","y2":"9"}],"$undefined"]}],"Space: ","O(1)"]}],false]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","Array",{"className":"bg-blue-100 text-blue-700 px-3 py-1 rounded-md text-xs font-medium","children":"Array"}],["$","span","Two Pointers",{"className":"bg-blue-100 text-blue-700 px-3 py-1 rounded-md text-xs font-medium","children":"Two Pointers"}]]}],["$","p",null,{"className":"text-lg text-gray-700 leading-relaxed","children":"\n# Trapping Rain Water\n\n**LeetCode Problem # * 42. Trapping Rain Water**\n\n## Problem Description\n\nLeetCode problem solution with multiple approaches and explanations.\n\n## Solutions\n\n\n/**\n * 42. Trappi..."}]]}],["$","div",null,{"className":"grid grid-cols-1 lg:grid-cols-3 gap-8","children":[["$","div",null,{"className":"lg:col-span-2","children":["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8","children":["$","$L3",null,{"content":"$4"}]}]}],["$","div",null,{"className":"space-y-6","children":[["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Problem Info"}],["$","div",null,{"className":"space-y-2 text-sm","children":[["$","div",null,{"children":[["$","strong",null,{"children":"Difficulty:"}]," ","Hard"]}],["$","div",null,{"children":[["$","strong",null,{"children":"Category:"}]," ","Array"]}],["$","div",null,{"children":[["$","strong",null,{"children":"Time Complexity:"}]," ","O(n)"]}],["$","div",null,{"children":[["$","strong",null,{"children":"Space Complexity:"}]," ","O(1)"]}]]}]]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Related Problems"}],["$","a",null,{"href":"https://leetcode.com/problems/trapping-rain-water/","target":"_blank","rel":"noopener noreferrer","children":["$","div",null,{"className":"flex items-center gap-2 p-3 bg-gray-50 border border-gray-200 rounded-md text-gray-700 mb-2 hover:bg-gray-100 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-code ","children":[["$","polyline","z7tu5w",{"points":"16 18 22 12 16 6"}],["$","polyline","1eg1df",{"points":"8 6 2 12 8 18"}],"$undefined"]}],"View on LeetCode"]}]}],["$","$L2",null,{"href":"/interview/docs/leetcode/array/problems/20-trapping-rain-water","children":["$","div",null,{"className":"flex items-center gap-2 p-3 bg-gray-50 border border-gray-200 rounded-md text-gray-700 mb-2 hover:bg-gray-100 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-file-text ","children":[["$","path","1nnpy2",{"d":"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"}],["$","polyline","1ew0cm",{"points":"14 2 14 8 20 8"}],["$","line","14keom",{"x1":"16","x2":"8","y1":"13","y2":"13"}],["$","line","17nazh",{"x1":"16","x2":"8","y1":"17","y2":"17"}],["$","line","1a5vjj",{"x1":"10","x2":"8","y1":"9","y2":"9"}],"$undefined"]}],"View Full Documentation"]}]}],["$","$L2",null,{"href":"/problems/19","children":["$","div",null,{"className":"flex items-center gap-2 p-3 bg-gray-50 border border-gray-200 rounded-md text-gray-700 mb-2 hover:bg-gray-100 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-code ","children":[["$","polyline","z7tu5w",{"points":"16 18 22 12 16 6"}],["$","polyline","1eg1df",{"points":"8 6 2 12 8 18"}],"$undefined"]}],"Previous Problem"]}]}],false]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Study Resources"}],["$","$L2",null,{"href":"/learn","children":["$","div",null,{"className":"flex items-center gap-2 p-3 bg-gray-50 border border-gray-200 rounded-md text-gray-700 mb-2 hover:bg-gray-100 transition-colors","children":[["$","div",null,{"className":"w-4 h-4 bg-blue-500 rounded"}],"Learn Fundamentals"]}]}],["$","$L2",null,{"href":"/study-guide","children":["$","div",null,{"className":"flex items-center gap-2 p-3 bg-gray-50 border border-gray-200 rounded-md text-gray-700 mb-2 hover:bg-gray-100 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-file-text ","children":[["$","path","1nnpy2",{"d":"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"}],["$","polyline","1ew0cm",{"points":"14 2 14 8 20 8"}],["$","line","14keom",{"x1":"16","x2":"8","y1":"13","y2":"13"}],["$","line","17nazh",{"x1":"16","x2":"8","y1":"17","y2":"17"}],["$","line","1a5vjj",{"x1":"10","x2":"8","y1":"9","y2":"9"}],"$undefined"]}],"Study Guide"]}]}]]}]]}]]}]]}],null],null],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","problems","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","problems","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L8",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
