2:I[2972,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","877","static/chunks/app/problems/%5Bid%5D/page-907dfa19c3a675e4.js"],""]
3:I[5907,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","877","static/chunks/app/problems/%5Bid%5D/page-907dfa19c3a675e4.js"],"default"]
5:I[4707,[],""]
7:I[6423,[],""]
8:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
4:T1791,
# Product of Array Except Self

**LeetCode Problem # * 238. Product of Array Except Self**

## Problem Description

LeetCode problem solution with multiple approaches and explanations.

## Solutions

{% raw %}
/**
 * 238. Product of Array Except Self
 * 
 * Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
 * 
 * The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
 * 
 * You must write an algorithm that runs in O(n) time and without using the division operation.
 * 
 * Example 1:
 * Input: nums = [1,2,3,4]
 * Output: [24,12,8,6]
 * 
 * Example 2:
 * Input: nums = [-1,1,0,-3,3]
 * Output: [0,0,9,0,0]
 * 
 * Constraints:
 * - 2 <= nums.length <= 10^5
 * - -30 <= nums[i] <= 30
 * - The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
 * 
 * Follow up: Can you solve the problem in O(1) extra space complexity? 
 * (The output array does not count as extra space for space complexity analysis.)
 */

// Solution 1: Left and Right Product Arrays
// Time: O(n), Space: O(n)
export function productExceptSelf1(nums: number[]): number[] {
    const n = nums.length;
    const left = new Array(n).fill(1);
    const right = new Array(n).fill(1);
    const result = new Array(n);
    
    // Calculate left products
    for (let i = 1; i < n; i++) {
        left[i] = left[i - 1] * nums[i - 1];
    }
    
    // Calculate right products
    for (let i = n - 2; i >= 0; i--) {
        right[i] = right[i + 1] * nums[i + 1];
    }
    
    // Combine left and right products
    for (let i = 0; i < n; i++) {
        result[i] = left[i] * right[i];
    }
    
    return result;
}

// Solution 2: Single Pass with Two Pointers
// Time: O(n), Space: O(1) - excluding output array
export function productExceptSelf2(nums: number[]): number[] {
    const n = nums.length;
    const result = new Array(n).fill(1);
    
    // First pass: calculate left products and store in result
    for (let i = 1; i < n; i++) {
        result[i] = result[i - 1] * nums[i - 1];
    }
    
    // Second pass: calculate right products on the fly
    let rightProduct = 1;
    for (let i = n - 1; i >= 0; i--) {
        result[i] *= rightProduct;
        rightProduct *= nums[i];
    }
    
    return result;
}

// Solution 3: Division Approach (handles edge cases)
// Time: O(n), Space: O(1)
// Note: This approach uses division, which the problem asks to avoid
export function productExceptSelf3(nums: number[]): number[] {
    const n = nums.length;
    let totalProduct = 1;
    let zeroCount = 0;
    let zeroIndex = -1;
    
    // Calculate total product and count zeros
    for (let i = 0; i < n; i++) {
        if (nums[i] === 0) {
            zeroCount++;
            zeroIndex = i;
        } else {
            totalProduct *= nums[i];
        }
    }
    
    const result = new Array(n).fill(0);
    
    if (zeroCount > 1) {
        // More than one zero, all results are 0
        return result;
    } else if (zeroCount === 1) {
        // Exactly one zero, only that position gets the product
        result[zeroIndex] = totalProduct;
    } else {
        // No zeros, divide total by each element
        for (let i = 0; i < n; i++) {
            result[i] = totalProduct / nums[i];
        }
    }
    
    return result;
}

// Solution 4: Prefix and Suffix in one pass
// Time: O(n), Space: O(1)
export function productExceptSelf4(nums: number[]): number[] {
    const n = nums.length;
    const result = new Array(n);
    
    // Calculate prefix products
    result[0] = 1;
    for (let i = 1; i < n; i++) {
        result[i] = result[i - 1] * nums[i - 1];
    }
    
    // Calculate suffix products and combine
    let suffixProduct = 1;
    for (let i = n - 1; i >= 0; i--) {
        result[i] *= suffixProduct;
        suffixProduct *= nums[i];
    }
    
    return result;
}

// Test cases
export function testProductExceptSelf() {
    console.log("Testing Product of Array Except Self:");
    
    const testCases = [
        {
            input: [1, 2, 3, 4],
            expected: [24, 12, 8, 6]
        },
        {
            input: [-1, 1, 0, -3, 3],
            expected: [0, 0, 9, 0, 0]
        },
        {
            input: [2, 3, 4, 5],
            expected: [60, 40, 30, 24]
        },
        {
            input: [1, 0, 0, 1],
            expected: [0, 0, 0, 0]
        }
    ];
    
    const solutions = [
        { name: "Left-Right Arrays", fn: productExceptSelf1 },
        { name: "Optimized Space", fn: productExceptSelf2 },
        { name: "Division Approach", fn: productExceptSelf3 },
        { name: "Prefix-Suffix", fn: productExceptSelf4 }
    ];
    
    solutions.forEach(solution => {
        console.log(`\n${solution.name}:`);
        testCases.forEach((test, i) => {
            const result = solution.fn(test.input);
            const passed = JSON.stringify(result) === JSON.stringify(test.expected);
            console.log(`  Test ${i + 1}: ${passed ? 'PASS' : 'FAIL'}`);
            if (!passed) {
                console.log(`    Expected: ${test.expected}`);
                console.log(`    Got: ${result}`);
            }
        });
    });
}

/**
 * Key Insights:
 * 
 * 1. **Two-Pass Approach**: Calculate left and right products separately
 * 2. **Space Optimization**: Use output array to store intermediate results
 * 3. **Edge Cases**: Handle zeros carefully in division approach
 * 4. **Big-O Analysis**: 
 *    - Time: O(n) for all solutions
 *    - Space: O(1) for optimized versions (excluding output)
 * 
 * 5. **Interview Tips**:
 *    - Start with brute force O(nÂ²) approach
 *    - Optimize to O(n) with extra space
 *    - Further optimize to O(1) space
 *    - Discuss division approach but explain why it's not preferred
 * 
 * 6. **Follow-up Questions**:
 *    - How to handle integer overflow?
 *    - Can we solve it in a single pass?
 *    - What if we're allowed to use division?
 */
{% endraw %}
6:["id","17","d"]
0:["GkGybauu5extr5oVPcZnD",[[["",{"children":["problems",{"children":[["id","17","d"],{"children":["__PAGE__?{\"id\":\"17\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["problems",{"children":[["id","17","d"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"max-w-6xl mx-auto px-8 py-24","children":[["$","div",null,{"className":"flex items-center gap-4 mb-8","children":["$","$L2",null,{"href":"/problems","children":["$","button",null,{"className":"flex items-center gap-2 bg-gray-100 border border-gray-300 text-gray-700 px-4 py-3 rounded-md font-medium hover:bg-gray-200 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left ","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Problems"]}]}]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8 mb-8","children":[["$","div",null,{"className":"flex items-center justify-between mb-4","children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900","children":"Product of Array Except Self"}],["$","div",null,{"className":"flex gap-4","children":[["$","button",null,{"className":"flex items-center gap-2 bg-blue-600 text-white px-6 py-3 rounded-md font-semibold hover:bg-blue-700 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-play ","children":[["$","polygon","191637",{"points":"5 3 19 12 5 21 5 3"}],"$undefined"]}],"Solve"]}],["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-star ","children":[["$","polygon","8f66p6",{"points":"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"}],"$undefined"]}],"Star"]}]]}]]}],["$","div",null,{"className":"flex gap-8 mb-4","children":[["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold text-white bg-red-500","children":"Hard"}],["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-code ","children":[["$","polyline","z7tu5w",{"points":"16 18 22 12 16 6"}],["$","polyline","1eg1df",{"points":"8 6 2 12 8 18"}],"$undefined"]}],"Array"]}],["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock ","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],"Time: ","O(n)"]}],["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-file-text ","children":[["$","path","1nnpy2",{"d":"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"}],["$","polyline","1ew0cm",{"points":"14 2 14 8 20 8"}],["$","line","14keom",{"x1":"16","x2":"8","y1":"13","y2":"13"}],["$","line","17nazh",{"x1":"16","x2":"8","y1":"17","y2":"17"}],["$","line","1a5vjj",{"x1":"10","x2":"8","y1":"9","y2":"9"}],"$undefined"]}],"Space: ","O(1)"]}],false]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","Array",{"className":"bg-blue-100 text-blue-700 px-3 py-1 rounded-md text-xs font-medium","children":"Array"}],["$","span","Two Pointers",{"className":"bg-blue-100 text-blue-700 px-3 py-1 rounded-md text-xs font-medium","children":"Two Pointers"}]]}],["$","p",null,{"className":"text-lg text-gray-700 leading-relaxed","children":"\n# Product of Array Except Self\n\n**LeetCode Problem # * 238. Product of Array Except Self**\n\n## Problem Description\n\nLeetCode problem solution with multiple approaches and explanations.\n\n## Solutions\n..."}]]}],["$","div",null,{"className":"grid grid-cols-1 lg:grid-cols-3 gap-8","children":[["$","div",null,{"className":"lg:col-span-2","children":["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8","children":["$","$L3",null,{"content":"$4"}]}]}],["$","div",null,{"className":"space-y-6","children":[["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Problem Info"}],["$","div",null,{"className":"space-y-2 text-sm","children":[["$","div",null,{"children":[["$","strong",null,{"children":"Difficulty:"}]," ","Hard"]}],["$","div",null,{"children":[["$","strong",null,{"children":"Category:"}]," ","Array"]}],["$","div",null,{"children":[["$","strong",null,{"children":"Time Complexity:"}]," ","O(n)"]}],["$","div",null,{"children":[["$","strong",null,{"children":"Space Complexity:"}]," ","O(1)"]}]]}]]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Related Problems"}],["$","a",null,{"href":"https://leetcode.com/problems/product-of-array-except-self/","target":"_blank","rel":"noopener noreferrer","children":["$","div",null,{"className":"flex items-center gap-2 p-3 bg-gray-50 border border-gray-200 rounded-md text-gray-700 mb-2 hover:bg-gray-100 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-code ","children":[["$","polyline","z7tu5w",{"points":"16 18 22 12 16 6"}],["$","polyline","1eg1df",{"points":"8 6 2 12 8 18"}],"$undefined"]}],"View on LeetCode"]}]}],["$","$L2",null,{"href":"/interview/docs/leetcode/array/problems/17-product-of-array-except-self","children":["$","div",null,{"className":"flex items-center gap-2 p-3 bg-gray-50 border border-gray-200 rounded-md text-gray-700 mb-2 hover:bg-gray-100 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-file-text ","children":[["$","path","1nnpy2",{"d":"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"}],["$","polyline","1ew0cm",{"points":"14 2 14 8 20 8"}],["$","line","14keom",{"x1":"16","x2":"8","y1":"13","y2":"13"}],["$","line","17nazh",{"x1":"16","x2":"8","y1":"17","y2":"17"}],["$","line","1a5vjj",{"x1":"10","x2":"8","y1":"9","y2":"9"}],"$undefined"]}],"View Full Documentation"]}]}],["$","$L2",null,{"href":"/problems/16","children":["$","div",null,{"className":"flex items-center gap-2 p-3 bg-gray-50 border border-gray-200 rounded-md text-gray-700 mb-2 hover:bg-gray-100 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-code ","children":[["$","polyline","z7tu5w",{"points":"16 18 22 12 16 6"}],["$","polyline","1eg1df",{"points":"8 6 2 12 8 18"}],"$undefined"]}],"Previous Problem"]}]}],["$","$L2",null,{"href":"/problems/18","children":["$","div",null,{"className":"flex items-center gap-2 p-3 bg-gray-50 border border-gray-200 rounded-md text-gray-700 mb-2 hover:bg-gray-100 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-code ","children":[["$","polyline","z7tu5w",{"points":"16 18 22 12 16 6"}],["$","polyline","1eg1df",{"points":"8 6 2 12 8 18"}],"$undefined"]}],"Next Problem"]}]}]]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Study Resources"}],["$","$L2",null,{"href":"/learn","children":["$","div",null,{"className":"flex items-center gap-2 p-3 bg-gray-50 border border-gray-200 rounded-md text-gray-700 mb-2 hover:bg-gray-100 transition-colors","children":[["$","div",null,{"className":"w-4 h-4 bg-blue-500 rounded"}],"Learn Fundamentals"]}]}],["$","$L2",null,{"href":"/study-guide","children":["$","div",null,{"className":"flex items-center gap-2 p-3 bg-gray-50 border border-gray-200 rounded-md text-gray-700 mb-2 hover:bg-gray-100 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-file-text ","children":[["$","path","1nnpy2",{"d":"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"}],["$","polyline","1ew0cm",{"points":"14 2 14 8 20 8"}],["$","line","14keom",{"x1":"16","x2":"8","y1":"13","y2":"13"}],["$","line","17nazh",{"x1":"16","x2":"8","y1":"17","y2":"17"}],["$","line","1a5vjj",{"x1":"10","x2":"8","y1":"9","y2":"9"}],"$undefined"]}],"Study Guide"]}]}]]}]]}]]}]]}],null],null],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","problems","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","problems","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L8",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
