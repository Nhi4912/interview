2:I[2972,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],""]
3:I[5907,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],"default"]
5:I[4707,[],""]
7:I[6423,[],""]
8:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
4:T51d5,
# Word Search

**LeetCode Problem # * 79. Word Search**

## Problem Description

 * Given an m x n grid of characters board and a string word, return true if word  * exists in the grid.  *  * The word can be constructed from letters of sequentially adjacent cells, where  * adjacent cells are horizontally or vertically neighboring. The same letter cell 

## Solutions

{% raw %}
/**
 * 79. Word Search
 *
 * Problem:
 * Given an m x n grid of characters board and a string word, return true if word
 * exists in the grid.
 *
 * The word can be constructed from letters of sequentially adjacent cells, where
 * adjacent cells are horizontally or vertically neighboring. The same letter cell
 * may not be used more than once.
 *
 * Example:
 * Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
 * Output: true
 *
 * Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
 * Output: true
 *
 * Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
 * Output: false
 *
 * LeetCode: https://leetcode.com/problems/word-search/
 */

/**
 * Solution 1: Backtracking (Optimal)
 *
 * Approach:
 * - Use DFS with backtracking to search for the word
 * - Mark visited cells to avoid cycles
 * - Check all four directions (up, down, left, right)
 *
 * Time Complexity: O(m * n * 4^L) where L is the length of the word
 * Space Complexity: O(L) - recursion stack
 */
function exist(board: string[][], word: string): boolean {
  const m = board.length;
  const n = board[0].length;

  function backtrack(row: number, col: number, index: number): boolean {
    if (index === word.length) {
      return true;
    }

    if (
      row < 0 ||
      row >= m ||
      col < 0 ||
      col >= n ||
      board[row][col] !== word[index]
    ) {
      return false;
    }

    // Mark as visited
    const temp = board[row][col];
    board[row][col] = "#";

    // Check all four directions
    const directions = [
      [-1, 0],
      [1, 0],
      [0, -1],
      [0, 1],
    ];
    let found = false;

    for (const [dr, dc] of directions) {
      if (backtrack(row + dr, col + dc, index + 1)) {
        found = true;
        break;
      }
    }

    // Restore the cell
    board[row][col] = temp;

    return found;
  }

  // Try starting from each cell
  for (let i = 0; i < m; i++) {
    for (let j = 0; j < n; j++) {
      if (backtrack(i, j, 0)) {
        return true;
      }
    }
  }

  return false;
}

/**
 * Solution 2: Using Visited Array
 *
 * Approach:
 * - Use separate visited array instead of modifying board
 * - More explicit state management
 *
 * Time Complexity: O(m * n * 4^L)
 * Space Complexity: O(m * n + L)
 */
function existVisited(board: string[][], word: string): boolean {
  const m = board.length;
  const n = board[0].length;
  const visited = Array(m)
    .fill(null)
    .map(() => Array(n).fill(false));

  function backtrack(row: number, col: number, index: number): boolean {
    if (index === word.length) {
      return true;
    }

    if (
      row < 0 ||
      row >= m ||
      col < 0 ||
      col >= n ||
      visited[row][col] ||
      board[row][col] !== word[index]
    ) {
      return false;
    }

    visited[row][col] = true;

    const directions = [
      [-1, 0],
      [1, 0],
      [0, -1],
      [0, 1],
    ];
    let found = false;

    for (const [dr, dc] of directions) {
      if (backtrack(row + dr, col + dc, index + 1)) {
        found = true;
        break;
      }
    }

    visited[row][col] = false;
    return found;
  }

  for (let i = 0; i < m; i++) {
    for (let j = 0; j < n; j++) {
      if (backtrack(i, j, 0)) {
        return true;
      }
    }
  }

  return false;
}

/**
 * Solution 3: Using Set for Visited
 *
 * Approach:
 * - Use Set to track visited coordinates
 * - More efficient for sparse boards
 *
 * Time Complexity: O(m * n * 4^L)
 * Space Complexity: O(L)
 */
function existSet(board: string[][], word: string): boolean {
  const m = board.length;
  const n = board[0].length;
  const visited = new Set<string>();

  function backtrack(row: number, col: number, index: number): boolean {
    if (index === word.length) {
      return true;
    }

    const key = `${row},${col}`;
    if (
      row < 0 ||
      row >= m ||
      col < 0 ||
      col >= n ||
      visited.has(key) ||
      board[row][col] !== word[index]
    ) {
      return false;
    }

    visited.add(key);

    const directions = [
      [-1, 0],
      [1, 0],
      [0, -1],
      [0, 1],
    ];
    let found = false;

    for (const [dr, dc] of directions) {
      if (backtrack(row + dr, col + dc, index + 1)) {
        found = true;
        break;
      }
    }

    visited.delete(key);
    return found;
  }

  for (let i = 0; i < m; i++) {
    for (let j = 0; j < n; j++) {
      if (backtrack(i, j, 0)) {
        return true;
      }
    }
  }

  return false;
}

/**
 * Solution 4: Using Map for Visited
 *
 * Approach:
 * - Use Map to track visited coordinates
 * - More explicit coordinate tracking
 *
 * Time Complexity: O(m * n * 4^L)
 * Space Complexity: O(L)
 */
function existMap(board: string[][], word: string): boolean {
  const m = board.length;
  const n = board[0].length;
  const visited = new Map<string, boolean>();

  function backtrack(row: number, col: number, index: number): boolean {
    if (index === word.length) {
      return true;
    }

    const key = `${row},${col}`;
    if (
      row < 0 ||
      row >= m ||
      col < 0 ||
      col >= n ||
      visited.get(key) ||
      board[row][col] !== word[index]
    ) {
      return false;
    }

    visited.set(key, true);

    const directions = [
      [-1, 0],
      [1, 0],
      [0, -1],
      [0, 1],
    ];
    let found = false;

    for (const [dr, dc] of directions) {
      if (backtrack(row + dr, col + dc, index + 1)) {
        found = true;
        break;
      }
    }

    visited.set(key, false);
    return found;
  }

  for (let i = 0; i < m; i++) {
    for (let j = 0; j < n; j++) {
      if (backtrack(i, j, 0)) {
        return true;
      }
    }
  }

  return false;
}

/**
 * Solution 5: Using Class (Object-oriented)
 *
 * Approach:
 * - Create a WordSearch class
 * - Encapsulate the search logic
 *
 * Time Complexity: O(m * n * 4^L)
 * Space Complexity: O(m * n + L)
 */
class WordSearch {
  private board: string[][];
  private word: string;
  private m: number;
  private n: number;
  private visited: boolean[][];

  constructor(board: string[][], word: string) {
    this.board = board;
    this.word = word;
    this.m = board.length;
    this.n = board[0].length;
    this.visited = Array(this.m)
      .fill(null)
      .map(() => Array(this.n).fill(false));
  }

  search(): boolean {
    for (let i = 0; i < this.m; i++) {
      for (let j = 0; j < this.n; j++) {
        if (this.backtrack(i, j, 0)) {
          return true;
        }
      }
    }
    return false;
  }

  private backtrack(row: number, col: number, index: number): boolean {
    if (index === this.word.length) {
      return true;
    }

    if (
      row < 0 ||
      row >= this.m ||
      col < 0 ||
      col >= this.n ||
      this.visited[row][col] ||
      this.board[row][col] !== this.word[index]
    ) {
      return false;
    }

    this.visited[row][col] = true;

    const directions = [
      [-1, 0],
      [1, 0],
      [0, -1],
      [0, 1],
    ];
    let found = false;

    for (const [dr, dc] of directions) {
      if (this.backtrack(row + dr, col + dc, index + 1)) {
        found = true;
        break;
      }
    }

    this.visited[row][col] = false;
    return found;
  }
}

function existClass(board: string[][], word: string): boolean {
  const wordSearch = new WordSearch(board, word);
  return wordSearch.search();
}

/**
 * Solution 6: Using Functional Approach
 *
 * Approach:
 * - Use functional programming concepts
 * - More declarative style
 *
 * Time Complexity: O(m * n * 4^L)
 * Space Complexity: O(m * n + L)
 */
function existFunctional(board: string[][], word: string): boolean {
  const m = board.length;
  const n = board[0].length;
  const visited = Array(m)
    .fill(null)
    .map(() => Array(n).fill(false));

  const directions = [
    [-1, 0],
    [1, 0],
    [0, -1],
    [0, 1],
  ];

  function isValid(row: number, col: number): boolean {
    return row >= 0 && row < m && col >= 0 && col < n;
  }

  function backtrack(row: number, col: number, index: number): boolean {
    if (index === word.length) return true;
    if (
      !isValid(row, col) ||
      visited[row][col] ||
      board[row][col] !== word[index]
    ) {
      return false;
    }

    visited[row][col] = true;

    const found = directions.some(([dr, dc]) =>
      backtrack(row + dr, col + dc, index + 1)
    );

    visited[row][col] = false;
    return found;
  }

  return board.some((_, i) => board[i].some((_, j) => backtrack(i, j, 0)));
}

/**
 * Solution 7: Using Stack
 *
 * Approach:
 * - Use stack to simulate recursion
 * - Iterative approach with explicit stack
 *
 * Time Complexity: O(m * n * 4^L)
 * Space Complexity: O(m * n * L)
 */
function existStack(board: string[][], word: string): boolean {
  const m = board.length;
  const n = board[0].length;
  const visited = Array(m)
    .fill(null)
    .map(() => Array(n).fill(false));

  const stack: {
    row: number;
    col: number;
    index: number;
    visited: boolean[][];
  }[] = [];

  for (let i = 0; i < m; i++) {
    for (let j = 0; j < n; j++) {
      stack.push({
        row: i,
        col: j,
        index: 0,
        visited: visited.map((row) => [...row]),
      });

      while (stack.length > 0) {
        const { row, col, index, visited: currentVisited } = stack.pop()!;

        if (index === word.length) {
          return true;
        }

        if (
          row < 0 ||
          row >= m ||
          col < 0 ||
          col >= n ||
          currentVisited[row][col] ||
          board[row][col] !== word[index]
        ) {
          continue;
        }

        currentVisited[row][col] = true;

        const directions = [
          [-1, 0],
          [1, 0],
          [0, -1],
          [0, 1],
        ];
        for (const [dr, dc] of directions) {
          stack.push({
            row: row + dr,
            col: col + dc,
            index: index + 1,
            visited: currentVisited.map((row) => [...row]),
          });
        }
      }
    }
  }

  return false;
}

/**
 * Solution 8: Using Generator (Memory efficient)
 *
 * Approach:
 * - Use generator to yield search paths
 * - Memory efficient for large boards
 *
 * Time Complexity: O(m * n * 4^L)
 * Space Complexity: O(L)
 */
function* existGenerator(board: string[][], word: string): Generator<boolean> {
  const m = board.length;
  const n = board[0].length;
  const visited = new Set<string>();

  function* search(
    row: number,
    col: number,
    index: number
  ): Generator<boolean> {
    if (index === word.length) {
      yield true;
      return;
    }

    const key = `${row},${col}`;
    if (
      row < 0 ||
      row >= m ||
      col < 0 ||
      col >= n ||
      visited.has(key) ||
      board[row][col] !== word[index]
    ) {
      return;
    }

    visited.add(key);

    const directions = [
      [-1, 0],
      [1, 0],
      [0, -1],
      [0, 1],
    ];
    for (const [dr, dc] of directions) {
      yield* search(row + dr, col + dc, index + 1);
    }

    visited.delete(key);
  }

  for (let i = 0; i < m; i++) {
    for (let j = 0; j < n; j++) {
      yield* search(i, j, 0);
    }
  }
}

function existWithGenerator(board: string[][], word: string): boolean {
  for (const result of existGenerator(board, word)) {
    if (result) return true;
  }
  return false;
}

/**
 * Solution 9: Using Early Termination
 *
 * Approach:
 * - Add early termination conditions
 * - More efficient pruning
 *
 * Time Complexity: O(m * n * 4^L)
 * Space Complexity: O(L)
 */
function existEarlyTermination(board: string[][], word: string): boolean {
  const m = board.length;
  const n = board[0].length;

  // Early termination: check if all characters exist
  const charCount = new Map<string, number>();
  for (const row of board) {
    for (const char of row) {
      charCount.set(char, (charCount.get(char) || 0) + 1);
    }
  }

  for (const char of word) {
    const count = charCount.get(char) || 0;
    if (count === 0) return false;
    charCount.set(char, count - 1);
  }

  function backtrack(row: number, col: number, index: number): boolean {
    if (index === word.length) {
      return true;
    }

    if (
      row < 0 ||
      row >= m ||
      col < 0 ||
      col >= n ||
      board[row][col] !== word[index]
    ) {
      return false;
    }

    const temp = board[row][col];
    board[row][col] = "#";

    const directions = [
      [-1, 0],
      [1, 0],
      [0, -1],
      [0, 1],
    ];
    let found = false;

    for (const [dr, dc] of directions) {
      if (backtrack(row + dr, col + dc, index + 1)) {
        found = true;
        break;
      }
    }

    board[row][col] = temp;
    return found;
  }

  for (let i = 0; i < m; i++) {
    for (let j = 0; j < n; j++) {
      if (backtrack(i, j, 0)) {
        return true;
      }
    }
  }

  return false;
}

/**
 * Solution 10: Using BFS (Breadth-First Search)
 *
 * Approach:
 * - Use BFS instead of DFS
 * - Level-by-level search
 *
 * Time Complexity: O(m * n * 4^L)
 * Space Complexity: O(m * n * L)
 */
function existBFS(board: string[][], word: string): boolean {
  const m = board.length;
  const n = board[0].length;

  const queue: {
    row: number;
    col: number;
    index: number;
    visited: Set<string>;
  }[] = [];

  for (let i = 0; i < m; i++) {
    for (let j = 0; j < n; j++) {
      if (board[i][j] === word[0]) {
        queue.push({
          row: i,
          col: j,
          index: 0,
          visited: new Set([`${i},${j}`]),
        });
      }
    }
  }

  while (queue.length > 0) {
    const { row, col, index, visited } = queue.shift()!;

    if (index === word.length - 1) {
      return true;
    }

    const directions = [
      [-1, 0],
      [1, 0],
      [0, -1],
      [0, 1],
    ];
    for (const [dr, dc] of directions) {
      const newRow = row + dr;
      const newCol = col + dc;
      const key = `${newRow},${newCol}`;

      if (
        newRow >= 0 &&
        newRow < m &&
        newCol >= 0 &&
        newCol < n &&
        !visited.has(key) &&
        board[newRow][newCol] === word[index + 1]
      ) {
        const newVisited = new Set(visited);
        newVisited.add(key);
        queue.push({
          row: newRow,
          col: newCol,
          index: index + 1,
          visited: newVisited,
        });
      }
    }
  }

  return false;
}

// Test cases
function testExist() {
  console.log("=== Testing Word Search ===\n");

  const testCases = [
    {
      board: [
        ["A", "B", "C", "E"],
        ["S", "F", "C", "S"],
        ["A", "D", "E", "E"],
      ],
      word: "ABCCED",
      expected: true,
      description: "Word exists",
    },
    {
      board: [
        ["A", "B", "C", "E"],
        ["S", "F", "C", "S"],
        ["A", "D", "E", "E"],
      ],
      word: "SEE",
      expected: true,
      description: "Word exists",
    },
    {
      board: [
        ["A", "B", "C", "E"],
        ["S", "F", "C", "S"],
        ["A", "D", "E", "E"],
      ],
      word: "ABCB",
      expected: false,
      description: "Word doesn't exist",
    },
    {
      board: [
        ["A", "B", "C", "E"],
        ["S", "F", "C", "S"],
        ["A", "D", "E", "E"],
      ],
      word: "A",
      expected: true,
      description: "Single character",
    },
    {
      board: [["A"]],
      word: "A",
      expected: true,
      description: "Single cell",
    },
  ];

  testCases.forEach((testCase, index) => {
    console.log(`Test Case ${index + 1}: ${testCase.description}`);
    console.log(`Board: ${JSON.stringify(testCase.board)}`);
    console.log(`Word: "${testCase.word}"`);
    console.log(`Expected: ${testCase.expected}\n`);

    // Test Solution 1 (Backtracking)
    const result1 = exist(
      [...testCase.board.map((row) => [...row])],
      testCase.word
    );
    console.log(
      `Solution 1 (Backtracking): ${result1} ${
        result1 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 2 (Visited Array)
    const result2 = existVisited(
      [...testCase.board.map((row) => [...row])],
      testCase.word
    );
    console.log(
      `Solution 2 (Visited Array): ${result2} ${
        result2 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 3 (Set)
    const result3 = existSet(
      [...testCase.board.map((row) => [...row])],
      testCase.word
    );
    console.log(
      `Solution 3 (Set): ${result3} ${
        result3 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 4 (Map)
    const result4 = existMap(
      [...testCase.board.map((row) => [...row])],
      testCase.word
    );
    console.log(
      `Solution 4 (Map): ${result4} ${
        result4 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 5 (Class)
    const result5 = existClass(
      [...testCase.board.map((row) => [...row])],
      testCase.word
    );
    console.log(
      `Solution 5 (Class): ${result5} ${
        result5 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 6 (Functional)
    const result6 = existFunctional(
      [...testCase.board.map((row) => [...row])],
      testCase.word
    );
    console.log(
      `Solution 6 (Functional): ${result6} ${
        result6 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 7 (Stack)
    const result7 = existStack(
      [...testCase.board.map((row) => [...row])],
      testCase.word
    );
    console.log(
      `Solution 7 (Stack): ${result7} ${
        result7 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 8 (Generator)
    const result8 = existWithGenerator(
      [...testCase.board.map((row) => [...row])],
      testCase.word
    );
    console.log(
      `Solution 8 (Generator): ${result8} ${
        result8 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 9 (Early Termination)
    const result9 = existEarlyTermination(
      [...testCase.board.map((row) => [...row])],
      testCase.word
    );
    console.log(
      `Solution 9 (Early Termination): ${result9} ${
        result9 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 10 (BFS)
    const result10 = existBFS(
      [...testCase.board.map((row) => [...row])],
      testCase.word
    );
    console.log(
      `Solution 10 (BFS): ${result10} ${
        result10 === testCase.expected ? "✅" : "❌"
      }`
    );

    console.log("\n---\n");
  });
}

// Performance comparison
function performanceComparison() {
  console.log("=== Performance Comparison ===\n");

  const testCases = [
    { name: "Backtracking", func: exist },
    { name: "Visited Array", func: existVisited },
    { name: "Set", func: existSet },
    { name: "Map", func: existMap },
    { name: "Class", func: existClass },
    { name: "Functional", func: existFunctional },
    { name: "Stack", func: existStack },
    { name: "Generator", func: existWithGenerator },
    { name: "Early Termination", func: existEarlyTermination },
    { name: "BFS", func: existBFS },
  ];

  // Create test cases
  const smallCase = {
    board: [
      ["A", "B", "C"],
      ["D", "E", "F"],
      ["G", "H", "I"],
    ],
    word: "ABC",
  };
  const mediumCase = {
    board: [
      ["A", "B", "C", "E"],
      ["S", "F", "C", "S"],
      ["A", "D", "E", "E"],
    ],
    word: "ABCCED",
  };
  const largeCase = {
    board: [
      ["A", "B", "C", "D"],
      ["E", "F", "G", "H"],
      ["I", "J", "K", "L"],
      ["M", "N", "O", "P"],
    ],
    word: "ABCDEFGHIJKLMNOP",
  };

  const cases = [
    { name: "Small", case: smallCase },
    { name: "Medium", case: mediumCase },
    { name: "Large", case: largeCase },
  ];

  cases.forEach(({ name, case: testCase }) => {
    console.log(`${name} Case:`);

    testCases.forEach(({ name: funcName, func }) => {
      const start = performance.now();
      const result = func(
        [...testCase.board.map((row) => [...row])],
        testCase.word
      );
      const end = performance.now();

      console.log(`  ${funcName}: ${(end - start).toFixed(2)}ms (${result})`);
    });

    console.log("");
  });
}

// Uncomment the following lines to run tests
// testExist();
// performanceComparison();

export {
  exist,
  existVisited,
  existSet,
  existMap,
  existClass,
  existFunctional,
  existStack,
  existWithGenerator,
  existEarlyTermination,
  existBFS,
  WordSearch,
  existGenerator,
  testExist,
  performanceComparison,
};
{% endraw %}
6:["topic","backtracking-problems-06-word-search","d"]
0:["2NmUhWiPdVVBzVtDZlggk",[[["",{"children":["learn",{"children":[["topic","backtracking-problems-06-word-search","d"],{"children":["__PAGE__?{\"topic\":\"backtracking-problems-06-word-search\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["learn",{"children":[["topic","backtracking-problems-06-word-search","d"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"max-w-6xl mx-auto px-8 py-24","children":[["$","div",null,{"className":"flex items-center gap-4 mb-8","children":["$","$L2",null,{"href":"/learn","children":["$","button",null,{"className":"flex items-center gap-2 bg-gray-100 border border-gray-300 text-gray-700 px-4 py-3 rounded-md font-medium hover:bg-gray-200 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left ","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Learn"]}]}]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8 mb-8","children":[["$","div",null,{"className":"flex items-center justify-between mb-4","children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900","children":"Word Search"}],["$","div",null,{"className":"flex gap-4","children":[["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-star ","children":[["$","polygon","8f66p6",{"points":"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"}],"$undefined"]}],"Bookmark"]}],["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-share2 ","children":[["$","circle","gq8acd",{"cx":"18","cy":"5","r":"3"}],["$","circle","w7nqdw",{"cx":"6","cy":"12","r":"3"}],["$","circle","1xt0gg",{"cx":"18","cy":"19","r":"3"}],["$","line","47mynk",{"x1":"8.59","x2":"15.42","y1":"13.51","y2":"17.49"}],["$","line","1n3mei",{"x1":"15.41","x2":"8.59","y1":"6.51","y2":"10.49"}],"$undefined"]}],"Share"]}]]}]]}],["$","div",null,{"className":"flex gap-8 mb-4","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock ","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],"2-3 hours"]}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold text-white bg-red-500","children":"Hard"}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700","children":"Backtracking"}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","0",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Backtracking"}],["$","span","1",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Hash Table"}]]}],["$","p",null,{"className":"text-lg text-gray-700 leading-relaxed","children":"**LeetCode Problem # * 79. Word Search**..."}]]}],["$","div",null,{"className":"grid grid-cols-1 lg:grid-cols-3 gap-8","children":[["$","div",null,{"className":"lg:col-span-2","children":["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8","children":["$","$L3",null,{"content":"$4"}]}]}],["$","div",null,{"className":"space-y-6","children":[["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Your Progress"}],["$","div",null,{"className":"w-full bg-gray-200 rounded-full h-2 mb-2","children":["$","div",null,{"className":"bg-blue-600 h-2 rounded-full","style":{"width":"25%"}}]}],["$","p",null,{"className":"text-sm text-gray-600","children":"25% Complete"}]]}],false]}]]}]]}],null],null],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L8",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
