2:I[2972,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],""]
3:I[5907,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],"default"]
5:I[4707,[],""]
7:I[6423,[],""]
8:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
4:T33da,
# Valid Palindrome

**LeetCode Problem # * 125. Valid Palindrome**

## Problem Description

 * A phrase is a palindrome if, after converting all uppercase letters into lowercase  * letters and removing all non-alphanumeric characters, it reads the same forward  * and backward. Alphanumeric characters include letters and numbers.  *  * Given a string s, return true if it is a palindrome, or false otherwise. 

## Solutions

{% raw %}
/**
 * 125. Valid Palindrome
 *
 * Problem:
 * A phrase is a palindrome if, after converting all uppercase letters into lowercase
 * letters and removing all non-alphanumeric characters, it reads the same forward
 * and backward. Alphanumeric characters include letters and numbers.
 *
 * Given a string s, return true if it is a palindrome, or false otherwise.
 *
 * Example:
 * Input: s = "A man, a plan, a canal: Panama"
 * Output: true
 *
 * Input: s = "race a car"
 * Output: false
 *
 * Input: s = " "
 * Output: true
 *
 * LeetCode: https://leetcode.com/problems/valid-palindrome/
 */

/**
 * Solution 1: Two Pointers (Optimal)
 *
 * Approach:
 * - Use two pointers from start and end
 * - Skip non-alphanumeric characters
 * - Compare characters (case-insensitive)
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function isPalindrome(s: string): boolean {
  let left = 0;
  let right = s.length - 1;

  while (left < right) {
    // Skip non-alphanumeric characters from left
    while (left < right && !isAlphanumeric(s[left])) {
      left++;
    }

    // Skip non-alphanumeric characters from right
    while (left < right && !isAlphanumeric(s[right])) {
      right--;
    }

    // Compare characters (case-insensitive)
    if (toLowerCase(s[left]) !== toLowerCase(s[right])) {
      return false;
    }

    left++;
    right--;
  }

  return true;
}

/**
 * Solution 2: Filter and Compare
 *
 * Approach:
 * - Filter out non-alphanumeric characters
 * - Convert to lowercase
 * - Compare with reversed string
 *
 * Time Complexity: O(n)
 * Space Complexity: O(n)
 */
function isPalindromeFilter(s: string): boolean {
  const filtered = s
    .split("")
    .filter((char) => isAlphanumeric(char))
    .join("")
    .toLowerCase();

  return filtered === filtered.split("").reverse().join("");
}

/**
 * Solution 3: Using Regular Expression
 *
 * Approach:
 * - Use regex to remove non-alphanumeric characters
 * - Convert to lowercase and compare
 *
 * Time Complexity: O(n)
 * Space Complexity: O(n)
 */
function isPalindromeRegex(s: string): boolean {
  const cleaned = s.replace(/[^a-zA-Z0-9]/g, "").toLowerCase();
  return cleaned === cleaned.split("").reverse().join("");
}

/**
 * Solution 4: Recursive Approach
 *
 * Approach:
 * - Use recursion to check palindrome
 * - Base case: empty string or single character
 *
 * Time Complexity: O(n)
 * Space Complexity: O(n) - recursion stack
 */
function isPalindromeRecursive(s: string): boolean {
  const cleaned = s.replace(/[^a-zA-Z0-9]/g, "").toLowerCase();

  function checkPalindrome(str: string): boolean {
    if (str.length <= 1) return true;

    if (str[0] !== str[str.length - 1]) return false;

    return checkPalindrome(str.slice(1, -1));
  }

  return checkPalindrome(cleaned);
}

/**
 * Solution 5: Using Stack
 *
 * Approach:
 * - Push first half to stack
 * - Compare with second half
 *
 * Time Complexity: O(n)
 * Space Complexity: O(n)
 */
function isPalindromeStack(s: string): boolean {
  const cleaned = s.replace(/[^a-zA-Z0-9]/g, "").toLowerCase();
  const stack: string[] = [];
  const mid = Math.floor(cleaned.length / 2);

  // Push first half to stack
  for (let i = 0; i < mid; i++) {
    stack.push(cleaned[i]);
  }

  // Compare with second half
  const start = cleaned.length % 2 === 0 ? mid : mid + 1;
  for (let i = start; i < cleaned.length; i++) {
    if (stack.pop() !== cleaned[i]) {
      return false;
    }
  }

  return true;
}

/**
 * Solution 6: Using Array Methods (Functional)
 *
 * Approach:
 * - Use functional programming approach
 * - More declarative style
 *
 * Time Complexity: O(n)
 * Space Complexity: O(n)
 */
function isPalindromeFunctional(s: string): boolean {
  const cleaned = s
    .toLowerCase()
    .split("")
    .filter((char) => /[a-z0-9]/.test(char));

  return cleaned.join("") === cleaned.reverse().join("");
}

/**
 * Solution 7: Using Generator (Memory efficient)
 *
 * Approach:
 * - Use generator to yield characters
 * - Memory efficient for large strings
 *
 * Time Complexity: O(n)
 * Space Complexity: O(n)
 */
function* alphanumericGenerator(s: string): Generator<string> {
  for (const char of s) {
    if (isAlphanumeric(char)) {
      yield toLowerCase(char);
    }
  }
}

function isPalindromeGenerator(s: string): boolean {
  const chars = Array.from(alphanumericGenerator(s));
  return chars.join("") === chars.reverse().join("");
}

/**
 * Solution 8: Using Class (Object-oriented)
 *
 * Approach:
 * - Create a PalindromeChecker class
 * - Encapsulate validation logic
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
class PalindromeChecker {
  private s: string;

  constructor(s: string) {
    this.s = s;
  }

  isValid(): boolean {
    let left = 0;
    let right = this.s.length - 1;

    while (left < right) {
      while (left < right && !this.isAlphanumeric(this.s[left])) {
        left++;
      }

      while (left < right && !this.isAlphanumeric(this.s[right])) {
        right--;
      }

      if (this.toLowerCase(this.s[left]) !== this.toLowerCase(this.s[right])) {
        return false;
      }

      left++;
      right--;
    }

    return true;
  }

  private isAlphanumeric(char: string): boolean {
    return /[a-zA-Z0-9]/.test(char);
  }

  private toLowerCase(char: string): string {
    return char.toLowerCase();
  }
}

function isPalindromeClass(s: string): boolean {
  const checker = new PalindromeChecker(s);
  return checker.isValid();
}

/**
 * Solution 9: Using Bit Manipulation (Limited use case)
 *
 * Approach:
 * - Use bit operations for ASCII characters
 * - Limited to small strings due to integer size
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function isPalindromeBitwise(s: string): boolean {
  if (s.length > 64) {
    // Fallback to standard approach for large strings
    return isPalindrome(s);
  }

  let leftBits = 0;
  let rightBits = 0;
  let leftCount = 0;
  let rightCount = 0;

  const mid = Math.floor(s.length / 2);

  // Process left half
  for (let i = 0; i < mid; i++) {
    if (isAlphanumeric(s[i])) {
      const char = toLowerCase(s[i]);
      leftBits |= 1 << (char.charCodeAt(0) - "a".charCodeAt(0));
      leftCount++;
    }
  }

  // Process right half
  const start = s.length % 2 === 0 ? mid : mid + 1;
  for (let i = start; i < s.length; i++) {
    if (isAlphanumeric(s[i])) {
      const char = toLowerCase(s[i]);
      rightBits |= 1 << (char.charCodeAt(0) - "a".charCodeAt(0));
      rightCount++;
    }
  }

  return leftBits === rightBits && leftCount === rightCount;
}

// Helper functions
function isAlphanumeric(char: string): boolean {
  return /[a-zA-Z0-9]/.test(char);
}

function toLowerCase(char: string): string {
  return char.toLowerCase();
}

// Test cases
function testValidPalindrome() {
  console.log("=== Testing Valid Palindrome ===\n");

  const testCases = [
    {
      input: "A man, a plan, a canal: Panama",
      expected: true,
      description: "Complex palindrome with punctuation",
    },
    {
      input: "race a car",
      expected: false,
      description: "Not a palindrome",
    },
    {
      input: " ",
      expected: true,
      description: "Single space",
    },
    {
      input: "",
      expected: true,
      description: "Empty string",
    },
    {
      input: "racecar",
      expected: true,
      description: "Simple palindrome",
    },
    {
      input: "12321",
      expected: true,
      description: "Numeric palindrome",
    },
    {
      input: "A1b2C3c2b1a",
      expected: true,
      description: "Alphanumeric palindrome",
    },
    {
      input: "hello world",
      expected: false,
      description: "Regular text",
    },
    {
      input: ".,",
      expected: true,
      description: "Only punctuation",
    },
  ];

  testCases.forEach((testCase, index) => {
    console.log(`Test Case ${index + 1}: ${testCase.description}`);
    console.log(`Input: "${testCase.input}"`);
    console.log(`Expected: ${testCase.expected}\n`);

    // Test Solution 1 (Two Pointers)
    const result1 = isPalindrome(testCase.input);
    console.log(
      `Solution 1 (Two Pointers): ${result1} ${
        result1 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 2 (Filter)
    const result2 = isPalindromeFilter(testCase.input);
    console.log(
      `Solution 2 (Filter): ${result2} ${
        result2 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 3 (Regex)
    const result3 = isPalindromeRegex(testCase.input);
    console.log(
      `Solution 3 (Regex): ${result3} ${
        result3 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 4 (Recursive)
    const result4 = isPalindromeRecursive(testCase.input);
    console.log(
      `Solution 4 (Recursive): ${result4} ${
        result4 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 5 (Stack)
    const result5 = isPalindromeStack(testCase.input);
    console.log(
      `Solution 5 (Stack): ${result5} ${
        result5 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 6 (Functional)
    const result6 = isPalindromeFunctional(testCase.input);
    console.log(
      `Solution 6 (Functional): ${result6} ${
        result6 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 7 (Generator)
    const result7 = isPalindromeGenerator(testCase.input);
    console.log(
      `Solution 7 (Generator): ${result7} ${
        result7 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 8 (Class)
    const result8 = isPalindromeClass(testCase.input);
    console.log(
      `Solution 8 (Class): ${result8} ${
        result8 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 9 (Bitwise)
    const result9 = isPalindromeBitwise(testCase.input);
    console.log(
      `Solution 9 (Bitwise): ${result9} ${
        result9 === testCase.expected ? "✅" : "❌"
      }`
    );

    console.log("\n---\n");
  });
}

// Performance comparison
function performanceComparison() {
  console.log("=== Performance Comparison ===\n");

  const testCases = [
    { name: "Two Pointers", func: isPalindrome },
    { name: "Filter", func: isPalindromeFilter },
    { name: "Regex", func: isPalindromeRegex },
    { name: "Recursive", func: isPalindromeRecursive },
    { name: "Stack", func: isPalindromeStack },
    { name: "Functional", func: isPalindromeFunctional },
    { name: "Generator", func: isPalindromeGenerator },
    { name: "Class", func: isPalindromeClass },
    { name: "Bitwise", func: isPalindromeBitwise },
  ];

  // Create test strings
  const shortString = "A man, a plan, a canal: Panama";
  const longString = "A man, a plan, a canal: Panama".repeat(1000);
  const nonPalindrome = "This is not a palindrome at all";

  const strings = [
    { name: "Short", string: shortString },
    { name: "Long", string: longString },
    { name: "Non-Palindrome", string: nonPalindrome },
  ];

  strings.forEach(({ name, string }) => {
    console.log(`${name} String:`);

    testCases.forEach(({ name: funcName, func }) => {
      const start = performance.now();
      const result = func(string);
      const end = performance.now();

      console.log(`  ${funcName}: ${(end - start).toFixed(2)}ms (${result})`);
    });

    console.log("");
  });
}

// Character analysis
function characterAnalysis() {
  console.log("=== Character Analysis ===\n");

  const testStrings = [
    "A man, a plan, a canal: Panama",
    "race a car",
    "12321",
    ".,!@#$%",
    "aA1bB2cC3",
  ];

  testStrings.forEach((str, index) => {
    console.log(`String ${index + 1}: "${str}"`);

    const alphanumeric = str.split("").filter((char) => isAlphanumeric(char));
    const nonAlphanumeric = str
      .split("")
      .filter((char) => !isAlphanumeric(char));

    console.log(
      `  Alphanumeric: [${alphanumeric.join(", ")}] (${alphanumeric.length})`
    );
    console.log(
      `  Non-alphanumeric: [${nonAlphanumeric.join(", ")}] (${
        nonAlphanumeric.length
      })`
    );

    const cleaned = str.replace(/[^a-zA-Z0-9]/g, "").toLowerCase();
    console.log(`  Cleaned: "${cleaned}"`);

    const isPalindromeResult = isPalindrome(str);
    console.log(`  Is palindrome: ${isPalindromeResult}`);
    console.log("");
  });
}

// Uncomment the following lines to run tests
// testValidPalindrome();
// performanceComparison();
// characterAnalysis();

export {
  isPalindrome,
  isPalindromeFilter,
  isPalindromeRegex,
  isPalindromeRecursive,
  isPalindromeStack,
  isPalindromeFunctional,
  isPalindromeGenerator,
  isPalindromeClass,
  isPalindromeBitwise,
  PalindromeChecker,
  alphanumericGenerator,
  isAlphanumeric,
  toLowerCase,
  testValidPalindrome,
  performanceComparison,
  characterAnalysis,
};
{% endraw %}
6:["topic","string-problems-05-valid-palindrome","d"]
0:["2NmUhWiPdVVBzVtDZlggk",[[["",{"children":["learn",{"children":[["topic","string-problems-05-valid-palindrome","d"],{"children":["__PAGE__?{\"topic\":\"string-problems-05-valid-palindrome\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["learn",{"children":[["topic","string-problems-05-valid-palindrome","d"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"max-w-6xl mx-auto px-8 py-24","children":[["$","div",null,{"className":"flex items-center gap-4 mb-8","children":["$","$L2",null,{"href":"/learn","children":["$","button",null,{"className":"flex items-center gap-2 bg-gray-100 border border-gray-300 text-gray-700 px-4 py-3 rounded-md font-medium hover:bg-gray-200 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left ","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Learn"]}]}]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8 mb-8","children":[["$","div",null,{"className":"flex items-center justify-between mb-4","children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900","children":"Valid Palindrome"}],["$","div",null,{"className":"flex gap-4","children":[["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-star ","children":[["$","polygon","8f66p6",{"points":"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"}],"$undefined"]}],"Bookmark"]}],["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-share2 ","children":[["$","circle","gq8acd",{"cx":"18","cy":"5","r":"3"}],["$","circle","w7nqdw",{"cx":"6","cy":"12","r":"3"}],["$","circle","1xt0gg",{"cx":"18","cy":"19","r":"3"}],["$","line","47mynk",{"x1":"8.59","x2":"15.42","y1":"13.51","y2":"17.49"}],["$","line","1n3mei",{"x1":"15.41","x2":"8.59","y1":"6.51","y2":"10.49"}],"$undefined"]}],"Share"]}]]}]]}],["$","div",null,{"className":"flex gap-8 mb-4","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock ","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],"2-3 hours"]}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold text-white bg-red-500","children":"Easy"}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700","children":"String"}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","0",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"String"}],["$","span","1",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Two Pointers"}]]}],["$","p",null,{"className":"text-lg text-gray-700 leading-relaxed","children":"**LeetCode Problem # * 125. Valid Palindrome**..."}]]}],["$","div",null,{"className":"grid grid-cols-1 lg:grid-cols-3 gap-8","children":[["$","div",null,{"className":"lg:col-span-2","children":["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8","children":["$","$L3",null,{"content":"$4"}]}]}],["$","div",null,{"className":"space-y-6","children":[["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Your Progress"}],["$","div",null,{"className":"w-full bg-gray-200 rounded-full h-2 mb-2","children":["$","div",null,{"className":"bg-blue-600 h-2 rounded-full","style":{"width":"25%"}}]}],["$","p",null,{"className":"text-sm text-gray-600","children":"25% Complete"}]]}],false]}]]}]]}],null],null],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L8",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
