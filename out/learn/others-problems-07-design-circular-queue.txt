2:I[2972,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-b4f9b7b2865ef07e.js"],""]
3:I[5907,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-b4f9b7b2865ef07e.js"],"default"]
5:I[4707,[],""]
7:I[6423,[],""]
8:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
4:T41f5,
# Design Circular Queue



## Problem Description

 *  * Design your implementation of the circular queue. The circular queue is a linear  * data structure in which the operations are performed based on FIFO (First In First Out)  * principle and the last position is connected back to the first position to make a circle.  * It is also called "Ring Buffer". 

## Solutions

{% raw %}
/**
 * Design Circular Queue
 *
 * Problem: https://leetcode.com/problems/design-circular-queue/
 *
 * Design your implementation of the circular queue. The circular queue is a linear
 * data structure in which the operations are performed based on FIFO (First In First Out)
 * principle and the last position is connected back to the first position to make a circle.
 * It is also called "Ring Buffer".
 *
 * One of the benefits of the circular queue is that we can make use of the spaces in
 * front of the queue. In a normal queue, once the queue becomes full, we cannot insert
 * the next element even if there is a space in front of the queue. But using a circular
 * queue, we can use the space to store new values.
 *
 * Implementation the MyCircularQueue class:
 * - MyCircularQueue(k) Initializes the object with the size of the queue to be k.
 * - boolean enQueue(int value) Inserts an element into the circular queue. Return true
 *   if the operation is successful.
 * - boolean deQueue() Deletes an element from the circular queue. Return true if the
 *   operation is successful.
 * - int Front() Gets the front item from the queue. If the queue is empty, return -1.
 * - int Rear() Gets the last item from the queue. If the queue is empty, return -1.
 * - boolean isEmpty() Checks whether the circular queue is empty or not.
 * - boolean isFull() Checks whether the circular queue is full or not.
 *
 * You must solve the problem without using the built-in queue data structure in your
 * programming language.
 *
 * Example 1:
 * Input:
 * ["MyCircularQueue", "enQueue", "enQueue", "enQueue", "enQueue", "Rear", "isFull", "deQueue", "enQueue", "Rear"]
 * [[3], [1], [2], [3], [4], [], [], [], [4], []]
 * Output: [null, true, true, true, false, 3, true, true, true, 4]
 *
 * Explanation:
 * MyCircularQueue myCircularQueue = new MyCircularQueue(3);
 * myCircularQueue.enQueue(1); // return True
 * myCircularQueue.enQueue(2); // return True
 * myCircularQueue.enQueue(3); // return True
 * myCircularQueue.enQueue(4); // return False
 * myCircularQueue.Rear();     // return 3
 * myCircularQueue.isFull();   // return True
 * myCircularQueue.deQueue();  // return True
 * myCircularQueue.enQueue(4); // return True
 * myCircularQueue.Rear();     // return 4
 *
 * Constraints:
 * - 1 <= k <= 1000
 * - 0 <= value <= 1000
 * - At most 3000 calls will be made to enQueue, deQueue, Front, Rear, isEmpty, and isFull.
 *
 * Solution Approaches:
 * 1. Array-based implementation with front and rear pointers
 * 2. Array-based implementation with size tracking
 * 3. Linked list implementation
 * 4. With additional features and statistics
 *
 * Time Complexity: O(1) for all operations
 * Space Complexity: O(k) where k is the capacity
 */

/**
 * MyCircularQueue - Array-based Implementation with Front and Rear Pointers
 *
 * MyCircularQueue - Triển khai dựa trên Array với con trỏ Front và Rear
 *
 * This approach uses an array with front and rear pointers to track the queue state
 */
class MyCircularQueue {
  private queue: number[];
  private front: number;
  private rear: number;
  private capacity: number;
  private size: number;

  constructor(k: number) {
    this.queue = new Array(k);
    this.front = 0;
    this.rear = -1;
    this.capacity = k;
    this.size = 0;
  }

  /**
   * Insert an element into the circular queue
   * Chèn một phần tử vào circular queue
   */
  enQueue(value: number): boolean {
    if (this.isFull()) {
      return false;
    }

    this.rear = (this.rear + 1) % this.capacity;
    this.queue[this.rear] = value;
    this.size++;

    return true;
  }

  /**
   * Delete an element from the circular queue
   * Xóa một phần tử khỏi circular queue
   */
  deQueue(): boolean {
    if (this.isEmpty()) {
      return false;
    }

    this.front = (this.front + 1) % this.capacity;
    this.size--;

    return true;
  }

  /**
   * Get the front item from the queue
   * Lấy phần tử đầu tiên từ queue
   */
  Front(): number {
    if (this.isEmpty()) {
      return -1;
    }

    return this.queue[this.front];
  }

  /**
   * Get the last item from the queue
   * Lấy phần tử cuối cùng từ queue
   */
  Rear(): number {
    if (this.isEmpty()) {
      return -1;
    }

    return this.queue[this.rear];
  }

  /**
   * Check if the queue is empty
   * Kiểm tra xem queue có rỗng không
   */
  isEmpty(): boolean {
    return this.size === 0;
  }

  /**
   * Check if the queue is full
   * Kiểm tra xem queue có đầy không
   */
  isFull(): boolean {
    return this.size === this.capacity;
  }

  /**
   * Get current size of the queue
   * Lấy kích thước hiện tại của queue
   */
  getSize(): number {
    return this.size;
  }

  /**
   * Get the capacity of the queue
   * Lấy dung lượng của queue
   */
  getCapacity(): number {
    return this.capacity;
  }

  /**
   * Get the internal state for debugging
   * Lấy trạng thái nội bộ để debug
   */
  getState(): { queue: number[]; front: number; rear: number; size: number } {
    return {
      queue: [...this.queue],
      front: this.front,
      rear: this.rear,
      size: this.size,
    };
  }
}

/**
 * Alternative Implementation: Array-based with Size Tracking Only
 *
 * Triển khai thay thế: Dựa trên Array chỉ với theo dõi kích thước
 */
class MyCircularQueueSizeOnly {
  private queue: number[];
  private front: number;
  private size: number;
  private capacity: number;

  constructor(k: number) {
    this.queue = new Array(k);
    this.front = 0;
    this.size = 0;
    this.capacity = k;
  }

  enQueue(value: number): boolean {
    if (this.isFull()) {
      return false;
    }

    const rear = (this.front + this.size) % this.capacity;
    this.queue[rear] = value;
    this.size++;

    return true;
  }

  deQueue(): boolean {
    if (this.isEmpty()) {
      return false;
    }

    this.front = (this.front + 1) % this.capacity;
    this.size--;

    return true;
  }

  Front(): number {
    if (this.isEmpty()) {
      return -1;
    }

    return this.queue[this.front];
  }

  Rear(): number {
    if (this.isEmpty()) {
      return -1;
    }

    const rear = (this.front + this.size - 1) % this.capacity;
    return this.queue[rear];
  }

  isEmpty(): boolean {
    return this.size === 0;
  }

  isFull(): boolean {
    return this.size === this.capacity;
  }

  getSize(): number {
    return this.size;
  }
}

/**
 * Linked List Implementation
 *
 * Triển khai Linked List
 */
class CircularQueueNode {
  value: number;
  next: CircularQueueNode | null;

  constructor(value: number) {
    this.value = value;
    this.next = null;
  }
}

class MyCircularQueueLinkedList {
  private head: CircularQueueNode | null;
  private tail: CircularQueueNode | null;
  private size: number;
  private capacity: number;

  constructor(k: number) {
    this.head = null;
    this.tail = null;
    this.size = 0;
    this.capacity = k;
  }

  enQueue(value: number): boolean {
    if (this.isFull()) {
      return false;
    }

    const newNode = new CircularQueueNode(value);

    if (this.isEmpty()) {
      this.head = newNode;
      this.tail = newNode;
      newNode.next = newNode; // Circular reference
    } else {
      this.tail!.next = newNode;
      newNode.next = this.head;
      this.tail = newNode;
    }

    this.size++;
    return true;
  }

  deQueue(): boolean {
    if (this.isEmpty()) {
      return false;
    }

    if (this.size === 1) {
      this.head = null;
      this.tail = null;
    } else {
      this.head = this.head!.next;
      this.tail!.next = this.head;
    }

    this.size--;
    return true;
  }

  Front(): number {
    if (this.isEmpty()) {
      return -1;
    }

    return this.head!.value;
  }

  Rear(): number {
    if (this.isEmpty()) {
      return -1;
    }

    return this.tail!.value;
  }

  isEmpty(): boolean {
    return this.size === 0;
  }

  isFull(): boolean {
    return this.size === this.capacity;
  }

  getSize(): number {
    return this.size;
  }
}

/**
 * Implementation with Statistics and Monitoring
 *
 * Triển khai với thống kê và giám sát
 */
class MyCircularQueueWithStats extends MyCircularQueue {
  private enqueueCount: number;
  private dequeueCount: number;
  private overflowCount: number;
  private underflowCount: number;
  private operationHistory: Array<{
    operation: string;
    value?: number;
    timestamp: number;
    success: boolean;
  }>;

  constructor(k: number) {
    super(k);
    this.enqueueCount = 0;
    this.dequeueCount = 0;
    this.overflowCount = 0;
    this.underflowCount = 0;
    this.operationHistory = [];
  }

  enQueue(value: number): boolean {
    const success = super.enQueue(value);

    this.enqueueCount++;
    if (!success) {
      this.overflowCount++;
    }

    this.operationHistory.push({
      operation: "enQueue",
      value,
      timestamp: Date.now(),
      success,
    });

    return success;
  }

  deQueue(): boolean {
    const success = super.deQueue();

    this.dequeueCount++;
    if (!success) {
      this.underflowCount++;
    }

    this.operationHistory.push({
      operation: "deQueue",
      timestamp: Date.now(),
      success,
    });

    return success;
  }

  /**
   * Get queue statistics
   * Lấy thống kê queue
   */
  getStats(): {
    enqueueCount: number;
    dequeueCount: number;
    overflowCount: number;
    underflowCount: number;
    successRate: number;
    currentUtilization: number;
  } {
    const totalOperations = this.enqueueCount + this.dequeueCount;
    const successfulOperations =
      this.enqueueCount -
      this.overflowCount +
      this.dequeueCount -
      this.underflowCount;
    const successRate =
      totalOperations > 0 ? (successfulOperations / totalOperations) * 100 : 0;
    const utilization = (this.getSize() / this.getCapacity()) * 100;

    return {
      enqueueCount: this.enqueueCount,
      dequeueCount: this.dequeueCount,
      overflowCount: this.overflowCount,
      underflowCount: this.underflowCount,
      successRate,
      currentUtilization: utilization,
    };
  }

  /**
   * Get recent operation history
   * Lấy lịch sử thao tác gần đây
   */
  getRecentHistory(
    count: number = 10
  ): Array<{
    operation: string;
    value?: number;
    timestamp: number;
    success: boolean;
  }> {
    return this.operationHistory.slice(-count);
  }

  /**
   * Clear operation history
   * Xóa lịch sử thao tác
   */
  clearHistory(): void {
    this.operationHistory = [];
  }
}

/**
 * Implementation with Priority Queue Features
 *
 * Triển khai với tính năng Priority Queue
 */
class MyCircularQueueWithPriority extends MyCircularQueue {
  private priorities: number[];

  constructor(k: number) {
    super(k);
    this.priorities = new Array(k);
  }

  /**
   * Enqueue with priority
   * Enqueue với độ ưu tiên
   */
  enQueueWithPriority(value: number, priority: number): boolean {
    if (this.isFull()) {
      return false;
    }

    // Find position to insert based on priority
    let insertIndex = this.front;
    for (let i = 0; i < this.getSize(); i++) {
      const currentIndex = (this.front + i) % this.getCapacity();
      if (priority > this.priorities[currentIndex]) {
        insertIndex = currentIndex;
        break;
      }
    }

    // Shift elements to make space
    for (let i = this.getSize(); i > 0; i--) {
      const currentIndex = (this.front + i - 1) % this.getCapacity();
      const nextIndex = (this.front + i) % this.getCapacity();
      this.queue[nextIndex] = this.queue[currentIndex];
      this.priorities[nextIndex] = this.priorities[currentIndex];
    }

    // Insert at the correct position
    this.queue[insertIndex] = value;
    this.priorities[insertIndex] = priority;

    return true;
  }

  /**
   * Get element with highest priority
   * Lấy phần tử có độ ưu tiên cao nhất
   */
  getHighestPriority(): number {
    if (this.isEmpty()) {
      return -1;
    }

    let maxPriority = -1;
    let maxPriorityIndex = this.front;

    for (let i = 0; i < this.getSize(); i++) {
      const currentIndex = (this.front + i) % this.getCapacity();
      if (this.priorities[currentIndex] > maxPriority) {
        maxPriority = this.priorities[currentIndex];
        maxPriorityIndex = currentIndex;
      }
    }

    return this.queue[maxPriorityIndex];
  }
}

/**
 * Performance Comparison Function
 *
 * Hàm so sánh hiệu suất các phương pháp
 */
function compareCircularQueueImplementations(
  operations: Array<{
    type: "enQueue" | "deQueue" | "Front" | "Rear";
    value?: number;
  }>
): void {
  console.log(
    "Circular Queue Implementation Performance Comparison / So sánh hiệu suất triển khai Circular Queue"
  );
  console.log("=".repeat(90));

  const implementations = [
    { name: "Array with Pointers", queue: new MyCircularQueue(100) },
    { name: "Array Size Only", queue: new MyCircularQueueSizeOnly(100) },
    { name: "Linked List", queue: new MyCircularQueueLinkedList(100) },
  ];

  for (const impl of implementations) {
    console.log(`\nTesting ${impl.name}:`);

    const start = performance.now();

    for (const op of operations) {
      switch (op.type) {
        case "enQueue":
          impl.queue.enQueue(op.value!);
          break;
        case "deQueue":
          impl.queue.deQueue();
          break;
        case "Front":
          impl.queue.Front();
          break;
        case "Rear":
          impl.queue.Rear();
          break;
      }
    }

    const end = performance.now();
    console.log(`  Time: ${(end - start).toFixed(4)}ms`);
    console.log(`  Final size: ${impl.queue.getSize()}`);
  }
}

/**
 * Test Cases
 *
 * Các trường hợp kiểm thử
 */
function runTests(): void {
  console.log("Circular Queue Tests / Kiểm thử Circular Queue");
  console.log("=".repeat(50));

  // Test 1: Basic operations
  console.log("\nTest 1: Basic operations / Các thao tác cơ bản");
  const queue1 = new MyCircularQueue(3);
  console.log(`enQueue(1): ${queue1.enQueue(1)}`); // Expected: true
  console.log(`enQueue(2): ${queue1.enQueue(2)}`); // Expected: true
  console.log(`enQueue(3): ${queue1.enQueue(3)}`); // Expected: true
  console.log(`enQueue(4): ${queue1.enQueue(4)}`); // Expected: false
  console.log(`Rear(): ${queue1.Rear()}`); // Expected: 3
  console.log(`isFull(): ${queue1.isFull()}`); // Expected: true
  console.log(`deQueue(): ${queue1.deQueue()}`); // Expected: true
  console.log(`enQueue(4): ${queue1.enQueue(4)}`); // Expected: true
  console.log(`Rear(): ${queue1.Rear()}`); // Expected: 4

  // Test 2: Statistics tracking
  console.log("\nTest 2: Statistics tracking / Theo dõi thống kê");
  const statQueue = new MyCircularQueueWithStats(5);

  for (let i = 1; i <= 7; i++) {
    statQueue.enQueue(i);
  }

  for (let i = 0; i < 3; i++) {
    statQueue.deQueue();
  }

  const stats = statQueue.getStats();
  console.log(`Enqueue count: ${stats.enqueueCount}`);
  console.log(`Dequeue count: ${stats.dequeueCount}`);
  console.log(`Overflow count: ${stats.overflowCount}`);
  console.log(`Success rate: ${stats.successRate.toFixed(2)}%`);
  console.log(`Utilization: ${stats.currentUtilization.toFixed(2)}%`);

  // Test 3: State inspection
  console.log("\nTest 3: State inspection / Kiểm tra trạng thái");
  const stateQueue = new MyCircularQueue(4);
  stateQueue.enQueue(1);
  stateQueue.enQueue(2);

  console.log("Current state:");
  console.log(stateQueue.getState());

  stateQueue.deQueue();

  console.log("After dequeue:");
  console.log(stateQueue.getState());

  // Test 4: Performance comparison
  console.log("\nTest 4: Performance comparison / So sánh hiệu suất");
  const testOperations = [
    { type: "enQueue" as const, value: 1 },
    { type: "enQueue" as const, value: 2 },
    { type: "enQueue" as const, value: 3 },
    { type: "Front" as const },
    { type: "Rear" as const },
    { type: "deQueue" as const },
    { type: "enQueue" as const, value: 4 },
    { type: "Front" as const },
    { type: "Rear" as const },
  ];

  compareCircularQueueImplementations(testOperations);
}

// Uncomment to run tests
// runTests();

export {
  MyCircularQueue,
  MyCircularQueueSizeOnly,
  MyCircularQueueLinkedList,
  MyCircularQueueWithStats,
  MyCircularQueueWithPriority,
  CircularQueueNode,
  compareCircularQueueImplementations,
  runTests,
};
{% endraw %}
6:["topic","others-problems-07-design-circular-queue","d"]
0:["fjDGwqtt1UnBZeA2uH4xO",[[["",{"children":["learn",{"children":[["topic","others-problems-07-design-circular-queue","d"],{"children":["__PAGE__?{\"topic\":\"others-problems-07-design-circular-queue\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["learn",{"children":[["topic","others-problems-07-design-circular-queue","d"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"max-w-6xl mx-auto px-8 py-24","children":[["$","div",null,{"className":"flex items-center gap-4 mb-8","children":["$","$L2",null,{"href":"/learn","children":["$","button",null,{"className":"flex items-center gap-2 bg-gray-100 border border-gray-300 text-gray-700 px-4 py-3 rounded-md font-medium hover:bg-gray-200 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left ","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Learn"]}]}]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8 mb-8","children":[["$","div",null,{"className":"flex items-center justify-between mb-4","children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900","children":"Design Circular Queue"}],["$","div",null,{"className":"flex gap-4","children":[["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-star ","children":[["$","polygon","8f66p6",{"points":"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"}],"$undefined"]}],"Bookmark"]}],["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-share2 ","children":[["$","circle","gq8acd",{"cx":"18","cy":"5","r":"3"}],["$","circle","w7nqdw",{"cx":"6","cy":"12","r":"3"}],["$","circle","1xt0gg",{"cx":"18","cy":"19","r":"3"}],["$","line","47mynk",{"x1":"8.59","x2":"15.42","y1":"13.51","y2":"17.49"}],["$","line","1n3mei",{"x1":"15.41","x2":"8.59","y1":"6.51","y2":"10.49"}],"$undefined"]}],"Share"]}]]}]]}],["$","div",null,{"className":"flex gap-8 mb-4","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock ","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],"2-3 hours"]}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold text-white bg-red-500","children":"Easy"}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700","children":"Others"}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","0",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Others"}]]}],["$","p",null,{"className":"text-lg text-gray-700 leading-relaxed","children":" *  * Design your implementation of the circular queue. The circular queue is a linear  * data structure in which the operations are performed based on FIFO (First In First Out)  * principle and the l..."}]]}],["$","div",null,{"className":"grid grid-cols-1 lg:grid-cols-3 gap-8","children":[["$","div",null,{"className":"lg:col-span-2","children":["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8","children":["$","$L3",null,{"content":"$4"}]}]}],["$","div",null,{"className":"space-y-6","children":[["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Your Progress"}],["$","div",null,{"className":"w-full bg-gray-200 rounded-full h-2 mb-2","children":["$","div",null,{"className":"bg-blue-600 h-2 rounded-full","style":{"width":"25%"}}]}],["$","p",null,{"className":"text-sm text-gray-600","children":"25% Complete"}]]}],false]}]]}]]}],null],null],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L8",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
