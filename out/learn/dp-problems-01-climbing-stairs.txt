2:I[2972,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],""]
3:I[5907,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],"default"]
5:I[4707,[],""]
7:I[6423,[],""]
8:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
4:T2221,
# Climbing Stair

**LeetCode Problem # * 70. Climbing Stairs**

## Problem Description

 * You are climbing a staircase. It takes n steps to reach the top.  * Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?  *  * Input: n = 2  * Output: 2 

## Solutions

{% raw %}
/**
 * 70. Climbing Stairs
 *
 * Problem:
 * You are climbing a staircase. It takes n steps to reach the top.
 * Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
 *
 * Example:
 * Input: n = 2
 * Output: 2
 * Explanation: There are two ways to climb to the top.
 * 1. 1 step + 1 step
 * 2. 2 steps
 *
 * Input: n = 3
 * Output: 3
 * Explanation: There are three ways to climb to the top.
 * 1. 1 step + 1 step + 1 step
 * 2. 1 step + 2 steps
 * 3. 2 steps + 1 step
 *
 * LeetCode: https://leetcode.com/problems/climbing-stairs/
 */

/**
 * Solution 1: Dynamic Programming (Optimal)
 *
 * Approach:
 * - Use DP array to store number of ways for each step
 * - dp[i] = dp[i-1] + dp[i-2] (Fibonacci sequence)
 * - Base cases: dp[0] = 1, dp[1] = 1
 *
 * Time Complexity: O(n)
 * Space Complexity: O(n)
 */
function climbStairs(n: number): number {
  if (n <= 1) return 1;

  const dp = new Array(n + 1).fill(0);
  dp[0] = 1; // Base case: 1 way to stay at ground
  dp[1] = 1; // Base case: 1 way to reach step 1

  for (let i = 2; i <= n; i++) {
    dp[i] = dp[i - 1] + dp[i - 2];
  }

  return dp[n];
}

/**
 * Solution 2: Space Optimized DP
 *
 * Approach:
 * - Same logic as Solution 1 but only keep track of last two values
 * - Reduces space complexity to O(1)
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function climbStairsOptimized(n: number): number {
  if (n <= 1) return 1;

  let prev = 1; // dp[0]
  let curr = 1; // dp[1]

  for (let i = 2; i <= n; i++) {
    const next = prev + curr;
    prev = curr;
    curr = next;
  }

  return curr;
}

/**
 * Solution 3: Recursive with Memoization
 *
 * Approach:
 * - Use recursion with memoization to avoid recalculating
 * - Top-down approach
 *
 * Time Complexity: O(n)
 * Space Complexity: O(n) - recursion stack + memo
 */
function climbStairsMemo(n: number): number {
  const memo = new Map<number, number>();

  function climbHelper(steps: number): number {
    if (steps <= 1) return 1;

    if (memo.has(steps)) {
      return memo.get(steps)!;
    }

    const result = climbHelper(steps - 1) + climbHelper(steps - 2);
    memo.set(steps, result);

    return result;
  }

  return climbHelper(n);
}

/**
 * Solution 4: Matrix Exponentiation (Advanced)
 *
 * Approach:
 * - Use matrix exponentiation for O(log n) time complexity
 * - Based on Fibonacci matrix formula
 *
 * Time Complexity: O(log n)
 * Space Complexity: O(1)
 */
function climbStairsMatrix(n: number): number {
  if (n <= 1) return 1;

  // Matrix multiplication helper
  function multiply(a: number[][], b: number[][]): number[][] {
    return [
      [
        a[0][0] * b[0][0] + a[0][1] * b[1][0],
        a[0][0] * b[0][1] + a[0][1] * b[1][1],
      ],
      [
        a[1][0] * b[0][0] + a[1][1] * b[1][0],
        a[1][0] * b[0][1] + a[1][1] * b[1][1],
      ],
    ];
  }

  // Matrix power helper
  function matrixPower(matrix: number[][], power: number): number[][] {
    if (power === 0)
      return [
        [1, 0],
        [0, 1],
      ];
    if (power === 1) return matrix;

    const half = matrixPower(matrix, Math.floor(power / 2));
    const squared = multiply(half, half);

    if (power % 2 === 0) {
      return squared;
    } else {
      return multiply(squared, matrix);
    }
  }

  const baseMatrix = [
    [1, 1],
    [1, 0],
  ];
  const resultMatrix = matrixPower(baseMatrix, n);

  return resultMatrix[0][0];
}

/**
 * Solution 5: Brute Force Recursion (For comparison)
 *
 * Approach:
 * - Simple recursion without memoization
 * - Shows the naive approach
 *
 * Time Complexity: O(2^n) - exponential
 * Space Complexity: O(n) - recursion stack
 */
function climbStairsBruteForce(n: number): number {
  if (n <= 1) return 1;

  return climbStairsBruteForce(n - 1) + climbStairsBruteForce(n - 2);
}

/**
 * Solution 6: Using Binet's Formula (Mathematical)
 *
 * Approach:
 * - Use closed-form formula for Fibonacci numbers
 * - Golden ratio approach
 *
 * Time Complexity: O(1)
 * Space Complexity: O(1)
 */
function climbStairsBinet(n: number): number {
  const phi = (1 + Math.sqrt(5)) / 2; // Golden ratio
  const psi = (1 - Math.sqrt(5)) / 2;

  return Math.round(
    (Math.pow(phi, n + 1) - Math.pow(psi, n + 1)) / Math.sqrt(5)
  );
}

// Test cases
function testClimbStairs() {
  console.log("=== Testing Climbing Stairs ===\n");

  const testCases = [
    {
      input: 1,
      expected: 1,
      description: "Single step",
    },
    {
      input: 2,
      expected: 2,
      description: "Two steps",
    },
    {
      input: 3,
      expected: 3,
      description: "Three steps",
    },
    {
      input: 4,
      expected: 5,
      description: "Four steps",
    },
    {
      input: 5,
      expected: 8,
      description: "Five steps",
    },
    {
      input: 6,
      expected: 13,
      description: "Six steps",
    },
    {
      input: 0,
      expected: 1,
      description: "Zero steps",
    },
  ];

  testCases.forEach((testCase, index) => {
    console.log(`Test Case ${index + 1}: ${testCase.description}`);
    console.log(`Input: n = ${testCase.input}`);
    console.log(`Expected: ${testCase.expected}\n`);

    // Test Solution 1 (DP)
    const result1 = climbStairs(testCase.input);
    console.log(
      `Solution 1 (DP): ${result1} ${
        result1 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 2 (Optimized DP)
    const result2 = climbStairsOptimized(testCase.input);
    console.log(
      `Solution 2 (Optimized DP): ${result2} ${
        result2 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 3 (Memoization)
    const result3 = climbStairsMemo(testCase.input);
    console.log(
      `Solution 3 (Memoization): ${result3} ${
        result3 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 4 (Matrix)
    const result4 = climbStairsMatrix(testCase.input);
    console.log(
      `Solution 4 (Matrix): ${result4} ${
        result4 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 5 (Brute Force) - only for small inputs
    if (testCase.input <= 20) {
      const result5 = climbStairsBruteForce(testCase.input);
      console.log(
        `Solution 5 (Brute Force): ${result5} ${
          result5 === testCase.expected ? "✅" : "❌"
        }`
      );
    } else {
      console.log(`Solution 5 (Brute Force): Skipped (input too large)`);
    }

    // Test Solution 6 (Binet's Formula)
    const result6 = climbStairsBinet(testCase.input);
    console.log(
      `Solution 6 (Binet's Formula): ${result6} ${
        result6 === testCase.expected ? "✅" : "❌"
      }`
    );

    console.log("\n---\n");
  });
}

// Performance comparison
function performanceComparison() {
  console.log("=== Performance Comparison ===\n");

  const testCases = [
    { name: "DP", func: climbStairs },
    { name: "Optimized DP", func: climbStairsOptimized },
    { name: "Memoization", func: climbStairsMemo },
    { name: "Matrix", func: climbStairsMatrix },
    { name: "Binet's Formula", func: climbStairsBinet },
  ];

  const largeN = 1000000;

  testCases.forEach(({ name, func }) => {
    const start = performance.now();
    const result = func(largeN);
    const end = performance.now();

    console.log(`${name}:`);
    console.log(`  Time: ${(end - start).toFixed(2)}ms`);
    console.log(`  Result: ${result}`);
    console.log(
      `  Memory: ${
        name === "Optimized DP" ||
        name === "Matrix" ||
        name === "Binet's Formula"
          ? "O(1)"
          : "O(n)"
      }\n`
    );
  });
}

// Fibonacci sequence visualization
function fibonacciSequence() {
  console.log("=== Fibonacci Sequence (Climbing Stairs) ===\n");

  console.log("n | Ways to climb | Fibonacci number");
  console.log("--|---------------|------------------");

  for (let i = 0; i <= 10; i++) {
    const ways = climbStairsOptimized(i);
    console.log(`${i} | ${ways.toString().padStart(11)} | F(${i + 1})`);
  }

  console.log("\nNote: Ways to climb n steps = Fibonacci number F(n+1)");
}

// Uncomment the following lines to run tests
// testClimbStairs();
// performanceComparison();
// fibonacciSequence();

export {
  climbStairs,
  climbStairsOptimized,
  climbStairsMemo,
  climbStairsMatrix,
  climbStairsBruteForce,
  climbStairsBinet,
  testClimbStairs,
  performanceComparison,
  fibonacciSequence,
};
{% endraw %}
6:["topic","dp-problems-01-climbing-stairs","d"]
0:["2NmUhWiPdVVBzVtDZlggk",[[["",{"children":["learn",{"children":[["topic","dp-problems-01-climbing-stairs","d"],{"children":["__PAGE__?{\"topic\":\"dp-problems-01-climbing-stairs\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["learn",{"children":[["topic","dp-problems-01-climbing-stairs","d"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"max-w-6xl mx-auto px-8 py-24","children":[["$","div",null,{"className":"flex items-center gap-4 mb-8","children":["$","$L2",null,{"href":"/learn","children":["$","button",null,{"className":"flex items-center gap-2 bg-gray-100 border border-gray-300 text-gray-700 px-4 py-3 rounded-md font-medium hover:bg-gray-200 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left ","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Learn"]}]}]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8 mb-8","children":[["$","div",null,{"className":"flex items-center justify-between mb-4","children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900","children":"Climbing Stair"}],["$","div",null,{"className":"flex gap-4","children":[["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-star ","children":[["$","polygon","8f66p6",{"points":"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"}],"$undefined"]}],"Bookmark"]}],["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-share2 ","children":[["$","circle","gq8acd",{"cx":"18","cy":"5","r":"3"}],["$","circle","w7nqdw",{"cx":"6","cy":"12","r":"3"}],["$","circle","1xt0gg",{"cx":"18","cy":"19","r":"3"}],["$","line","47mynk",{"x1":"8.59","x2":"15.42","y1":"13.51","y2":"17.49"}],["$","line","1n3mei",{"x1":"15.41","x2":"8.59","y1":"6.51","y2":"10.49"}],"$undefined"]}],"Share"]}]]}]]}],["$","div",null,{"className":"flex gap-8 mb-4","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock ","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],"2-3 hours"]}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold text-white bg-red-500","children":"Easy"}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700","children":"Dynamic Programming"}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","0",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Dynamic Programming"}],["$","span","1",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Hash Table"}]]}],["$","p",null,{"className":"text-lg text-gray-700 leading-relaxed","children":"**LeetCode Problem # * 70. Climbing Stairs**..."}]]}],["$","div",null,{"className":"grid grid-cols-1 lg:grid-cols-3 gap-8","children":[["$","div",null,{"className":"lg:col-span-2","children":["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8","children":["$","$L3",null,{"content":"$4"}]}]}],["$","div",null,{"className":"space-y-6","children":[["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Your Progress"}],["$","div",null,{"className":"w-full bg-gray-200 rounded-full h-2 mb-2","children":["$","div",null,{"className":"bg-blue-600 h-2 rounded-full","style":{"width":"25%"}}]}],["$","p",null,{"className":"text-sm text-gray-600","children":"25% Complete"}]]}],false]}]]}]]}],null],null],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L8",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
