2:I[2972,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],""]
3:I[5907,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],"default"]
5:I[4707,[],""]
7:I[6423,[],""]
8:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
4:T2e4e,
# Search in Rotated Sorted Array

**LeetCode Problem # * 33. Search in Rotated Sorted Array**

## Problem Description

LeetCode problem solution with multiple approaches and explanations.

## Solutions

{% raw %}
/**
 * 33. Search in Rotated Sorted Array
 * 
 * There is an integer array nums sorted in ascending order (with distinct values).
 * Prior to being passed to your function, nums is possibly rotated at some pivot index k 
 * (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). 
 * For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
 * 
 * Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
 * You must write an algorithm with O(log n) runtime complexity.
 * 
 * Example 1:
 * Input: nums = [4,5,6,7,0,1,2], target = 0
 * Output: 4
 * 
 * Example 2:
 * Input: nums = [4,5,6,7,0,1,2], target = 3
 * Output: -1
 * 
 * Example 3:
 * Input: nums = [1], target = 0
 * Output: -1
 * 
 * Constraints:
 * - 1 <= nums.length <= 5000
 * - -10^4 <= nums[i] <= 10^4
 * - All values of nums are unique.
 * - nums is an ascending array that is possibly rotated.
 * - -10^4 <= target <= 10^4
 */

// Solution 1: Single Binary Search
// Time: O(log n), Space: O(1)
export function search1(nums: number[], target: number): number {
    let left = 0;
    let right = nums.length - 1;
    
    while (left <= right) {
        const mid = Math.floor((left + right) / 2);
        
        if (nums[mid] === target) {
            return mid;
        }
        
        // Determine which half is sorted
        if (nums[left] <= nums[mid]) {
            // Left half is sorted
            if (nums[left] <= target && target < nums[mid]) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        } else {
            // Right half is sorted
            if (nums[mid] < target && target <= nums[right]) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
    }
    
    return -1;
}

// Solution 2: Find Pivot + Binary Search
// Time: O(log n), Space: O(1)
export function search2(nums: number[], target: number): number {
    const n = nums.length;
    
    // Find the pivot point (minimum element index)
    function findPivot(): number {
        let left = 0;
        let right = n - 1;
        
        while (left < right) {
            const mid = Math.floor((left + right) / 2);
            
            if (nums[mid] > nums[right]) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        
        return left;
    }
    
    // Standard binary search
    function binarySearch(left: number, right: number): number {
        while (left <= right) {
            const mid = Math.floor((left + right) / 2);
            
            if (nums[mid] === target) {
                return mid;
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
        return -1;
    }
    
    const pivot = findPivot();
    
    // Search in the appropriate half
    if (target >= nums[pivot] && target <= nums[n - 1]) {
        return binarySearch(pivot, n - 1);
    } else {
        return binarySearch(0, pivot - 1);
    }
}

// Solution 3: Modified Binary Search with Detailed Logic
// Time: O(log n), Space: O(1)
export function search3(nums: number[], target: number): number {
    let left = 0;
    let right = nums.length - 1;
    
    while (left <= right) {
        const mid = Math.floor((left + right) / 2);
        
        if (nums[mid] === target) {
            return mid;
        }
        
        // Check if left half is sorted
        if (nums[left] < nums[mid]) {
            // Left half is definitely sorted
            if (nums[left] <= target && target < nums[mid]) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        } else if (nums[left] > nums[mid]) {
            // Right half is definitely sorted
            if (nums[mid] < target && target <= nums[right]) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        } else {
            // nums[left] == nums[mid], move left pointer
            // This handles edge case where left == mid
            left++;
        }
    }
    
    return -1;
}

// Solution 4: Recursive Binary Search
// Time: O(log n), Space: O(log n)
export function search4(nums: number[], target: number): number {
    function searchHelper(left: number, right: number): number {
        if (left > right) return -1;
        
        const mid = Math.floor((left + right) / 2);
        
        if (nums[mid] === target) {
            return mid;
        }
        
        // Left half is sorted
        if (nums[left] <= nums[mid]) {
            if (nums[left] <= target && target < nums[mid]) {
                return searchHelper(left, mid - 1);
            } else {
                return searchHelper(mid + 1, right);
            }
        } else {
            // Right half is sorted
            if (nums[mid] < target && target <= nums[right]) {
                return searchHelper(mid + 1, right);
            } else {
                return searchHelper(left, mid - 1);
            }
        }
    }
    
    return searchHelper(0, nums.length - 1);
}

// Solution 5: Linear Scan (for comparison)
// Time: O(n), Space: O(1)
export function search5(nums: number[], target: number): number {
    for (let i = 0; i < nums.length; i++) {
        if (nums[i] === target) {
            return i;
        }
    }
    return -1;
}

// Solution 6: Binary Search with Rotation Offset
// Time: O(log n), Space: O(1)
export function search6(nums: number[], target: number): number {
    const n = nums.length;
    let left = 0;
    let right = n - 1;
    
    // Find rotation offset
    while (left < right) {
        const mid = Math.floor((left + right) / 2);
        if (nums[mid] > nums[right]) {
            left = mid + 1;
        } else {
            right = mid;
        }
    }
    
    const offset = left;
    left = 0;
    right = n - 1;
    
    // Binary search with offset
    while (left <= right) {
        const mid = Math.floor((left + right) / 2);
        const realMid = (mid + offset) % n;
        
        if (nums[realMid] === target) {
            return realMid;
        } else if (nums[realMid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    
    return -1;
}

// Test cases
export function testSearch() {
    console.log("Testing Search in Rotated Sorted Array:");
    
    const testCases = [
        {
            nums: [4, 5, 6, 7, 0, 1, 2],
            target: 0,
            expected: 4
        },
        {
            nums: [4, 5, 6, 7, 0, 1, 2],
            target: 3,
            expected: -1
        },
        {
            nums: [1],
            target: 0,
            expected: -1
        },
        {
            nums: [1],
            target: 1,
            expected: 0
        },
        {
            nums: [1, 3],
            target: 3,
            expected: 1
        },
        {
            nums: [3, 1],
            target: 1,
            expected: 1
        },
        {
            nums: [5, 1, 3],
            target: 3,
            expected: 2
        },
        {
            nums: [4, 5, 6, 7, 8, 1, 2, 3],
            target: 8,
            expected: 4
        },
        {
            nums: [1, 2, 3, 4, 5],
            target: 3,
            expected: 2
        }
    ];
    
    const solutions = [
        { name: "Single Binary Search", fn: search1 },
        { name: "Find Pivot + Binary Search", fn: search2 },
        { name: "Modified Binary Search", fn: search3 },
        { name: "Recursive Binary Search", fn: search4 },
        { name: "Linear Scan", fn: search5 },
        { name: "Rotation Offset", fn: search6 }
    ];
    
    solutions.forEach(solution => {
        console.log(`\n${solution.name}:`);
        testCases.forEach((test, i) => {
            const result = solution.fn([...test.nums], test.target);
            const passed = result === test.expected;
            console.log(`  Test ${i + 1}: ${passed ? 'PASS' : 'FAIL'}`);
            if (!passed) {
                console.log(`    Input: nums=${JSON.stringify(test.nums)}, target=${test.target}`);
                console.log(`    Expected: ${test.expected}`);
                console.log(`    Got: ${result}`);
            }
        });
    });
}

/**
 * Key Insights:
 * 
 * 1. **Rotated Array Properties**:
 *    - Originally sorted, then rotated at some pivot
 *    - At most one "break point" where order changes
 *    - At least one half is always properly sorted
 * 
 * 2. **Binary Search Adaptation**:
 *    - Determine which half is sorted
 *    - Check if target lies in sorted half
 *    - Search appropriate half based on target location
 * 
 * 3. **Key Decision Logic**:
 *    - If nums[left] <= nums[mid]: left half is sorted
 *    - If nums[mid] <= nums[right]: right half is sorted
 *    - Use target range to decide which half to search
 * 
 * 4. **Time Complexity**: O(log n)
 *    - Each iteration eliminates half the search space
 *    - Same as standard binary search
 *    - Maintains logarithmic efficiency
 * 
 * 5. **Space Complexity**: O(1)
 *    - Iterative approach uses constant space
 *    - Recursive approach uses O(log n) stack space
 * 
 * 6. **Edge Cases Handling**:
 *    - Single element array
 *    - No rotation (already sorted)
 *    - Target at rotation point
 *    - Target not in array
 * 
 * 7. **Alternative Approaches**:
 *    - Find pivot first, then binary search
 *    - Use rotation offset for virtual indexing
 *    - Linear scan (O(n) but simpler)
 * 
 * 8. **Interview Strategy**:
 *    - Start with understanding rotation properties
 *    - Adapt standard binary search logic
 *    - Handle edge cases carefully
 *    - Test with various rotation scenarios
 * 
 * 9. **Common Mistakes**:
 *    - Incorrect condition for determining sorted half
 *    - Wrong target range checking
 *    - Not handling equal elements properly
 *    - Off-by-one errors in boundaries
 * 
 * 10. **Comparison Logic**:
 *     - nums[left] <= nums[mid]: left sorted (including equal case)
 *     - Use strict inequalities for target range
 *     - Handle boundary conditions carefully
 * 
 * 11. **Optimization Techniques**:
 *     - Early termination when target found
 *     - Minimize comparisons in each iteration
 *     - Handle special cases upfront
 * 
 * 12. **Big Tech Variations**:
 *     - Google: Search with duplicates allowed
 *     - Meta: Find minimum in rotated array
 *     - Amazon: Search in 2D rotated matrix
 *     - Microsoft: Multiple rotation points
 * 
 * 13. **Follow-up Questions**:
 *     - Handle duplicate elements
 *     - Find all occurrences of target
 *     - Search in rotated sorted array II
 *     - Find rotation point index
 * 
 * 14. **Real-world Applications**:
 *     - Circular buffer searches
 *     - Time-based data analysis
 *     - Log file searching
 *     - Cyclic data structures
 *     - Cache management systems
 * 
 * 15. **Pattern Recognition**:
 *     - Modified binary search pattern
 *     - Divide and conquer approach
 *     - Conditional search space reduction
 *     - Sorted array with single discontinuity
 * 
 * 16. **Testing Strategy**:
 *     - Test with different rotation points
 *     - Verify with no rotation case
 *     - Check boundary elements
 *     - Validate with target not found
 */
{% endraw %}
6:["topic","sorting-searching-problems-03-search-in-rotated-sorted-array","d"]
0:["7uJ7BVaXJTiEOD9iYDv3n",[[["",{"children":["learn",{"children":[["topic","sorting-searching-problems-03-search-in-rotated-sorted-array","d"],{"children":["__PAGE__?{\"topic\":\"sorting-searching-problems-03-search-in-rotated-sorted-array\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["learn",{"children":[["topic","sorting-searching-problems-03-search-in-rotated-sorted-array","d"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"max-w-6xl mx-auto px-8 py-24","children":[["$","div",null,{"className":"flex items-center gap-4 mb-8","children":["$","$L2",null,{"href":"/learn","children":["$","button",null,{"className":"flex items-center gap-2 bg-gray-100 border border-gray-300 text-gray-700 px-4 py-3 rounded-md font-medium hover:bg-gray-200 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left ","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Learn"]}]}]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8 mb-8","children":[["$","div",null,{"className":"flex items-center justify-between mb-4","children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900","children":"Search in Rotated Sorted Array"}],["$","div",null,{"className":"flex gap-4","children":[["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-star ","children":[["$","polygon","8f66p6",{"points":"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"}],"$undefined"]}],"Bookmark"]}],["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-share2 ","children":[["$","circle","gq8acd",{"cx":"18","cy":"5","r":"3"}],["$","circle","w7nqdw",{"cx":"6","cy":"12","r":"3"}],["$","circle","1xt0gg",{"cx":"18","cy":"19","r":"3"}],["$","line","47mynk",{"x1":"8.59","x2":"15.42","y1":"13.51","y2":"17.49"}],["$","line","1n3mei",{"x1":"15.41","x2":"8.59","y1":"6.51","y2":"10.49"}],"$undefined"]}],"Share"]}]]}]]}],["$","div",null,{"className":"flex gap-8 mb-4","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock ","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],"2-3 hours"]}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold text-white bg-red-500","children":"Easy"}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700","children":"Sorting/Searching"}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","0",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Sorting/Searching"}],["$","span","1",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Binary Search"}],["$","span","2",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Sorting"}]]}],["$","p",null,{"className":"text-lg text-gray-700 leading-relaxed","children":"**LeetCode Problem # * 33. Search in Rotated Sorted Array**..."}]]}],["$","div",null,{"className":"grid grid-cols-1 lg:grid-cols-3 gap-8","children":[["$","div",null,{"className":"lg:col-span-2","children":["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8","children":["$","$L3",null,{"content":"$4"}]}]}],["$","div",null,{"className":"space-y-6","children":[["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Your Progress"}],["$","div",null,{"className":"w-full bg-gray-200 rounded-full h-2 mb-2","children":["$","div",null,{"className":"bg-blue-600 h-2 rounded-full","style":{"width":"25%"}}]}],["$","p",null,{"className":"text-sm text-gray-600","children":"25% Complete"}]]}],false]}]]}]]}],null],null],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L8",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
