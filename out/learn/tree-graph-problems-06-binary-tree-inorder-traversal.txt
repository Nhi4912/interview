2:I[2972,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],""]
3:I[5907,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],"default"]
5:I[4707,[],""]
7:I[6423,[],""]
8:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
4:T3bbc,
# Binary Tree Inorder Traversal

**LeetCode Problem # * 94. Binary Tree Inorder Traversal**

## Problem Description

 * Given the root of a binary tree, return the inorder traversal of its nodes' values.  *  * Input: root = [1,null,2,3]  * Output: [1,3,2]  * 

## Solutions

{% raw %}
/**
 * 94. Binary Tree Inorder Traversal
 *
 * Problem:
 * Given the root of a binary tree, return the inorder traversal of its nodes' values.
 *
 * Example:
 * Input: root = [1,null,2,3]
 * Output: [1,3,2]
 *
 * Input: root = []
 * Output: []
 *
 * Input: root = [1]
 * Output: [1]
 *
 * LeetCode: https://leetcode.com/problems/binary-tree-inorder-traversal/
 */

// Definition for a binary tree node
class TreeNode {
  val: number;
  left: TreeNode | null;
  right: TreeNode | null;
  constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {
    this.val = val === undefined ? 0 : val;
    this.left = left === undefined ? null : left;
    this.right = right === undefined ? null : right;
  }
}

/**
 * Solution 1: Recursive DFS (Optimal)
 *
 * Approach:
 * - Visit left subtree, then root, then right subtree
 * - Natural recursive implementation
 *
 * Time Complexity: O(n)
 * Space Complexity: O(h) - height of tree
 */
function inorderTraversal(root: TreeNode | null): number[] {
  const result: number[] = [];

  function inorder(node: TreeNode | null): void {
    if (!node) return;

    inorder(node.left);
    result.push(node.val);
    inorder(node.right);
  }

  inorder(root);
  return result;
}

/**
 * Solution 2: Iterative with Stack
 *
 * Approach:
 * - Use stack to simulate recursion
 * - Push all left nodes, then process root, then right
 *
 * Time Complexity: O(n)
 * Space Complexity: O(n)
 */
function inorderTraversalIterative(root: TreeNode | null): number[] {
  const result: number[] = [];
  const stack: TreeNode[] = [];
  let current = root;

  while (current || stack.length > 0) {
    // Push all left nodes
    while (current) {
      stack.push(current);
      current = current.left;
    }

    // Process current node
    current = stack.pop()!;
    result.push(current.val);

    // Move to right subtree
    current = current.right;
  }

  return result;
}

/**
 * Solution 3: Using Morris Traversal
 *
 * Approach:
 * - Use threaded binary tree concept
 * - O(1) space complexity
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function inorderTraversalMorris(root: TreeNode | null): number[] {
  const result: number[] = [];
  let current = root;

  while (current) {
    if (!current.left) {
      result.push(current.val);
      current = current.right;
    } else {
      // Find inorder predecessor
      let predecessor = current.left;
      while (predecessor.right && predecessor.right !== current) {
        predecessor = predecessor.right;
      }

      if (!predecessor.right) {
        predecessor.right = current;
        current = current.left;
      } else {
        predecessor.right = null;
        result.push(current.val);
        current = current.right;
      }
    }
  }

  return result;
}

/**
 * Solution 4: Using Class (Object-oriented)
 *
 * Approach:
 * - Create an InorderTraverser class
 * - Encapsulate the traversal logic
 *
 * Time Complexity: O(n)
 * Space Complexity: O(h)
 */
class InorderTraverser {
  private root: TreeNode | null;

  constructor(root: TreeNode | null) {
    this.root = root;
  }

  traverse(): number[] {
    const result: number[] = [];
    this.inorder(this.root, result);
    return result;
  }

  private inorder(node: TreeNode | null, result: number[]): void {
    if (!node) return;

    this.inorder(node.left, result);
    result.push(node.val);
    this.inorder(node.right, result);
  }

  getRoot(): TreeNode | null {
    return this.root;
  }
}

function inorderTraversalClass(root: TreeNode | null): number[] {
  const traverser = new InorderTraverser(root);
  return traverser.traverse();
}

/**
 * Solution 5: Using Generator
 *
 * Approach:
 * - Use generator to yield values
 * - Memory efficient for large trees
 *
 * Time Complexity: O(n)
 * Space Complexity: O(h)
 */
function* inorderTraversalGenerator(root: TreeNode | null): Generator<number> {
  if (!root) return;

  // Yield left subtree
  yield* inorderTraversalGenerator(root.left);

  // Yield current node
  yield root.val;

  // Yield right subtree
  yield* inorderTraversalGenerator(root.right);
}

function inorderTraversalWithGenerator(root: TreeNode | null): number[] {
  return Array.from(inorderTraversalGenerator(root));
}

/**
 * Solution 6: Using Functional Approach
 *
 * Approach:
 * - Use functional programming concepts
 * - More declarative style
 *
 * Time Complexity: O(n)
 * Space Complexity: O(n)
 */
function inorderTraversalFunctional(root: TreeNode | null): number[] {
  if (!root) return [];

  return [
    ...inorderTraversalFunctional(root.left),
    root.val,
    ...inorderTraversalFunctional(root.right),
  ];
}

/**
 * Solution 7: Using Array Methods
 *
 * Approach:
 * - Use array methods like concat
 * - More functional style
 *
 * Time Complexity: O(n)
 * Space Complexity: O(n)
 */
function inorderTraversalArrayMethods(root: TreeNode | null): number[] {
  if (!root) return [];

  const left = inorderTraversalArrayMethods(root.left);
  const right = inorderTraversalArrayMethods(root.right);

  return left.concat([root.val], right);
}

/**
 * Solution 8: Using Two Stacks
 *
 * Approach:
 * - Use two stacks for explicit control
 * - More explicit stack management
 *
 * Time Complexity: O(n)
 * Space Complexity: O(n)
 */
function inorderTraversalTwoStacks(root: TreeNode | null): number[] {
  const result: number[] = [];
  const stack1: TreeNode[] = [];
  const stack2: TreeNode[] = [];

  if (root) stack1.push(root);

  while (stack1.length > 0) {
    const node = stack1.pop()!;
    stack2.push(node);

    if (node.left) stack1.push(node.left);
    if (node.right) stack1.push(node.right);
  }

  while (stack2.length > 0) {
    const node = stack2.pop()!;
    result.unshift(node.val);
  }

  return result;
}

/**
 * Solution 9: Using Queue
 *
 * Approach:
 * - Use queue for level-order traversal first
 * - Then sort to get inorder
 *
 * Time Complexity: O(n log n)
 * Space Complexity: O(n)
 */
function inorderTraversalQueue(root: TreeNode | null): number[] {
  if (!root) return [];

  const queue: TreeNode[] = [root];
  const values: number[] = [];

  while (queue.length > 0) {
    const node = queue.shift()!;
    values.push(node.val);

    if (node.left) queue.push(node.left);
    if (node.right) queue.push(node.right);
  }

  // Sort to simulate inorder (not efficient)
  return values.sort((a, b) => a - b);
}

/**
 * Solution 10: Using Recursion with Helper
 *
 * Approach:
 * - Use helper function with accumulator
 * - More explicit parameter passing
 *
 * Time Complexity: O(n)
 * Space Complexity: O(h)
 */
function inorderTraversalHelper(root: TreeNode | null): number[] {
  function inorder(node: TreeNode | null, acc: number[]): number[] {
    if (!node) return acc;

    inorder(node.left, acc);
    acc.push(node.val);
    inorder(node.right, acc);

    return acc;
  }

  return inorder(root, []);
}

/**
 * Solution 11: Using Iterative with State Machine
 *
 * Approach:
 * - Use state machine to track traversal state
 * - More explicit state management
 *
 * Time Complexity: O(n)
 * Space Complexity: O(n)
 */
function inorderTraversalStateMachine(root: TreeNode | null): number[] {
  const result: number[] = [];
  const stack: { node: TreeNode; state: "left" | "root" | "right" }[] = [];

  if (root) {
    stack.push({ node: root, state: "left" });
  }

  while (stack.length > 0) {
    const current = stack[stack.length - 1];

    switch (current.state) {
      case "left":
        current.state = "root";
        if (current.node.left) {
          stack.push({ node: current.node.left, state: "left" });
        }
        break;

      case "root":
        result.push(current.node.val);
        current.state = "right";
        break;

      case "right":
        stack.pop();
        if (current.node.right) {
          stack.push({ node: current.node.right, state: "left" });
        }
        break;
    }
  }

  return result;
}

// Helper function to create a binary tree from array
function createBinaryTree(values: (number | null)[]): TreeNode | null {
  if (values.length === 0 || values[0] === null) return null;

  const root = new TreeNode(values[0]!);
  const queue: (TreeNode | null)[] = [root];
  let i = 1;

  while (queue.length > 0 && i < values.length) {
    const node = queue.shift()!;

    if (node && i < values.length) {
      if (values[i] !== null) {
        node.left = new TreeNode(values[i]!);
        queue.push(node.left);
      }
      i++;
    }

    if (node && i < values.length) {
      if (values[i] !== null) {
        node.right = new TreeNode(values[i]!);
        queue.push(node.right);
      }
      i++;
    }
  }

  return root;
}

// Test cases
function testInorderTraversal() {
  console.log("=== Testing Binary Tree Inorder Traversal ===\n");

  const testCases = [
    {
      input: [1, null, 2, 3],
      expected: [1, 3, 2],
      description: "Basic case",
    },
    {
      input: [],
      expected: [],
      description: "Empty tree",
    },
    {
      input: [1],
      expected: [1],
      description: "Single node",
    },
    {
      input: [1, 2, 3, 4, 5],
      expected: [4, 2, 5, 1, 3],
      description: "Complete binary tree",
    },
    {
      input: [1, 2, 3, null, null, 4, 5],
      expected: [2, 1, 4, 3, 5],
      description: "Complex tree",
    },
  ];

  testCases.forEach((testCase, index) => {
    console.log(`Test Case ${index + 1}: ${testCase.description}`);
    console.log(`Input: [${testCase.input.join(", ")}]`);
    console.log(`Expected: [${testCase.expected.join(", ")}]\n`);

    const root = createBinaryTree(testCase.input);

    // Test Solution 1 (Recursive)
    const result1 = inorderTraversal(root);
    console.log(
      `Solution 1 (Recursive): [${result1.join(", ")}] ${
        JSON.stringify(result1) === JSON.stringify(testCase.expected)
          ? "✅"
          : "❌"
      }`
    );

    // Test Solution 2 (Iterative)
    const result2 = inorderTraversalIterative(root);
    console.log(
      `Solution 2 (Iterative): [${result2.join(", ")}] ${
        JSON.stringify(result2) === JSON.stringify(testCase.expected)
          ? "✅"
          : "❌"
      }`
    );

    // Test Solution 3 (Morris)
    const result3 = inorderTraversalMorris(root);
    console.log(
      `Solution 3 (Morris): [${result3.join(", ")}] ${
        JSON.stringify(result3) === JSON.stringify(testCase.expected)
          ? "✅"
          : "❌"
      }`
    );

    // Test Solution 4 (Class)
    const result4 = inorderTraversalClass(root);
    console.log(
      `Solution 4 (Class): [${result4.join(", ")}] ${
        JSON.stringify(result4) === JSON.stringify(testCase.expected)
          ? "✅"
          : "❌"
      }`
    );

    // Test Solution 5 (Generator)
    const result5 = inorderTraversalWithGenerator(root);
    console.log(
      `Solution 5 (Generator): [${result5.join(", ")}] ${
        JSON.stringify(result5) === JSON.stringify(testCase.expected)
          ? "✅"
          : "❌"
      }`
    );

    // Test Solution 6 (Functional)
    const result6 = inorderTraversalFunctional(root);
    console.log(
      `Solution 6 (Functional): [${result6.join(", ")}] ${
        JSON.stringify(result6) === JSON.stringify(testCase.expected)
          ? "✅"
          : "❌"
      }`
    );

    // Test Solution 7 (Array Methods)
    const result7 = inorderTraversalArrayMethods(root);
    console.log(
      `Solution 7 (Array Methods): [${result7.join(", ")}] ${
        JSON.stringify(result7) === JSON.stringify(testCase.expected)
          ? "✅"
          : "❌"
      }`
    );

    // Test Solution 8 (Two Stacks)
    const result8 = inorderTraversalTwoStacks(root);
    console.log(
      `Solution 8 (Two Stacks): [${result8.join(", ")}] ${
        JSON.stringify(result8) === JSON.stringify(testCase.expected)
          ? "✅"
          : "❌"
      }`
    );

    // Test Solution 9 (Queue) - Note: This is not efficient for inorder
    const result9 = inorderTraversalQueue(root);
    console.log(
      `Solution 9 (Queue): [${result9.join(", ")}] ${
        JSON.stringify(result9) === JSON.stringify(testCase.expected)
          ? "✅"
          : "❌"
      }`
    );

    // Test Solution 10 (Helper)
    const result10 = inorderTraversalHelper(root);
    console.log(
      `Solution 10 (Helper): [${result10.join(", ")}] ${
        JSON.stringify(result10) === JSON.stringify(testCase.expected)
          ? "✅"
          : "❌"
      }`
    );

    // Test Solution 11 (State Machine)
    const result11 = inorderTraversalStateMachine(root);
    console.log(
      `Solution 11 (State Machine): [${result11.join(", ")}] ${
        JSON.stringify(result11) === JSON.stringify(testCase.expected)
          ? "✅"
          : "❌"
      }`
    );

    console.log("\n---\n");
  });
}

// Performance comparison
function performanceComparison() {
  console.log("=== Performance Comparison ===\n");

  const testCases = [
    { name: "Recursive", func: inorderTraversal },
    { name: "Iterative", func: inorderTraversalIterative },
    { name: "Morris", func: inorderTraversalMorris },
    { name: "Class", func: inorderTraversalClass },
    { name: "Generator", func: inorderTraversalWithGenerator },
    { name: "Functional", func: inorderTraversalFunctional },
    { name: "Array Methods", func: inorderTraversalArrayMethods },
    { name: "Two Stacks", func: inorderTraversalTwoStacks },
    { name: "Queue", func: inorderTraversalQueue },
    { name: "Helper", func: inorderTraversalHelper },
    { name: "State Machine", func: inorderTraversalStateMachine },
  ];

  // Create test cases
  const smallCase = createBinaryTree([1, 2, 3, 4, 5]);
  const mediumCase = createBinaryTree(
    Array.from({ length: 100 }, (_, i) => i + 1)
  );
  const largeCase = createBinaryTree(
    Array.from({ length: 1000 }, (_, i) => i + 1)
  );

  const cases = [
    { name: "Small", case: smallCase },
    { name: "Medium", case: mediumCase },
    { name: "Large", case: largeCase },
  ];

  cases.forEach(({ name, case: testCase }) => {
    console.log(`${name} Case:`);

    testCases.forEach(({ name: funcName, func }) => {
      const start = performance.now();
      const result = func(testCase);
      const end = performance.now();

      console.log(
        `  ${funcName}: ${(end - start).toFixed(2)}ms (length: ${
          result.length
        })`
      );
    });

    console.log("");
  });
}

// Uncomment the following lines to run tests
// testInorderTraversal();
// performanceComparison();

export {
  inorderTraversal,
  inorderTraversalIterative,
  inorderTraversalMorris,
  inorderTraversalClass,
  inorderTraversalWithGenerator,
  inorderTraversalFunctional,
  inorderTraversalArrayMethods,
  inorderTraversalTwoStacks,
  inorderTraversalQueue,
  inorderTraversalHelper,
  inorderTraversalStateMachine,
  InorderTraverser,
  inorderTraversalGenerator,
  TreeNode,
  createBinaryTree,
  testInorderTraversal,
  performanceComparison,
};
{% endraw %}
6:["topic","tree-graph-problems-06-binary-tree-inorder-traversal","d"]
0:["2NmUhWiPdVVBzVtDZlggk",[[["",{"children":["learn",{"children":[["topic","tree-graph-problems-06-binary-tree-inorder-traversal","d"],{"children":["__PAGE__?{\"topic\":\"tree-graph-problems-06-binary-tree-inorder-traversal\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["learn",{"children":[["topic","tree-graph-problems-06-binary-tree-inorder-traversal","d"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"max-w-6xl mx-auto px-8 py-24","children":[["$","div",null,{"className":"flex items-center gap-4 mb-8","children":["$","$L2",null,{"href":"/learn","children":["$","button",null,{"className":"flex items-center gap-2 bg-gray-100 border border-gray-300 text-gray-700 px-4 py-3 rounded-md font-medium hover:bg-gray-200 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left ","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Learn"]}]}]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8 mb-8","children":[["$","div",null,{"className":"flex items-center justify-between mb-4","children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900","children":"Binary Tree Inorder Traversal"}],["$","div",null,{"className":"flex gap-4","children":[["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-star ","children":[["$","polygon","8f66p6",{"points":"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"}],"$undefined"]}],"Bookmark"]}],["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-share2 ","children":[["$","circle","gq8acd",{"cx":"18","cy":"5","r":"3"}],["$","circle","w7nqdw",{"cx":"6","cy":"12","r":"3"}],["$","circle","1xt0gg",{"cx":"18","cy":"19","r":"3"}],["$","line","47mynk",{"x1":"8.59","x2":"15.42","y1":"13.51","y2":"17.49"}],["$","line","1n3mei",{"x1":"15.41","x2":"8.59","y1":"6.51","y2":"10.49"}],"$undefined"]}],"Share"]}]]}]]}],["$","div",null,{"className":"flex gap-8 mb-4","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock ","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],"2-3 hours"]}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold text-white bg-red-500","children":"Easy"}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700","children":"Tree/Graph"}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","0",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Tree/Graph"}],["$","span","1",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Sorting"}]]}],["$","p",null,{"className":"text-lg text-gray-700 leading-relaxed","children":"**LeetCode Problem # * 94. Binary Tree Inorder Traversal**..."}]]}],["$","div",null,{"className":"grid grid-cols-1 lg:grid-cols-3 gap-8","children":[["$","div",null,{"className":"lg:col-span-2","children":["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8","children":["$","$L3",null,{"content":"$4"}]}]}],["$","div",null,{"className":"space-y-6","children":[["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Your Progress"}],["$","div",null,{"className":"w-full bg-gray-200 rounded-full h-2 mb-2","children":["$","div",null,{"className":"bg-blue-600 h-2 rounded-full","style":{"width":"25%"}}]}],["$","p",null,{"className":"text-sm text-gray-600","children":"25% Complete"}]]}],false]}]]}]]}],null],null],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L8",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
