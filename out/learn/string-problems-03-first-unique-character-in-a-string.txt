2:I[2972,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],""]
3:I[5907,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],"default"]
5:I[4707,[],""]
7:I[6423,[],""]
8:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
4:T2e97,
# First Unique Character in a String

**LeetCode Problem # * 387. First Unique Character in a String**

## Problem Description

 * Given a string s, find the first non-repeating character in it and return its index.  * If it does not exist, return -1.  *  * Input: s = "leetcode"  * Output: 0 

## Solutions

{% raw %}
/**
 * 387. First Unique Character in a String
 *
 * Problem:
 * Given a string s, find the first non-repeating character in it and return its index.
 * If it does not exist, return -1.
 *
 * Example:
 * Input: s = "leetcode"
 * Output: 0
 *
 * Input: s = "loveleetcode"
 * Output: 2
 *
 * Input: s = "aabb"
 * Output: -1
 *
 * LeetCode: https://leetcode.com/problems/first-unique-character-in-a-string/
 */

/**
 * Solution 1: Hash Map (Optimal)
 *
 * Approach:
 * - Use hash map to count frequency of each character
 * - Scan string again to find first character with frequency 1
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1) - fixed size alphabet
 */
function firstUniqChar(s: string): number {
  const frequency = new Map<string, number>();

  // Count frequency of each character
  for (const char of s) {
    frequency.set(char, (frequency.get(char) || 0) + 1);
  }

  // Find first character with frequency 1
  for (let i = 0; i < s.length; i++) {
    if (frequency.get(s[i]) === 1) {
      return i;
    }
  }

  return -1;
}

/**
 * Solution 2: Using Array (Fixed size)
 *
 * Approach:
 * - Use array of size 26 for lowercase letters
 * - More efficient for ASCII characters
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function firstUniqCharArray(s: string): number {
  const frequency = new Array(26).fill(0);

  // Count frequency
  for (const char of s) {
    frequency[char.charCodeAt(0) - "a".charCodeAt(0)]++;
  }

  // Find first unique character
  for (let i = 0; i < s.length; i++) {
    if (frequency[s[i].charCodeAt(0) - "a".charCodeAt(0)] === 1) {
      return i;
    }
  }

  return -1;
}

/**
 * Solution 3: Using Object (Hash table)
 *
 * Approach:
 * - Use plain object as hash table
 * - Simple implementation
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function firstUniqCharObject(s: string): number {
  const frequency: { [key: string]: number } = {};

  // Count frequency
  for (const char of s) {
    frequency[char] = (frequency[char] || 0) + 1;
  }

  // Find first unique character
  for (let i = 0; i < s.length; i++) {
    if (frequency[s[i]] === 1) {
      return i;
    }
  }

  return -1;
}

/**
 * Solution 4: Using indexOf and lastIndexOf
 *
 * Approach:
 * - Use built-in methods to check if character appears only once
 * - Simple but less efficient
 *
 * Time Complexity: O(n²)
 * Space Complexity: O(1)
 */
function firstUniqCharIndexOf(s: string): number {
  for (let i = 0; i < s.length; i++) {
    if (s.indexOf(s[i]) === s.lastIndexOf(s[i])) {
      return i;
    }
  }

  return -1;
}

/**
 * Solution 5: Using Set (Two passes)
 *
 * Approach:
 * - Use Set to track seen characters
 * - Use another Set for duplicates
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function firstUniqCharSet(s: string): number {
  const seen = new Set<string>();
  const duplicates = new Set<string>();

  // Find duplicates
  for (const char of s) {
    if (seen.has(char)) {
      duplicates.add(char);
    } else {
      seen.add(char);
    }
  }

  // Find first non-duplicate
  for (let i = 0; i < s.length; i++) {
    if (!duplicates.has(s[i])) {
      return i;
    }
  }

  return -1;
}

/**
 * Solution 6: Using Array Methods (Functional)
 *
 * Approach:
 * - Use functional programming approach
 * - More declarative style
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function firstUniqCharFunctional(s: string): number {
  const frequency = s
    .split("")
    .reduce((acc: { [key: string]: number }, char: string) => {
      acc[char] = (acc[char] || 0) + 1;
      return acc;
    }, {});

  return s.split("").findIndex((char) => frequency[char] === 1);
}

/**
 * Solution 7: Using Linked List (Queue approach)
 *
 * Approach:
 * - Use queue to maintain order of characters
 * - Remove duplicates from queue
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function firstUniqCharQueue(s: string): number {
  const frequency = new Map<string, number>();
  const queue: Array<{ char: string; index: number }> = [];

  for (let i = 0; i < s.length; i++) {
    const char = s[i];
    const count = (frequency.get(char) || 0) + 1;
    frequency.set(char, count);

    if (count === 1) {
      queue.push({ char, index: i });
    }
  }

  // Find first character in queue with frequency 1
  for (const { char, index } of queue) {
    if (frequency.get(char) === 1) {
      return index;
    }
  }

  return -1;
}

/**
 * Solution 8: Using Bit Manipulation (Limited use case)
 *
 * Approach:
 * - Use bit flags for ASCII characters
 * - Limited to 32-bit integers
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function firstUniqCharBitwise(s: string): number {
  let seen = 0;
  let duplicates = 0;

  for (const char of s) {
    const bit = 1 << (char.charCodeAt(0) - "a".charCodeAt(0));

    if (seen & bit) {
      duplicates |= bit;
    } else {
      seen |= bit;
    }
  }

  for (let i = 0; i < s.length; i++) {
    const bit = 1 << (s[i].charCodeAt(0) - "a".charCodeAt(0));
    if (seen & bit && !(duplicates & bit)) {
      return i;
    }
  }

  return -1;
}

/**
 * Solution 9: Using Generator (Memory efficient)
 *
 * Approach:
 * - Use generator to yield characters with their indices
 * - Memory efficient for large strings
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function* characterGenerator(
  s: string
): Generator<{ char: string; index: number }> {
  for (let i = 0; i < s.length; i++) {
    yield { char: s[i], index: i };
  }
}

function firstUniqCharGenerator(s: string): number {
  const frequency = new Map<string, number>();

  // Count frequency
  for (const { char } of characterGenerator(s)) {
    frequency.set(char, (frequency.get(char) || 0) + 1);
  }

  // Find first unique character
  for (const { char, index } of characterGenerator(s)) {
    if (frequency.get(char) === 1) {
      return index;
    }
  }

  return -1;
}

// Test cases
function testFirstUniqChar() {
  console.log("=== Testing First Unique Character in a String ===\n");

  const testCases = [
    {
      input: "leetcode",
      expected: 0,
      description: "First character is unique",
    },
    {
      input: "loveleetcode",
      expected: 2,
      description: "Third character is unique",
    },
    {
      input: "aabb",
      expected: -1,
      description: "No unique characters",
    },
    {
      input: "a",
      expected: 0,
      description: "Single character",
    },
    {
      input: "",
      expected: -1,
      description: "Empty string",
    },
    {
      input: "abcabc",
      expected: -1,
      description: "All characters repeated",
    },
    {
      input: "z",
      expected: 0,
      description: "Single unique character",
    },
    {
      input: "dddccdbba",
      expected: 8,
      description: "Last character is unique",
    },
  ];

  testCases.forEach((testCase, index) => {
    console.log(`Test Case ${index + 1}: ${testCase.description}`);
    console.log(`Input: "${testCase.input}"`);
    console.log(`Expected: ${testCase.expected}\n`);

    // Test Solution 1 (Hash Map)
    const result1 = firstUniqChar(testCase.input);
    console.log(
      `Solution 1 (Hash Map): ${result1} ${
        result1 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 2 (Array)
    const result2 = firstUniqCharArray(testCase.input);
    console.log(
      `Solution 2 (Array): ${result2} ${
        result2 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 3 (Object)
    const result3 = firstUniqCharObject(testCase.input);
    console.log(
      `Solution 3 (Object): ${result3} ${
        result3 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 4 (indexOf)
    const result4 = firstUniqCharIndexOf(testCase.input);
    console.log(
      `Solution 4 (indexOf): ${result4} ${
        result4 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 5 (Set)
    const result5 = firstUniqCharSet(testCase.input);
    console.log(
      `Solution 5 (Set): ${result5} ${
        result5 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 6 (Functional)
    const result6 = firstUniqCharFunctional(testCase.input);
    console.log(
      `Solution 6 (Functional): ${result6} ${
        result6 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 7 (Queue)
    const result7 = firstUniqCharQueue(testCase.input);
    console.log(
      `Solution 7 (Queue): ${result7} ${
        result7 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 8 (Bitwise)
    const result8 = firstUniqCharBitwise(testCase.input);
    console.log(
      `Solution 8 (Bitwise): ${result8} ${
        result8 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 9 (Generator)
    const result9 = firstUniqCharGenerator(testCase.input);
    console.log(
      `Solution 9 (Generator): ${result9} ${
        result9 === testCase.expected ? "✅" : "❌"
      }`
    );

    console.log("\n---\n");
  });
}

// Performance comparison
function performanceComparison() {
  console.log("=== Performance Comparison ===\n");

  const testCases = [
    { name: "Hash Map", func: firstUniqChar },
    { name: "Array", func: firstUniqCharArray },
    { name: "Object", func: firstUniqCharObject },
    { name: "indexOf", func: firstUniqCharIndexOf },
    { name: "Set", func: firstUniqCharSet },
    { name: "Functional", func: firstUniqCharFunctional },
    { name: "Queue", func: firstUniqCharQueue },
    { name: "Bitwise", func: firstUniqCharBitwise },
    { name: "Generator", func: firstUniqCharGenerator },
  ];

  // Create test strings
  const smallString = "leetcode";
  const largeString = "a".repeat(1000) + "b" + "a".repeat(1000);
  const noUniqueString = "aabbccddee";

  const strings = [
    { name: "Small", string: smallString },
    { name: "Large", string: largeString },
    { name: "No Unique", string: noUniqueString },
  ];

  strings.forEach(({ name, string }) => {
    console.log(`${name} String:`);

    testCases.forEach(({ name: funcName, func }) => {
      const start = performance.now();
      const result = func(string);
      const end = performance.now();

      console.log(
        `  ${funcName}: ${(end - start).toFixed(2)}ms (result: ${result})`
      );
    });

    console.log("");
  });
}

// Character frequency analysis
function frequencyAnalysis() {
  console.log("=== Character Frequency Analysis ===\n");

  const testStrings = ["leetcode", "loveleetcode", "aabb", "dddccdbba"];

  testStrings.forEach((s) => {
    console.log(`String: "${s}"`);

    const frequency = new Map<string, number>();
    for (const char of s) {
      frequency.set(char, (frequency.get(char) || 0) + 1);
    }

    console.log("Character frequencies:");
    for (const [char, count] of frequency) {
      console.log(`  '${char}': ${count} time(s)`);
    }

    const uniqueChars = Array.from(frequency.entries())
      .filter(([_, count]) => count === 1)
      .map(([char, _]) => char);

    console.log(`Unique characters: [${uniqueChars.join(", ")}]`);
    console.log("");
  });
}

// Uncomment the following lines to run tests
// testFirstUniqChar();
// performanceComparison();
// frequencyAnalysis();

export {
  firstUniqChar,
  firstUniqCharArray,
  firstUniqCharObject,
  firstUniqCharIndexOf,
  firstUniqCharSet,
  firstUniqCharFunctional,
  firstUniqCharQueue,
  firstUniqCharBitwise,
  firstUniqCharGenerator,
  characterGenerator,
  testFirstUniqChar,
  performanceComparison,
  frequencyAnalysis,
};
{% endraw %}
6:["topic","string-problems-03-first-unique-character-in-a-string","d"]
0:["7uJ7BVaXJTiEOD9iYDv3n",[[["",{"children":["learn",{"children":[["topic","string-problems-03-first-unique-character-in-a-string","d"],{"children":["__PAGE__?{\"topic\":\"string-problems-03-first-unique-character-in-a-string\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["learn",{"children":[["topic","string-problems-03-first-unique-character-in-a-string","d"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"max-w-6xl mx-auto px-8 py-24","children":[["$","div",null,{"className":"flex items-center gap-4 mb-8","children":["$","$L2",null,{"href":"/learn","children":["$","button",null,{"className":"flex items-center gap-2 bg-gray-100 border border-gray-300 text-gray-700 px-4 py-3 rounded-md font-medium hover:bg-gray-200 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left ","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Learn"]}]}]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8 mb-8","children":[["$","div",null,{"className":"flex items-center justify-between mb-4","children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900","children":"First Unique Character in a String"}],["$","div",null,{"className":"flex gap-4","children":[["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-star ","children":[["$","polygon","8f66p6",{"points":"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"}],"$undefined"]}],"Bookmark"]}],["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-share2 ","children":[["$","circle","gq8acd",{"cx":"18","cy":"5","r":"3"}],["$","circle","w7nqdw",{"cx":"6","cy":"12","r":"3"}],["$","circle","1xt0gg",{"cx":"18","cy":"19","r":"3"}],["$","line","47mynk",{"x1":"8.59","x2":"15.42","y1":"13.51","y2":"17.49"}],["$","line","1n3mei",{"x1":"15.41","x2":"8.59","y1":"6.51","y2":"10.49"}],"$undefined"]}],"Share"]}]]}]]}],["$","div",null,{"className":"flex gap-8 mb-4","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock ","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],"2-3 hours"]}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold text-white bg-red-500","children":"Easy"}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700","children":"String"}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","0",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"String"}],["$","span","1",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Hash Table"}]]}],["$","p",null,{"className":"text-lg text-gray-700 leading-relaxed","children":"**LeetCode Problem # * 387. First Unique Character in a String**..."}]]}],["$","div",null,{"className":"grid grid-cols-1 lg:grid-cols-3 gap-8","children":[["$","div",null,{"className":"lg:col-span-2","children":["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8","children":["$","$L3",null,{"content":"$4"}]}]}],["$","div",null,{"className":"space-y-6","children":[["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Your Progress"}],["$","div",null,{"className":"w-full bg-gray-200 rounded-full h-2 mb-2","children":["$","div",null,{"className":"bg-blue-600 h-2 rounded-full","style":{"width":"25%"}}]}],["$","p",null,{"className":"text-sm text-gray-600","children":"25% Complete"}]]}],false]}]]}]]}],null],null],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L8",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
