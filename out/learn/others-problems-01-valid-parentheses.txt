2:I[2972,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-b4f9b7b2865ef07e.js"],""]
3:I[5907,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-b4f9b7b2865ef07e.js"],"default"]
5:I[4707,[],""]
7:I[6423,[],""]
8:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
4:T2b78,
# Valid Parenthese

**LeetCode Problem # * 20. Valid Parentheses**

## Problem Description

 * Given a string s containing just the characters '(', ')', '{', '}', '[' and ']',  * determine if the input string is valid.  *  * An input string is valid if:  * - Open brackets must be closed by the same type of brackets. 

## Solutions

{% raw %}
/**
 * 20. Valid Parentheses
 *
 * Problem:
 * Given a string s containing just the characters '(', ')', '{', '}', '[' and ']',
 * determine if the input string is valid.
 *
 * An input string is valid if:
 * - Open brackets must be closed by the same type of brackets.
 * - Open brackets must be closed in the correct order.
 * - Every close bracket has a corresponding open bracket of the same type.
 *
 * Example:
 * Input: s = "()"
 * Output: true
 *
 * Input: s = "()[]{}"
 * Output: true
 *
 * Input: s = "(]"
 * Output: false
 *
 * LeetCode: https://leetcode.com/problems/valid-parentheses/
 */

/**
 * Solution 1: Stack (Optimal)
 *
 * Approach:
 * - Use stack to keep track of opening brackets
 * - When encountering closing bracket, check if it matches top of stack
 * - Stack should be empty at the end
 *
 * Time Complexity: O(n)
 * Space Complexity: O(n)
 */
function isValid(s: string): boolean {
  const stack: string[] = [];
  const brackets: { [key: string]: string } = {
    ")": "(",
    "}": "{",
    "]": "[",
  };

  for (const char of s) {
    if (char === "(" || char === "{" || char === "[") {
      stack.push(char);
    } else {
      if (stack.length === 0 || stack.pop() !== brackets[char]) {
        return false;
      }
    }
  }

  return stack.length === 0;
}

/**
 * Solution 2: Stack with Switch Statement
 *
 * Approach:
 * - Same logic as Solution 1 but using switch statement
 * - More explicit handling of each bracket type
 *
 * Time Complexity: O(n)
 * Space Complexity: O(n)
 */
function isValidSwitch(s: string): boolean {
  const stack: string[] = [];

  for (const char of s) {
    switch (char) {
      case "(":
      case "{":
      case "[":
        stack.push(char);
        break;
      case ")":
        if (stack.length === 0 || stack.pop() !== "(") return false;
        break;
      case "}":
        if (stack.length === 0 || stack.pop() !== "{") return false;
        break;
      case "]":
        if (stack.length === 0 || stack.pop() !== "[") return false;
        break;
    }
  }

  return stack.length === 0;
}

/**
 * Solution 3: Using Array Methods (Functional)
 *
 * Approach:
 * - Use reduce to process string functionally
 * - More declarative approach
 *
 * Time Complexity: O(n)
 * Space Complexity: O(n)
 */
function isValidFunctional(s: string): boolean {
  const brackets: { [key: string]: string } = {
    ")": "(",
    "}": "{",
    "]": "[",
  };

  const result = s.split("").reduce((stack: string[], char: string) => {
    if (char === "(" || char === "{" || char === "[") {
      stack.push(char);
    } else {
      if (stack.length === 0 || stack[stack.length - 1] !== brackets[char]) {
        return ["INVALID"]; // Mark as invalid
      }
      stack.pop();
    }
    return stack;
  }, []);

  return result.length === 0 && !result.includes("INVALID");
}

/**
 * Solution 4: Using Map (More Extensible)
 *
 * Approach:
 * - Use Map for bracket pairs
 * - Easier to extend for more bracket types
 *
 * Time Complexity: O(n)
 * Space Complexity: O(n)
 */
function isValidMap(s: string): boolean {
  const stack: string[] = [];
  const brackets = new Map<string, string>([
    [")", "("],
    ["}", "{"],
    ["]", "["],
  ]);

  for (const char of s) {
    if (!brackets.has(char)) {
      // Opening bracket
      stack.push(char);
    } else {
      // Closing bracket
      if (stack.length === 0 || stack.pop() !== brackets.get(char)) {
        return false;
      }
    }
  }

  return stack.length === 0;
}

/**
 * Solution 5: Using ASCII Values (Optimized)
 *
 * Approach:
 * - Use ASCII values to determine bracket pairs
 * - Avoids object/map lookups
 *
 * Time Complexity: O(n)
 * Space Complexity: O(n)
 */
function isValidASCII(s: string): boolean {
  const stack: number[] = [];

  for (const char of s) {
    const code = char.charCodeAt(0);

    if (code === 40 || code === 91 || code === 123) {
      // (, [, {
      stack.push(code);
    } else {
      if (stack.length === 0) return false;

      const top = stack.pop()!;
      const diff = code - top;

      // Check if brackets match: () = 1, [] = 2, {} = 2
      if (diff !== 1 && diff !== 2) {
        return false;
      }
    }
  }

  return stack.length === 0;
}

/**
 * Solution 6: Recursive Approach (Educational)
 *
 * Approach:
 * - Use recursion to validate parentheses
 * - Shows recursive thinking
 *
 * Time Complexity: O(n)
 * Space Complexity: O(n) - recursion stack
 */
function isValidRecursive(s: string): boolean {
  function validate(index: number, stack: string[]): [boolean, number] {
    if (index >= s.length) {
      return [stack.length === 0, index];
    }

    const char = s[index];

    if (char === "(" || char === "{" || char === "[") {
      stack.push(char);
      return validate(index + 1, stack);
    } else {
      if (stack.length === 0) return [false, index];

      const top = stack.pop()!;
      const expected = char === ")" ? "(" : char === "}" ? "{" : "[";

      if (top !== expected) return [false, index];
      return validate(index + 1, stack);
    }
  }

  const [isValid, _] = validate(0, []);
  return isValid;
}

/**
 * Solution 7: Using Regular Expressions (Not Recommended)
 *
 * Approach:
 * - Use regex to remove valid pairs repeatedly
 * - Educational but inefficient
 *
 * Time Complexity: O(n²) - regex operations
 * Space Complexity: O(n)
 */
function isValidRegex(s: string): boolean {
  let prev = s;
  let current = s;

  do {
    prev = current;
    current = current.replace(/\(\)|\[\]|\{\}/g, "");
  } while (prev !== current);

  return current.length === 0;
}

/**
 * Solution 8: Using Generator (Memory Efficient)
 *
 * Approach:
 * - Use generator to process brackets one by one
 * - Memory efficient for large strings
 *
 * Time Complexity: O(n)
 * Space Complexity: O(n)
 */
function* bracketValidator(s: string): Generator<boolean> {
  const stack: string[] = [];
  const brackets: { [key: string]: string } = {
    ")": "(",
    "}": "{",
    "]": "[",
  };

  for (const char of s) {
    if (char === "(" || char === "{" || char === "[") {
      stack.push(char);
    } else {
      if (stack.length === 0 || stack.pop() !== brackets[char]) {
        yield false;
        return;
      }
    }
    yield stack.length === 0;
  }

  yield stack.length === 0;
}

function isValidGenerator(s: string): boolean {
  const generator = bracketValidator(s);
  let result = false;

  for (const valid of generator) {
    result = valid;
  }

  return result;
}

// Test cases
function testValidParentheses() {
  console.log("=== Testing Valid Parentheses ===\n");

  const testCases = [
    {
      input: "()",
      expected: true,
      description: "Simple parentheses",
    },
    {
      input: "()[]{}",
      expected: true,
      description: "Multiple bracket types",
    },
    {
      input: "(]",
      expected: false,
      description: "Mismatched brackets",
    },
    {
      input: "([)]",
      expected: false,
      description: "Wrong order",
    },
    {
      input: "{[]}",
      expected: true,
      description: "Nested brackets",
    },
    {
      input: "",
      expected: true,
      description: "Empty string",
    },
    {
      input: "(((",
      expected: false,
      description: "Only opening brackets",
    },
    {
      input: ")))",
      expected: false,
      description: "Only closing brackets",
    },
    {
      input: "({[]})",
      expected: true,
      description: "Complex nested",
    },
    {
      input: "([{}])",
      expected: true,
      description: "Mixed nested",
    },
  ];

  testCases.forEach((testCase, index) => {
    console.log(`Test Case ${index + 1}: ${testCase.description}`);
    console.log(`Input: "${testCase.input}"`);
    console.log(`Expected: ${testCase.expected}\n`);

    // Test Solution 1 (Stack)
    const result1 = isValid(testCase.input);
    console.log(
      `Solution 1 (Stack): ${result1} ${
        result1 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 2 (Switch)
    const result2 = isValidSwitch(testCase.input);
    console.log(
      `Solution 2 (Switch): ${result2} ${
        result2 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 3 (Functional)
    const result3 = isValidFunctional(testCase.input);
    console.log(
      `Solution 3 (Functional): ${result3} ${
        result3 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 4 (Map)
    const result4 = isValidMap(testCase.input);
    console.log(
      `Solution 4 (Map): ${result4} ${
        result4 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 5 (ASCII)
    const result5 = isValidASCII(testCase.input);
    console.log(
      `Solution 5 (ASCII): ${result5} ${
        result5 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 6 (Recursive)
    const result6 = isValidRecursive(testCase.input);
    console.log(
      `Solution 6 (Recursive): ${result6} ${
        result6 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 7 (Regex)
    const result7 = isValidRegex(testCase.input);
    console.log(
      `Solution 7 (Regex): ${result7} ${
        result7 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 8 (Generator)
    const result8 = isValidGenerator(testCase.input);
    console.log(
      `Solution 8 (Generator): ${result8} ${
        result8 === testCase.expected ? "✅" : "❌"
      }`
    );

    console.log("\n---\n");
  });
}

// Performance comparison
function performanceComparison() {
  console.log("=== Performance Comparison ===\n");

  const testCases = [
    { name: "Stack", func: isValid },
    { name: "Switch", func: isValidSwitch },
    { name: "Functional", func: isValidFunctional },
    { name: "Map", func: isValidMap },
    { name: "ASCII", func: isValidASCII },
    { name: "Recursive", func: isValidRecursive },
    { name: "Regex", func: isValidRegex },
    { name: "Generator", func: isValidGenerator },
  ];

  // Create test string with many brackets
  const testString = "({[]})".repeat(10000);

  testCases.forEach(({ name, func }) => {
    const start = performance.now();
    const result = func(testString);
    const end = performance.now();

    console.log(`${name}:`);
    console.log(`  Time: ${(end - start).toFixed(2)}ms`);
    console.log(`  Result: ${result}`);
    console.log(`  Memory: O(n)\n`);
  });
}

// Uncomment the following lines to run tests
// testValidParentheses();
// performanceComparison();

export {
  isValid,
  isValidSwitch,
  isValidFunctional,
  isValidMap,
  isValidASCII,
  isValidRecursive,
  isValidRegex,
  isValidGenerator,
  bracketValidator,
  testValidParentheses,
  performanceComparison,
};
{% endraw %}
6:["topic","others-problems-01-valid-parentheses","d"]
0:["fjDGwqtt1UnBZeA2uH4xO",[[["",{"children":["learn",{"children":[["topic","others-problems-01-valid-parentheses","d"],{"children":["__PAGE__?{\"topic\":\"others-problems-01-valid-parentheses\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["learn",{"children":[["topic","others-problems-01-valid-parentheses","d"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"max-w-6xl mx-auto px-8 py-24","children":[["$","div",null,{"className":"flex items-center gap-4 mb-8","children":["$","$L2",null,{"href":"/learn","children":["$","button",null,{"className":"flex items-center gap-2 bg-gray-100 border border-gray-300 text-gray-700 px-4 py-3 rounded-md font-medium hover:bg-gray-200 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left ","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Learn"]}]}]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8 mb-8","children":[["$","div",null,{"className":"flex items-center justify-between mb-4","children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900","children":"Valid Parenthese"}],["$","div",null,{"className":"flex gap-4","children":[["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-star ","children":[["$","polygon","8f66p6",{"points":"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"}],"$undefined"]}],"Bookmark"]}],["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-share2 ","children":[["$","circle","gq8acd",{"cx":"18","cy":"5","r":"3"}],["$","circle","w7nqdw",{"cx":"6","cy":"12","r":"3"}],["$","circle","1xt0gg",{"cx":"18","cy":"19","r":"3"}],["$","line","47mynk",{"x1":"8.59","x2":"15.42","y1":"13.51","y2":"17.49"}],["$","line","1n3mei",{"x1":"15.41","x2":"8.59","y1":"6.51","y2":"10.49"}],"$undefined"]}],"Share"]}]]}]]}],["$","div",null,{"className":"flex gap-8 mb-4","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock ","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],"2-3 hours"]}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold text-white bg-red-500","children":"Easy"}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700","children":"Others"}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","0",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Others"}],["$","span","1",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Hash Table"}]]}],["$","p",null,{"className":"text-lg text-gray-700 leading-relaxed","children":"**LeetCode Problem # * 20. Valid Parentheses**..."}]]}],["$","div",null,{"className":"grid grid-cols-1 lg:grid-cols-3 gap-8","children":[["$","div",null,{"className":"lg:col-span-2","children":["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8","children":["$","$L3",null,{"content":"$4"}]}]}],["$","div",null,{"className":"space-y-6","children":[["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Your Progress"}],["$","div",null,{"className":"w-full bg-gray-200 rounded-full h-2 mb-2","children":["$","div",null,{"className":"bg-blue-600 h-2 rounded-full","style":{"width":"25%"}}]}],["$","p",null,{"className":"text-sm text-gray-600","children":"25% Complete"}]]}],false]}]]}]]}],null],null],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L8",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
