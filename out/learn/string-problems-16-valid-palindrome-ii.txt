2:I[2972,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],""]
3:I[5907,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],"default"]
5:I[4707,[],""]
7:I[6423,[],""]
8:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
4:T2a8b,
# Valid Palindrome II

**LeetCode Problem # * 680. Valid Palindrome II**

## Problem Description

LeetCode problem solution with multiple approaches and explanations.

## Solutions

{% raw %}
/**
 * 680. Valid Palindrome II
 * 
 * Given a string s, return true if the s can be palindrome after deleting at most one character from it.
 * 
 * Example 1:
 * Input: s = "aba"
 * Output: true
 * 
 * Example 2:
 * Input: s = "abca"
 * Output: true
 * Explanation: You could delete the character 'c'.
 * 
 * Example 3:
 * Input: s = "abc"
 * Output: false
 * 
 * Constraints:
 * - 1 <= s.length <= 10^5
 * - s consists of lowercase English letters.
 */

// Solution 1: Two Pointers with Helper Function
// Time: O(n), Space: O(1)
export function validPalindrome1(s: string): boolean {
    function isPalindrome(str: string, left: number, right: number): boolean {
        while (left < right) {
            if (str[left] !== str[right]) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
    
    let left = 0;
    let right = s.length - 1;
    
    while (left < right) {
        if (s[left] !== s[right]) {
            // Try deleting left character or right character
            return isPalindrome(s, left + 1, right) || isPalindrome(s, left, right - 1);
        }
        left++;
        right--;
    }
    
    return true;
}

// Solution 2: Recursive Approach with Memoization
// Time: O(n), Space: O(n)
export function validPalindrome2(s: string): boolean {
    const memo = new Map<string, boolean>();
    
    function canBeValidPalindrome(left: number, right: number, deletions: number): boolean {
        if (deletions > 1) return false;
        if (left >= right) return true;
        
        const key = `${left},${right},${deletions}`;
        if (memo.has(key)) {
            return memo.get(key)!;
        }
        
        let result = false;
        
        if (s[left] === s[right]) {
            result = canBeValidPalindrome(left + 1, right - 1, deletions);
        } else {
            // Try deleting left character
            result = canBeValidPalindrome(left + 1, right, deletions + 1) ||
                    // Try deleting right character
                    canBeValidPalindrome(left, right - 1, deletions + 1);
        }
        
        memo.set(key, result);
        return result;
    }
    
    return canBeValidPalindrome(0, s.length - 1, 0);
}

// Solution 3: Iterative with Early Termination
// Time: O(n), Space: O(1)
export function validPalindrome3(s: string): boolean {
    function checkPalindrome(left: number, right: number, allowDelete: boolean): boolean {
        while (left < right) {
            if (s[left] !== s[right]) {
                if (!allowDelete) return false;
                
                // Try both options and return true if either works
                return checkPalindrome(left + 1, right, false) || 
                       checkPalindrome(left, right - 1, false);
            }
            left++;
            right--;
        }
        return true;
    }
    
    return checkPalindrome(0, s.length - 1, true);
}

// Solution 4: Greedy Approach
// Time: O(n), Space: O(1)
export function validPalindrome4(s: string): boolean {
    let left = 0;
    let right = s.length - 1;
    
    // Find first mismatch
    while (left < right && s[left] === s[right]) {
        left++;
        right--;
    }
    
    // If no mismatch found, it's already a palindrome
    if (left >= right) return true;
    
    // Helper function to check if substring is palindrome
    function isPalindrome(l: number, r: number): boolean {
        while (l < r) {
            if (s[l] !== s[r]) return false;
            l++;
            r--;
        }
        return true;
    }
    
    // Try removing either the left or right character
    return isPalindrome(left + 1, right) || isPalindrome(left, right - 1);
}

// Solution 5: Dynamic Programming
// Time: O(n²), Space: O(n²)
export function validPalindrome5(s: string): boolean {
    const n = s.length;
    // dp[i][j][k] = can substring s[i..j] be palindrome with at most k deletions
    const dp = Array(n).fill(null).map(() => 
        Array(n).fill(null).map(() => Array(2).fill(false))
    );
    
    // Base cases: single characters are palindromes
    for (let i = 0; i < n; i++) {
        dp[i][i][0] = true;
        dp[i][i][1] = true;
    }
    
    // Fill for all lengths
    for (let len = 2; len <= n; len++) {
        for (let i = 0; i <= n - len; i++) {
            const j = i + len - 1;
            
            if (s[i] === s[j]) {
                // Characters match
                if (len === 2) {
                    dp[i][j][0] = true;
                    dp[i][j][1] = true;
                } else {
                    dp[i][j][0] = dp[i + 1][j - 1][0];
                    dp[i][j][1] = dp[i + 1][j - 1][1];
                }
            } else {
                // Characters don't match
                dp[i][j][0] = false;
                if (len > 2) {
                    dp[i][j][1] = dp[i + 1][j][0] || dp[i][j - 1][0];
                } else {
                    dp[i][j][1] = true; // Can delete one character
                }
            }
        }
    }
    
    return dp[0][n - 1][1];
}

// Solution 6: Optimized Two-Pass
// Time: O(n), Space: O(1)
export function validPalindrome6(s: string): boolean {
    function findMismatch(left: number, right: number): [number, number] | null {
        while (left < right) {
            if (s[left] !== s[right]) {
                return [left, right];
            }
            left++;
            right--;
        }
        return null;
    }
    
    function isPalindromeRange(left: number, right: number): boolean {
        while (left < right) {
            if (s[left] !== s[right]) return false;
            left++;
            right--;
        }
        return true;
    }
    
    const mismatch = findMismatch(0, s.length - 1);
    
    if (!mismatch) return true; // Already a palindrome
    
    const [left, right] = mismatch;
    
    // Try deleting left character
    if (isPalindromeRange(left + 1, right)) return true;
    
    // Try deleting right character
    if (isPalindromeRange(left, right - 1)) return true;
    
    return false;
}

// Test cases
export function testValidPalindrome() {
    console.log("Testing Valid Palindrome II:");
    
    const testCases = [
        {
            input: "aba",
            expected: true
        },
        {
            input: "abca",
            expected: true
        },
        {
            input: "abc",
            expected: false
        },
        {
            input: "raceacar",
            expected: true
        },
        {
            input: "race",
            expected: false
        },
        {
            input: "abcddcba",
            expected: true
        },
        {
            input: "abcdef",
            expected: false
        },
        {
            input: "a",
            expected: true
        },
        {
            input: "ab",
            expected: true
        },
        {
            input: "deeee",
            expected: true
        }
    ];
    
    const solutions = [
        { name: "Two Pointers", fn: validPalindrome1 },
        { name: "Recursive + Memo", fn: validPalindrome2 },
        { name: "Iterative Early Term", fn: validPalindrome3 },
        { name: "Greedy", fn: validPalindrome4 },
        { name: "Dynamic Programming", fn: validPalindrome5 },
        { name: "Two-Pass Optimized", fn: validPalindrome6 }
    ];
    
    solutions.forEach(solution => {
        console.log(`\n${solution.name}:`);
        testCases.forEach((test, i) => {
            const result = solution.fn(test.input);
            const passed = result === test.expected;
            console.log(`  Test ${i + 1}: ${passed ? 'PASS' : 'FAIL'}`);
            if (!passed) {
                console.log(`    Input: "${test.input}"`);
                console.log(`    Expected: ${test.expected}`);
                console.log(`    Got: ${result}`);
            }
        });
    });
}

/**
 * Key Insights:
 * 
 * 1. **Problem Understanding**:
 *    - Can delete AT MOST one character
 *    - Must check if resulting string is palindrome
 *    - Original string might already be palindrome
 * 
 * 2. **Two Pointers Strategy**:
 *    - Start from both ends
 *    - When mismatch found, try deleting either character
 *    - Continue palindrome check from remaining substring
 * 
 * 3. **Key Optimization**:
 *    - Only need to check deletion when first mismatch occurs
 *    - Don't need to generate actual substrings
 *    - Can check validity with indices only
 * 
 * 4. **Time Complexity**: O(n)
 *    - Single pass to find mismatch: O(n)
 *    - At most two palindrome checks: O(n)
 *    - Total: O(n)
 * 
 * 5. **Space Complexity**: O(1)
 *    - Only using pointers and variables
 *    - No additional data structures needed
 * 
 * 6. **Edge Cases**:
 *    - Single character (always valid)
 *    - Two characters (always valid)
 *    - Already palindrome (no deletion needed)
 *    - No valid deletion possible
 * 
 * 7. **Interview Strategy**:
 *    - Start with basic palindrome check
 *    - Extend to handle one deletion
 *    - Optimize to avoid unnecessary work
 *    - Handle edge cases carefully
 * 
 * 8. **Common Mistakes**:
 *    - Checking all possible deletions (O(n²))
 *    - Not handling edge cases properly
 *    - Creating unnecessary substrings
 *    - Incorrect index management
 * 
 * 9. **Why Greedy Works**:
 *    - First mismatch determines deletion candidates
 *    - Only two choices: delete left or right character
 *    - If neither works, no solution exists
 * 
 * 10. **Alternative Approaches**:
 *     - DP: O(n²) time and space (overkill)
 *     - Recursion: Cleaner code but may have stack overhead
 *     - Brute force: Check all n possible deletions (inefficient)
 * 
 * 11. **Big Tech Variations**:
 *     - Google: Valid palindrome with k deletions
 *     - Meta: Minimum deletions to make palindrome
 *     - Amazon: Palindrome with character substitutions
 *     - Microsoft: Case-insensitive palindrome validation
 * 
 * 12. **Follow-up Questions**:
 *     - Extend to k deletions
 *     - Return the actual palindrome string
 *     - Handle Unicode/special characters
 *     - Find minimum deletions needed
 * 
 * 13. **Real-world Applications**:
 *     - Text processing and validation
 *     - DNA sequence analysis
 *     - Data deduplication
 *     - String similarity measures
 *     - Auto-correction systems
 * 
 * 14. **Pattern Recognition**:
 *     - Two pointers for palindrome problems
 *     - Greedy choice when limited operations allowed
 *     - Early termination for optimization
 *     - Index-based processing to avoid string creation
 */
{% endraw %}
6:["topic","string-problems-16-valid-palindrome-ii","d"]
0:["GkGybauu5extr5oVPcZnD",[[["",{"children":["learn",{"children":[["topic","string-problems-16-valid-palindrome-ii","d"],{"children":["__PAGE__?{\"topic\":\"string-problems-16-valid-palindrome-ii\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["learn",{"children":[["topic","string-problems-16-valid-palindrome-ii","d"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"max-w-6xl mx-auto px-8 py-24","children":[["$","div",null,{"className":"flex items-center gap-4 mb-8","children":["$","$L2",null,{"href":"/learn","children":["$","button",null,{"className":"flex items-center gap-2 bg-gray-100 border border-gray-300 text-gray-700 px-4 py-3 rounded-md font-medium hover:bg-gray-200 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left ","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Learn"]}]}]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8 mb-8","children":[["$","div",null,{"className":"flex items-center justify-between mb-4","children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900","children":"Valid Palindrome II"}],["$","div",null,{"className":"flex gap-4","children":[["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-star ","children":[["$","polygon","8f66p6",{"points":"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"}],"$undefined"]}],"Bookmark"]}],["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-share2 ","children":[["$","circle","gq8acd",{"cx":"18","cy":"5","r":"3"}],["$","circle","w7nqdw",{"cx":"6","cy":"12","r":"3"}],["$","circle","1xt0gg",{"cx":"18","cy":"19","r":"3"}],["$","line","47mynk",{"x1":"8.59","x2":"15.42","y1":"13.51","y2":"17.49"}],["$","line","1n3mei",{"x1":"15.41","x2":"8.59","y1":"6.51","y2":"10.49"}],"$undefined"]}],"Share"]}]]}]]}],["$","div",null,{"className":"flex gap-8 mb-4","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock ","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],"2-3 hours"]}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold text-white bg-red-500","children":"Easy"}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700","children":"String"}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","0",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"String"}],["$","span","1",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Two Pointers"}],["$","span","2",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Hash Table"}],["$","span","3",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Greedy"}]]}],["$","p",null,{"className":"text-lg text-gray-700 leading-relaxed","children":"**LeetCode Problem # * 680. Valid Palindrome II**..."}]]}],["$","div",null,{"className":"grid grid-cols-1 lg:grid-cols-3 gap-8","children":[["$","div",null,{"className":"lg:col-span-2","children":["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8","children":["$","$L3",null,{"content":"$4"}]}]}],["$","div",null,{"className":"space-y-6","children":[["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Your Progress"}],["$","div",null,{"className":"w-full bg-gray-200 rounded-full h-2 mb-2","children":["$","div",null,{"className":"bg-blue-600 h-2 rounded-full","style":{"width":"25%"}}]}],["$","p",null,{"className":"text-sm text-gray-600","children":"25% Complete"}]]}],false]}]]}]]}],null],null],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L8",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
