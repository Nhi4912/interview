2:I[2972,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],""]
3:I[5907,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],"default"]
5:I[4707,[],""]
7:I[6423,[],""]
8:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
4:T2d2d,
# Longest Increasing Subsequence



## Problem Description

 *  * Given an integer array nums, return the length of the longest strictly increasing subsequence.  *  * A subsequence is a sequence that can be derived from an array by deleting some or no elements  * without changing the order of the remaining elements. 

## Solutions

{% raw %}
/**
 * Longest Increasing Subsequence
 *
 * Problem: https://leetcode.com/problems/longest-increasing-subsequence/
 *
 * Given an integer array nums, return the length of the longest strictly increasing subsequence.
 *
 * A subsequence is a sequence that can be derived from an array by deleting some or no elements
 * without changing the order of the remaining elements.
 *
 * Example 1:
 * Input: nums = [10,9,2,5,3,7,101,18]
 * Output: 4
 * Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
 *
 * Example 2:
 * Input: nums = [0,1,0,3,2,3]
 * Output: 4
 *
 * Example 3:
 * Input: nums = [7,7,7,7,7,7,7]
 * Output: 1
 *
 * Constraints:
 * - 1 <= nums.length <= 2500
 * - -10^4 <= nums[i] <= 10^4
 *
 * Solution Approach:
 * 1. Dynamic Programming: O(n²) solution
 * 2. Binary Search with Patience Sorting: O(n log n) solution
 * 3. Track the length of LIS ending at each position
 * 4. Use binary search to find insertion position for optimization
 *
 * Time Complexity: O(n log n) for optimal solution
 * Space Complexity: O(n)
 */

/**
 * Longest Increasing Subsequence - Dynamic Programming
 *
 * Giải pháp Quy hoạch động cho bài toán Dãy con tăng dài nhất
 *
 * @param nums - Mảng số nguyên
 * @returns Độ dài của dãy con tăng dài nhất
 */
function lengthOfLIS(nums: number[]): number {
  if (nums.length === 0) return 0;

  const dp = new Array(nums.length).fill(1);
  let maxLength = 1;

  for (let i = 1; i < nums.length; i++) {
    for (let j = 0; j < i; j++) {
      if (nums[i] > nums[j]) {
        dp[i] = Math.max(dp[i], dp[j] + 1);
      }
    }
    maxLength = Math.max(maxLength, dp[i]);
  }

  return maxLength;
}

/**
 * Optimal Solution: Binary Search with Patience Sorting
 *
 * Giải pháp tối ưu: Tìm kiếm nhị phân với sắp xếp kiên nhẫn
 *
 * @param nums - Mảng số nguyên
 * @returns Độ dài của dãy con tăng dài nhất
 */
function lengthOfLISOptimal(nums: number[]): number {
  if (nums.length === 0) return 0;

  const tails: number[] = [];

  for (const num of nums) {
    // Tìm vị trí chèn bằng binary search
    let left = 0;
    let right = tails.length;

    while (left < right) {
      const mid = Math.floor((left + right) / 2);
      if (tails[mid] < num) {
        left = mid + 1;
      } else {
        right = mid;
      }
    }

    if (left === tails.length) {
      tails.push(num);
    } else {
      tails[left] = num;
    }
  }

  return tails.length;
}

/**
 * Solution with Subsequence Reconstruction
 *
 * Giải pháp với tái tạo dãy con
 *
 * @param nums - Mảng số nguyên
 * @returns Object chứa độ dài và dãy con tăng dài nhất
 */
function lengthOfLISWithSubsequence(nums: number[]): {
  length: number;
  subsequence: number[];
} {
  if (nums.length === 0) return { length: 0, subsequence: [] };

  const dp = new Array(nums.length).fill(1);
  const prev = new Array(nums.length).fill(-1);
  let maxLength = 1;
  let maxIndex = 0;

  for (let i = 1; i < nums.length; i++) {
    for (let j = 0; j < i; j++) {
      if (nums[i] > nums[j] && dp[j] + 1 > dp[i]) {
        dp[i] = dp[j] + 1;
        prev[i] = j;
      }
    }
    if (dp[i] > maxLength) {
      maxLength = dp[i];
      maxIndex = i;
    }
  }

  // Tái tạo dãy con
  const subsequence: number[] = [];
  let currentIndex = maxIndex;

  while (currentIndex !== -1) {
    subsequence.unshift(nums[currentIndex]);
    currentIndex = prev[currentIndex];
  }

  return { length: maxLength, subsequence };
}

/**
 * Recursive Solution with Memoization
 *
 * Giải pháp đệ quy với ghi nhớ
 *
 * @param nums - Mảng số nguyên
 * @returns Độ dài của dãy con tăng dài nhất
 */
function lengthOfLISRecursive(nums: number[]): number {
  const memo = new Map<string, number>();

  function lisHelper(index: number, prevIndex: number): number {
    if (index >= nums.length) return 0;

    const key = `${index},${prevIndex}`;
    if (memo.has(key)) {
      return memo.get(key)!;
    }

    let include = 0;
    if (prevIndex === -1 || nums[index] > nums[prevIndex]) {
      include = 1 + lisHelper(index + 1, index);
    }

    const exclude = lisHelper(index + 1, prevIndex);
    const result = Math.max(include, exclude);

    memo.set(key, result);
    return result;
  }

  return lisHelper(0, -1);
}

/**
 * Solution with All LIS
 *
 * Giải pháp với tất cả dãy con tăng dài nhất
 *
 * @param nums - Mảng số nguyên
 * @returns Object chứa độ dài và tất cả dãy con tăng dài nhất
 */
function lengthOfLISWithAllSubsequences(nums: number[]): {
  length: number;
  subsequences: number[][];
} {
  if (nums.length === 0) return { length: 0, subsequences: [] };

  const dp = new Array(nums.length).fill(1);
  const prev: number[][] = new Array(nums.length).fill(null).map(() => []);
  let maxLength = 1;
  let maxIndices: number[] = [];

  for (let i = 1; i < nums.length; i++) {
    for (let j = 0; j < i; j++) {
      if (nums[i] > nums[j]) {
        if (dp[j] + 1 > dp[i]) {
          dp[i] = dp[j] + 1;
          prev[i] = [j];
        } else if (dp[j] + 1 === dp[i]) {
          prev[i].push(j);
        }
      }
    }

    if (dp[i] > maxLength) {
      maxLength = dp[i];
      maxIndices = [i];
    } else if (dp[i] === maxLength) {
      maxIndices.push(i);
    }
  }

  // Tái tạo tất cả dãy con
  const subsequences: number[][] = [];

  function reconstruct(index: number, current: number[]): void {
    if (prev[index].length === 0) {
      subsequences.push([...current, nums[index]]);
      return;
    }

    for (const prevIndex of prev[index]) {
      reconstruct(prevIndex, [...current, nums[index]]);
    }
  }

  for (const maxIndex of maxIndices) {
    reconstruct(maxIndex, []);
  }

  return { length: maxLength, subsequences };
}

// Test cases / Các trường hợp kiểm thử
function runTests() {
  console.log("=== Longest Increasing Subsequence Tests ===");
  console.log("=== Kiểm thử bài toán Dãy con tăng dài nhất ===\n");

  const testCases = [
    {
      name: "Example 1: Standard case",
      input: [10, 9, 2, 5, 3, 7, 101, 18],
      expected: 4,
      description: "LIS: [2,3,7,101] with length 4",
    },
    {
      name: "Example 2: Multiple LIS",
      input: [0, 1, 0, 3, 2, 3],
      expected: 4,
      description: "LIS: [0,1,2,3] with length 4",
    },
    {
      name: "Example 3: All same elements",
      input: [7, 7, 7, 7, 7, 7, 7],
      expected: 1,
      description: "LIS: [7] with length 1",
    },
    {
      name: "Single element",
      input: [5],
      expected: 1,
      description: "LIS: [5] with length 1",
    },
    {
      name: "Strictly increasing",
      input: [1, 2, 3, 4, 5],
      expected: 5,
      description: "LIS: [1,2,3,4,5] with length 5",
    },
    {
      name: "Strictly decreasing",
      input: [5, 4, 3, 2, 1],
      expected: 1,
      description: "LIS: [5] with length 1",
    },
    {
      name: "Empty array",
      input: [],
      expected: 0,
      description: "Empty array has LIS length 0",
    },
    {
      name: "Large numbers",
      input: [10000, 9999, 9998, 9997, 9996],
      expected: 1,
      description: "LIS: [10000] with length 1",
    },
  ];

  let passedTests = 0;
  const totalTests = testCases.length;

  for (const testCase of testCases) {
    console.log(`Test: ${testCase.name}`);
    console.log(`Input: [${testCase.input.join(", ")}]`);
    console.log(`Expected: ${testCase.expected}`);
    console.log(`Description: ${testCase.description}`);

    const result = lengthOfLIS(testCase.input);
    const passed = result === testCase.expected;

    console.log(`Result: ${result}`);
    console.log(`Status: ${passed ? "✅ PASSED" : "❌ FAILED"}`);

    if (passed) {
      passedTests++;
    } else {
      console.log(`Expected: ${testCase.expected}, Got: ${result}`);
    }

    console.log("---");
  }

  console.log(`\nTest Summary: ${passedTests}/${totalTests} tests passed`);
  console.log(
    `Tóm tắt kiểm thử: ${passedTests}/${totalTests} bài kiểm thử đã qua`
  );

  // Test with subsequence reconstruction
  console.log("\n=== Testing with Subsequence Reconstruction ===");
  console.log("=== Kiểm thử với tái tạo dãy con ===\n");

  const testArray = [10, 9, 2, 5, 3, 7, 101, 18];
  const resultWithSubsequence = lengthOfLISWithSubsequence(testArray);

  console.log(`Array: [${testArray.join(", ")}]`);
  console.log(`LIS Length: ${resultWithSubsequence.length}`);
  console.log(`LIS: [${resultWithSubsequence.subsequence.join(", ")}]`);

  // Test with all subsequences
  console.log("\n=== Testing with All Subsequences ===");
  console.log("=== Kiểm thử với tất cả dãy con ===\n");

  const testArray2 = [0, 1, 0, 3, 2, 3];
  const resultWithAll = lengthOfLISWithAllSubsequences(testArray2);

  console.log(`Array: [${testArray2.join(", ")}]`);
  console.log(`LIS Length: ${resultWithAll.length}`);
  console.log(`Number of LIS: ${resultWithAll.subsequences.length}`);
  console.log("All LIS:");
  resultWithAll.subsequences.forEach((subseq, index) => {
    console.log(`  ${index + 1}. [${subseq.join(", ")}]`);
  });

  // Performance comparison
  console.log("\n=== Performance Comparison ===");
  console.log("=== So sánh hiệu suất ===\n");

  const largeArray = Array.from({ length: 1000 }, () =>
    Math.floor(Math.random() * 10000)
  );

  console.log("Testing with large input (1,000 elements)...");
  console.log("Kiểm thử với đầu vào lớn (1,000 phần tử)...");

  const start1 = performance.now();
  const result1 = lengthOfLIS(largeArray);
  const time1 = performance.now() - start1;

  const start2 = performance.now();
  const result2 = lengthOfLISOptimal(largeArray);
  const time2 = performance.now() - start2;

  const start3 = performance.now();
  const result3 = lengthOfLISRecursive(largeArray);
  const time3 = performance.now() - start3;

  console.log(`DP (O(n²)): ${time1.toFixed(4)}ms, Result: ${result1}`);
  console.log(
    `Binary Search (O(n log n)): ${time2.toFixed(4)}ms, Result: ${result2}`
  );
  console.log(`Recursive: ${time3.toFixed(4)}ms, Result: ${result3}`);
  console.log(
    `Results match: ${
      result1 === result2 && result2 === result3 ? "✅ Yes" : "❌ No"
    }`
  );

  // Test edge cases
  console.log("\n=== Edge Cases Testing ===");
  console.log("=== Kiểm thử trường hợp đặc biệt ===\n");

  const edgeCases = [
    { name: "All negative", array: [-5, -4, -3, -2, -1] },
    { name: "Alternating", array: [1, -1, 1, -1, 1] },
    { name: "Single element", array: [42] },
    { name: "Two elements increasing", array: [1, 2] },
    { name: "Two elements decreasing", array: [2, 1] },
  ];

  for (const edgeCase of edgeCases) {
    const result = lengthOfLIS(edgeCase.array);
    console.log(
      `${edgeCase.name}: [${edgeCase.array.join(", ")}] -> ${result}`
    );
  }
}

// Run tests if this file is executed directly
if (require.main === module) {
  runTests();
}

export {
  lengthOfLIS,
  lengthOfLISOptimal,
  lengthOfLISWithSubsequence,
  lengthOfLISRecursive,
  lengthOfLISWithAllSubsequences,
};
{% endraw %}
6:["topic","dp-problems-08-longest-increasing-subsequence","d"]
0:["RvGUJ9M6JplVqkHeE7DSv",[[["",{"children":["learn",{"children":[["topic","dp-problems-08-longest-increasing-subsequence","d"],{"children":["__PAGE__?{\"topic\":\"dp-problems-08-longest-increasing-subsequence\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["learn",{"children":[["topic","dp-problems-08-longest-increasing-subsequence","d"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"max-w-6xl mx-auto px-8 py-24","children":[["$","div",null,{"className":"flex items-center gap-4 mb-8","children":["$","$L2",null,{"href":"/learn","children":["$","button",null,{"className":"flex items-center gap-2 bg-gray-100 border border-gray-300 text-gray-700 px-4 py-3 rounded-md font-medium hover:bg-gray-200 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left ","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Learn"]}]}]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8 mb-8","children":[["$","div",null,{"className":"flex items-center justify-between mb-4","children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900","children":"Longest Increasing Subsequence"}],["$","div",null,{"className":"flex gap-4","children":[["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-star ","children":[["$","polygon","8f66p6",{"points":"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"}],"$undefined"]}],"Bookmark"]}],["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-share2 ","children":[["$","circle","gq8acd",{"cx":"18","cy":"5","r":"3"}],["$","circle","w7nqdw",{"cx":"6","cy":"12","r":"3"}],["$","circle","1xt0gg",{"cx":"18","cy":"19","r":"3"}],["$","line","47mynk",{"x1":"8.59","x2":"15.42","y1":"13.51","y2":"17.49"}],["$","line","1n3mei",{"x1":"15.41","x2":"8.59","y1":"6.51","y2":"10.49"}],"$undefined"]}],"Share"]}]]}]]}],["$","div",null,{"className":"flex gap-8 mb-4","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock ","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],"2-3 hours"]}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold text-white bg-red-500","children":"Hard"}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700","children":"Dynamic Programming"}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","0",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Dynamic Programming"}],["$","span","1",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Hash Table"}],["$","span","2",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Binary Search"}],["$","span","3",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Sorting"}]]}],["$","p",null,{"className":"text-lg text-gray-700 leading-relaxed","children":" *  * Given an integer array nums, return the length of the longest strictly increasing subsequence.  *  * A subsequence is a sequence that can be derived from an array by deleting some or no elements..."}]]}],["$","div",null,{"className":"grid grid-cols-1 lg:grid-cols-3 gap-8","children":[["$","div",null,{"className":"lg:col-span-2","children":["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8","children":["$","$L3",null,{"content":"$4"}]}]}],["$","div",null,{"className":"space-y-6","children":[["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Your Progress"}],["$","div",null,{"className":"w-full bg-gray-200 rounded-full h-2 mb-2","children":["$","div",null,{"className":"bg-blue-600 h-2 rounded-full","style":{"width":"25%"}}]}],["$","p",null,{"className":"text-sm text-gray-600","children":"25% Complete"}]]}],false]}]]}]]}],null],null],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L8",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
