2:I[2972,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],""]
3:I[5907,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],"default"]
5:I[4707,[],""]
7:I[6423,[],""]
8:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
4:T2a63,
# First Bad Version



## Problem Description

 *  * You are a product manager and currently leading a team to develop a new product.  * Unfortunately, the latest version of your product fails the quality check. Since  * each version is developed based on the previous version, all the versions after  * a bad version are also bad. 

## Solutions

{% raw %}
/**
 * First Bad Version
 *
 * Problem: https://leetcode.com/problems/first-bad-version/
 *
 * You are a product manager and currently leading a team to develop a new product.
 * Unfortunately, the latest version of your product fails the quality check. Since
 * each version is developed based on the previous version, all the versions after
 * a bad version are also bad.
 *
 * Suppose you have n versions [1, 2, ..., n] and you want to find out the first
 * bad one, which causes all the following ones to be bad.
 *
 * You are given an API bool isBadVersion(version) which returns whether version
 * is bad. Implement a function to find the first bad version. You should minimize
 * the number of calls to the API.
 *
 * Example 1:
 * Input: n = 5, bad = 4
 * Output: 4
 * Explanation:
 * call isBadVersion(3) -> false
 * call isBadVersion(5) -> true
 * call isBadVersion(4) -> true
 * Then 4 is the first bad version.
 *
 * Example 2:
 * Input: n = 1, bad = 1
 * Output: 1
 *
 * Constraints:
 * - 1 <= bad <= n <= 2^31 - 1
 *
 * Solution Approach:
 * 1. Binary search to minimize API calls
 * 2. If mid version is bad, search in left half
 * 3. If mid version is good, search in right half
 * 4. Return the first bad version found
 *
 * Time Complexity: O(log n) where n is the number of versions
 * Space Complexity: O(1) as we only use a constant amount of extra space
 */

/**
 * Mock API function for testing
 *
 * Hàm API giả lập để kiểm thử
 */
let badVersion: number = 0;

function isBadVersion(version: number): boolean {
  return version >= badVersion;
}

/**
 * First Bad Version - Binary Search Solution
 *
 * Giải pháp tìm kiếm nhị phân cho bài toán Phiên bản xấu đầu tiên
 *
 * @param n - Tổng số phiên bản
 * @returns Phiên bản xấu đầu tiên
 */
function firstBadVersion(n: number): number {
  let left = 1;
  let right = n;

  while (left < right) {
    const mid = Math.floor(left + (right - left) / 2);

    if (isBadVersion(mid)) {
      // Phiên bản mid xấu, tìm kiếm ở nửa trái
      right = mid;
    } else {
      // Phiên bản mid tốt, tìm kiếm ở nửa phải
      left = mid + 1;
    }
  }

  return left;
}

/**
 * Alternative Solution: Using Math.floor
 *
 * Giải pháp thay thế: Sử dụng Math.floor
 *
 * @param n - Tổng số phiên bản
 * @returns Phiên bản xấu đầu tiên
 */
function firstBadVersionAlternative(n: number): number {
  let left = 1;
  let right = n;

  while (left < right) {
    const mid = Math.floor((left + right) / 2);

    if (isBadVersion(mid)) {
      right = mid;
    } else {
      left = mid + 1;
    }
  }

  return left;
}

/**
 * Solution with API Call Counting
 *
 * Giải pháp với đếm số lần gọi API
 *
 * @param n - Tổng số phiên bản
 * @returns Object chứa phiên bản xấu đầu tiên và số lần gọi API
 */
function firstBadVersionWithCount(n: number): {
  firstBad: number;
  apiCalls: number;
} {
  let left = 1;
  let right = n;
  let apiCalls = 0;

  while (left < right) {
    const mid = Math.floor(left + (right - left) / 2);

    apiCalls++;
    if (isBadVersion(mid)) {
      right = mid;
    } else {
      left = mid + 1;
    }
  }

  return { firstBad: left, apiCalls };
}

/**
 * Linear Search Solution (for comparison)
 *
 * Giải pháp tìm kiếm tuyến tính (để so sánh)
 *
 * @param n - Tổng số phiên bản
 * @returns Phiên bản xấu đầu tiên
 */
function firstBadVersionLinear(n: number): number {
  for (let i = 1; i <= n; i++) {
    if (isBadVersion(i)) {
      return i;
    }
  }

  return n; // Tất cả phiên bản đều xấu
}

/**
 * Solution with Version History
 *
 * Giải pháp với lịch sử phiên bản
 *
 * @param n - Tổng số phiên bản
 * @returns Object chứa kết quả và lịch sử kiểm tra
 */
function firstBadVersionWithHistory(n: number): {
  firstBad: number;
  history: Array<{ version: number; isBad: boolean }>;
} {
  let left = 1;
  let right = n;
  const history: Array<{ version: number; isBad: boolean }> = [];

  while (left < right) {
    const mid = Math.floor(left + (right - left) / 2);

    const isBad = isBadVersion(mid);
    history.push({ version: mid, isBad });

    if (isBad) {
      right = mid;
    } else {
      left = mid + 1;
    }
  }

  return { firstBad: left, history };
}

/**
 * Recursive Binary Search Solution
 *
 * Giải pháp tìm kiếm nhị phân đệ quy
 *
 * @param n - Tổng số phiên bản
 * @returns Phiên bản xấu đầu tiên
 */
function firstBadVersionRecursive(n: number): number {
  function binarySearch(left: number, right: number): number {
    if (left >= right) {
      return left;
    }

    const mid = Math.floor(left + (right - left) / 2);

    if (isBadVersion(mid)) {
      return binarySearch(left, mid);
    } else {
      return binarySearch(mid + 1, right);
    }
  }

  return binarySearch(1, n);
}

// Test cases / Các trường hợp kiểm thử
function runTests() {
  console.log("=== First Bad Version Tests ===");
  console.log("=== Kiểm thử bài toán Phiên bản xấu đầu tiên ===\n");

  const testCases = [
    {
      name: "Example 1: n=5, bad=4",
      n: 5,
      bad: 4,
      expected: 4,
      description: "First bad version is 4",
    },
    {
      name: "Example 2: n=1, bad=1",
      n: 1,
      bad: 1,
      expected: 1,
      description: "Only one version and it's bad",
    },
    {
      name: "n=10, bad=1",
      n: 10,
      bad: 1,
      expected: 1,
      description: "First version is bad",
    },
    {
      name: "n=10, bad=10",
      n: 10,
      bad: 10,
      expected: 10,
      description: "Last version is bad",
    },
    {
      name: "n=100, bad=50",
      n: 100,
      bad: 50,
      expected: 50,
      description: "Middle version is bad",
    },
    {
      name: "n=1000, bad=1",
      n: 1000,
      bad: 1,
      expected: 1,
      description: "Large n, first version bad",
    },
    {
      name: "n=1000, bad=1000",
      n: 1000,
      bad: 1000,
      expected: 1000,
      description: "Large n, last version bad",
    },
  ];

  let passedTests = 0;
  const totalTests = testCases.length;

  for (const testCase of testCases) {
    console.log(`Test: ${testCase.name}`);
    console.log(`Input: n=${testCase.n}, bad=${testCase.bad}`);
    console.log(`Expected: ${testCase.expected}`);
    console.log(`Description: ${testCase.description}`);

    // Set the bad version for this test
    badVersion = testCase.bad;

    const result = firstBadVersion(testCase.n);
    const passed = result === testCase.expected;

    console.log(`Result: ${result}`);
    console.log(`Status: ${passed ? "✅ PASSED" : "❌ FAILED"}`);

    if (passed) {
      passedTests++;
    } else {
      console.log(`Expected: ${testCase.expected}, Got: ${result}`);
    }

    console.log("---");
  }

  console.log(`\nTest Summary: ${passedTests}/${totalTests} tests passed`);
  console.log(
    `Tóm tắt kiểm thử: ${passedTests}/${totalTests} bài kiểm thử đã qua`
  );

  // Test with API call counting
  console.log("\n=== Testing with API Call Counting ===");
  console.log("=== Kiểm thử với đếm số lần gọi API ===\n");

  const testN = 100;
  const testBad = 50;
  badVersion = testBad;

  const resultWithCount = firstBadVersionWithCount(testN);
  console.log(`n=${testN}, bad=${testBad}`);
  console.log(`First bad version: ${resultWithCount.firstBad}`);
  console.log(`API calls: ${resultWithCount.apiCalls}`);
  console.log(`Expected API calls: ~${Math.ceil(Math.log2(testN))}`);

  // Test with history
  console.log("\n=== Testing with History ===");
  console.log("=== Kiểm thử với lịch sử ===\n");

  const resultWithHistory = firstBadVersionWithHistory(20);
  console.log(`n=20, bad=${badVersion}`);
  console.log(`First bad version: ${resultWithHistory.firstBad}`);
  console.log("API call history:");
  console.log("Lịch sử gọi API:");
  resultWithHistory.history.forEach((call, index) => {
    console.log(
      `  ${index + 1}. isBadVersion(${call.version}) -> ${call.isBad}`
    );
  });

  // Performance comparison
  console.log("\n=== Performance Comparison ===");
  console.log("=== So sánh hiệu suất ===\n");

  const largeN = 1000000;
  const largeBad = 500000;
  badVersion = largeBad;

  console.log(`Testing with large input: n=${largeN}, bad=${largeBad}`);
  console.log(`Kiểm thử với đầu vào lớn: n=${largeN}, bad=${largeBad}`);

  const start1 = performance.now();
  const result1 = firstBadVersion(largeN);
  const time1 = performance.now() - start1;

  const start2 = performance.now();
  const result2 = firstBadVersionAlternative(largeN);
  const time2 = performance.now() - start2;

  const start3 = performance.now();
  const result3 = firstBadVersionRecursive(largeN);
  const time3 = performance.now() - start3;

  console.log(`Binary Search: ${time1.toFixed(4)}ms, Result: ${result1}`);
  console.log(`Alternative: ${time2.toFixed(4)}ms, Result: ${result2}`);
  console.log(`Recursive: ${time3.toFixed(4)}ms, Result: ${result3}`);
  console.log(
    `Results match: ${
      result1 === result2 && result2 === result3 ? "✅ Yes" : "❌ No"
    }`
  );

  // Compare with linear search for small input
  console.log("\n=== Linear vs Binary Search (small input) ===");
  console.log("=== Tìm kiếm tuyến tính vs nhị phân (đầu vào nhỏ) ===\n");

  const smallN = 1000;
  const smallBad = 500;
  badVersion = smallBad;

  const startLinear = performance.now();
  const resultLinear = firstBadVersionLinear(smallN);
  const timeLinear = performance.now() - startLinear;

  const startBinary = performance.now();
  const resultBinary = firstBadVersion(smallN);
  const timeBinary = performance.now() - startBinary;

  console.log(
    `Linear Search: ${timeLinear.toFixed(4)}ms, Result: ${resultLinear}`
  );
  console.log(
    `Binary Search: ${timeBinary.toFixed(4)}ms, Result: ${resultBinary}`
  );
  console.log(`Speedup: ${(timeLinear / timeBinary).toFixed(2)}x faster`);
  console.log(
    `Results match: ${resultLinear === resultBinary ? "✅ Yes" : "❌ No"}`
  );
}

// Run tests if this file is executed directly
if (require.main === module) {
  runTests();
}

export {
  firstBadVersion,
  firstBadVersionAlternative,
  firstBadVersionWithCount,
  firstBadVersionLinear,
  firstBadVersionWithHistory,
  firstBadVersionRecursive,
  isBadVersion,
};
{% endraw %}
6:["topic","sorting-searching-problems-02-first-bad-version","d"]
0:["oobj7aMCDDjl3b-JX299a",[[["",{"children":["learn",{"children":[["topic","sorting-searching-problems-02-first-bad-version","d"],{"children":["__PAGE__?{\"topic\":\"sorting-searching-problems-02-first-bad-version\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["learn",{"children":[["topic","sorting-searching-problems-02-first-bad-version","d"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"max-w-6xl mx-auto px-8 py-24","children":[["$","div",null,{"className":"flex items-center gap-4 mb-8","children":["$","$L2",null,{"href":"/learn","children":["$","button",null,{"className":"flex items-center gap-2 bg-gray-100 border border-gray-300 text-gray-700 px-4 py-3 rounded-md font-medium hover:bg-gray-200 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left ","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Learn"]}]}]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8 mb-8","children":[["$","div",null,{"className":"flex items-center justify-between mb-4","children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900","children":"First Bad Version"}],["$","div",null,{"className":"flex gap-4","children":[["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-star ","children":[["$","polygon","8f66p6",{"points":"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"}],"$undefined"]}],"Bookmark"]}],["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-share2 ","children":[["$","circle","gq8acd",{"cx":"18","cy":"5","r":"3"}],["$","circle","w7nqdw",{"cx":"6","cy":"12","r":"3"}],["$","circle","1xt0gg",{"cx":"18","cy":"19","r":"3"}],["$","line","47mynk",{"x1":"8.59","x2":"15.42","y1":"13.51","y2":"17.49"}],["$","line","1n3mei",{"x1":"15.41","x2":"8.59","y1":"6.51","y2":"10.49"}],"$undefined"]}],"Share"]}]]}]]}],["$","div",null,{"className":"flex gap-8 mb-4","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock ","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],"2-3 hours"]}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold text-white bg-red-500","children":"Hard"}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700","children":"Sorting/Searching"}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","0",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Sorting/Searching"}],["$","span","1",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Hash Table"}],["$","span","2",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Binary Search"}]]}],["$","p",null,{"className":"text-lg text-gray-700 leading-relaxed","children":" *  * You are a product manager and currently leading a team to develop a new product.  * Unfortunately, the latest version of your product fails the quality check. Since  * each version is developed ..."}]]}],["$","div",null,{"className":"grid grid-cols-1 lg:grid-cols-3 gap-8","children":[["$","div",null,{"className":"lg:col-span-2","children":["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8","children":["$","$L3",null,{"content":"$4"}]}]}],["$","div",null,{"className":"space-y-6","children":[["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Your Progress"}],["$","div",null,{"className":"w-full bg-gray-200 rounded-full h-2 mb-2","children":["$","div",null,{"className":"bg-blue-600 h-2 rounded-full","style":{"width":"25%"}}]}],["$","p",null,{"className":"text-sm text-gray-600","children":"25% Complete"}]]}],false]}]]}]]}],null],null],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L8",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
