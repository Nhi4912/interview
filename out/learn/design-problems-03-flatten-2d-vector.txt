2:I[2972,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],""]
3:I[5907,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],"default"]
5:I[4707,[],""]
7:I[6423,[],""]
8:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
4:T2a3a,
# Flatten 2D Vector



## Problem Description

 *  * Design an iterator to flatten a 2D vector. It should support the following operations:  * - next and hasNext.  *  * Implement the Vector2D class: 

## Solutions

{% raw %}
/**
 * Flatten 2D Vector
 *
 * Problem: https://leetcode.com/problems/flatten-2d-vector/
 *
 * Design an iterator to flatten a 2D vector. It should support the following operations:
 * - next and hasNext.
 *
 * Implement the Vector2D class:
 * - Vector2D(int[][] vec) initializes the object with the 2D vector vec.
 * - int next() returns the next element from the 2D vector and moves the pointer one step forward.
 * - boolean hasNext() returns true if there are still some elements in the vector, and false otherwise.
 *
 * Example 1:
 * Input: ["Vector2D", "next", "next", "next", "hasNext", "hasNext", "next", "hasNext"]
 * [[[[1, 2], [3], [4]]], [], [], [], [], [], [], []]
 * Output: [null, 1, 2, 3, true, true, 4, false]
 *
 * Explanation:
 * Vector2D vector2D = new Vector2D([[1, 2], [3], [4]]);
 * vector2D.next();    // return 1
 * vector2D.next();    // return 2
 * vector2D.next();    // return 3
 * vector2D.hasNext(); // return True
 * vector2D.hasNext(); // return True
 * vector2D.next();    // return 4
 * vector2D.hasNext(); // return False
 *
 * Constraints:
 * - 0 <= vec.length <= 200
 * - 0 <= vec[i].length <= 500
 * - -1000 <= vec[i][j] <= 1000
 * - At most 10^5 calls will be made to next and hasNext in total.
 *
 * Solution Approach:
 * 1. Store the 2D vector and current position
 * 2. Use two pointers: outer index for rows, inner index for columns
 * 3. Skip empty rows when moving to next element
 * 4. Update pointers after each next() call
 *
 * Time Complexity: O(1) average for next() and hasNext()
 * Space Complexity: O(1) extra space
 */

/**
 * Vector2D class for flattening 2D vector
 *
 * Lớp Vector2D để làm phẳng vector 2D
 */
class Vector2D {
  private vec: number[][];
  private outerIndex: number;
  private innerIndex: number;

  constructor(vec: number[][]) {
    this.vec = vec;
    this.outerIndex = 0;
    this.innerIndex = 0;

    // Move to first non-empty row
    this.moveToNext();
  }

  /**
   * Move to the next valid position
   *
   * Di chuyển đến vị trí hợp lệ tiếp theo
   */
  private moveToNext(): void {
    // Skip empty rows
    while (
      this.outerIndex < this.vec.length &&
      this.innerIndex >= this.vec[this.outerIndex].length
    ) {
      this.outerIndex++;
      this.innerIndex = 0;
    }
  }

  /**
   * Get the next element from the 2D vector
   *
   * Lấy phần tử tiếp theo từ vector 2D
   *
   * @returns Phần tử tiếp theo
   */
  next(): number {
    if (!this.hasNext()) {
      throw new Error("No more elements");
    }

    const result = this.vec[this.outerIndex][this.innerIndex];
    this.innerIndex++;

    // Move to next valid position
    this.moveToNext();

    return result;
  }

  /**
   * Check if there are more elements
   *
   * Kiểm tra xem còn phần tử nào không
   *
   * @returns true nếu còn phần tử, false nếu không
   */
  hasNext(): boolean {
    return (
      this.outerIndex < this.vec.length &&
      this.innerIndex < this.vec[this.outerIndex].length
    );
  }
}

/**
 * Alternative Implementation: Using Queue
 *
 * Giải pháp thay thế: Sử dụng Queue
 */
class Vector2DQueue {
  private queue: number[];

  constructor(vec: number[][]) {
    this.queue = [];

    // Flatten the 2D vector into a queue
    for (const row of vec) {
      for (const element of row) {
        this.queue.push(element);
      }
    }
  }

  next(): number {
    if (!this.hasNext()) {
      throw new Error("No more elements");
    }

    return this.queue.shift()!;
  }

  hasNext(): boolean {
    return this.queue.length > 0;
  }
}

/**
 * Implementation with Reset Functionality
 *
 * Giải pháp với chức năng đặt lại
 */
class Vector2DWithReset {
  private vec: number[][];
  private outerIndex: number;
  private innerIndex: number;
  private originalOuterIndex: number;
  private originalInnerIndex: number;

  constructor(vec: number[][]) {
    this.vec = vec;
    this.outerIndex = 0;
    this.innerIndex = 0;
    this.originalOuterIndex = 0;
    this.originalInnerIndex = 0;

    this.moveToNext();
  }

  private moveToNext(): void {
    while (
      this.outerIndex < this.vec.length &&
      this.innerIndex >= this.vec[this.outerIndex].length
    ) {
      this.outerIndex++;
      this.innerIndex = 0;
    }
  }

  next(): number {
    if (!this.hasNext()) {
      throw new Error("No more elements");
    }

    const result = this.vec[this.outerIndex][this.innerIndex];
    this.innerIndex++;

    this.moveToNext();

    return result;
  }

  hasNext(): boolean {
    return (
      this.outerIndex < this.vec.length &&
      this.innerIndex < this.vec[this.outerIndex].length
    );
  }

  /**
   * Reset the iterator to the beginning
   *
   * Đặt lại iterator về đầu
   */
  reset(): void {
    this.outerIndex = this.originalOuterIndex;
    this.innerIndex = this.originalInnerIndex;
    this.moveToNext();
  }

  /**
   * Get current position
   *
   * Lấy vị trí hiện tại
   */
  getCurrentPosition(): { outer: number; inner: number } {
    return { outer: this.outerIndex, inner: this.innerIndex };
  }
}

/**
 * Implementation with Peek Functionality
 *
 * Giải pháp với chức năng xem trước
 */
class Vector2DWithPeek {
  private vec: number[][];
  private outerIndex: number;
  private innerIndex: number;

  constructor(vec: number[][]) {
    this.vec = vec;
    this.outerIndex = 0;
    this.innerIndex = 0;

    this.moveToNext();
  }

  private moveToNext(): void {
    while (
      this.outerIndex < this.vec.length &&
      this.innerIndex >= this.vec[this.outerIndex].length
    ) {
      this.outerIndex++;
      this.innerIndex = 0;
    }
  }

  next(): number {
    if (!this.hasNext()) {
      throw new Error("No more elements");
    }

    const result = this.vec[this.outerIndex][this.innerIndex];
    this.innerIndex++;

    this.moveToNext();

    return result;
  }

  hasNext(): boolean {
    return (
      this.outerIndex < this.vec.length &&
      this.innerIndex < this.vec[this.outerIndex].length
    );
  }

  /**
   * Peek at the next element without moving the pointer
   *
   * Xem phần tử tiếp theo mà không di chuyển con trỏ
   *
   * @returns Phần tử tiếp theo hoặc null nếu không có
   */
  peek(): number | null {
    if (!this.hasNext()) {
      return null;
    }

    return this.vec[this.outerIndex][this.innerIndex];
  }
}

// Test cases / Các trường hợp kiểm thử
function runTests() {
  console.log("=== Flatten 2D Vector Tests ===");
  console.log("=== Kiểm thử bài toán Làm phẳng Vector 2D ===\n");

  const testCases = [
    {
      name: "Example 1: Basic case",
      input: [[1, 2], [3], [4]],
      description: "Standard 2D vector with mixed row lengths",
    },
    {
      name: "Empty vector",
      input: [],
      description: "Empty 2D vector",
    },
    {
      name: "Single element",
      input: [[5]],
      description: "Vector with single element",
    },
    {
      name: "Empty rows",
      input: [[], [1, 2], [], [3], []],
      description: "Vector with empty rows",
    },
    {
      name: "All empty rows",
      input: [[], [], []],
      description: "Vector with all empty rows",
    },
    {
      name: "Large vector",
      input: [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]],
      description: "Vector with multiple rows of different lengths",
    },
  ];

  for (const testCase of testCases) {
    console.log(`Test: ${testCase.name}`);
    console.log(`Input: ${JSON.stringify(testCase.input)}`);
    console.log(`Description: ${testCase.description}`);

    const vector2D = new Vector2D(testCase.input);

    console.log("Iteration results:");
    console.log("Kết quả lặp:");
    let count = 0;
    while (vector2D.hasNext() && count < 20) {
      // Limit to prevent infinite loop
      const element = vector2D.next();
      console.log(`  ${count + 1}. ${element}`);
      count++;
    }

    if (!vector2D.hasNext()) {
      console.log("  No more elements");
    }

    console.log("---");
  }

  // Test with reset functionality
  console.log("\n=== Testing with Reset Functionality ===");
  console.log("=== Kiểm thử với chức năng đặt lại ===\n");

  const testVector = [[1, 2], [3], [4]];
  const vectorWithReset = new Vector2DWithReset(testVector);

  console.log("First iteration:");
  console.log("Lần lặp đầu tiên:");
  while (vectorWithReset.hasNext()) {
    console.log(`  ${vectorWithReset.next()}`);
  }

  console.log("\nResetting...");
  console.log("Đang đặt lại...");
  vectorWithReset.reset();

  console.log("Second iteration after reset:");
  console.log("Lần lặp thứ hai sau khi đặt lại:");
  while (vectorWithReset.hasNext()) {
    console.log(`  ${vectorWithReset.next()}`);
  }

  // Test with peek functionality
  console.log("\n=== Testing with Peek Functionality ===");
  console.log("=== Kiểm thử với chức năng xem trước ===\n");

  const vectorWithPeek = new Vector2DWithPeek([[1, 2], [3], [4]]);

  console.log("Peeking without consuming:");
  console.log("Xem trước mà không tiêu thụ:");
  while (vectorWithPeek.hasNext()) {
    const peeked = vectorWithPeek.peek();
    const next = vectorWithPeek.next();
    console.log(`  Peeked: ${peeked}, Next: ${next}`);
  }

  // Performance comparison
  console.log("\n=== Performance Comparison ===");
  console.log("=== So sánh hiệu suất ===\n");

  const largeVector = Array.from({ length: 1000 }, (_, i) =>
    Array.from(
      { length: Math.floor(Math.random() * 10) + 1 },
      (_, j) => i * 1000 + j
    )
  );

  console.log("Testing with large vector (1000 rows)...");
  console.log("Kiểm thử với vector lớn (1000 hàng)...");

  const start1 = performance.now();
  const vector1 = new Vector2D(largeVector);
  let count1 = 0;
  while (vector1.hasNext()) {
    vector1.next();
    count1++;
  }
  const time1 = performance.now() - start1;

  const start2 = performance.now();
  const vector2 = new Vector2DQueue(largeVector);
  let count2 = 0;
  while (vector2.hasNext()) {
    vector2.next();
    count2++;
  }
  const time2 = performance.now() - start2;

  console.log(`Two Pointers: ${time1.toFixed(4)}ms, ${count1} elements`);
  console.log(`Queue: ${time2.toFixed(4)}ms, ${count2} elements`);
  console.log(`Results match: ${count1 === count2 ? "✅ Yes" : "❌ No"}`);
}

// Run tests if this file is executed directly
if (require.main === module) {
  runTests();
}

export { Vector2D, Vector2DQueue, Vector2DWithReset, Vector2DWithPeek };
{% endraw %}
6:["topic","design-problems-03-flatten-2d-vector","d"]
0:["fejmt13PAtxRD63R9Wq_i",[[["",{"children":["learn",{"children":[["topic","design-problems-03-flatten-2d-vector","d"],{"children":["__PAGE__?{\"topic\":\"design-problems-03-flatten-2d-vector\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["learn",{"children":[["topic","design-problems-03-flatten-2d-vector","d"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"max-w-6xl mx-auto px-8 py-24","children":[["$","div",null,{"className":"flex items-center gap-4 mb-8","children":["$","$L2",null,{"href":"/learn","children":["$","button",null,{"className":"flex items-center gap-2 bg-gray-100 border border-gray-300 text-gray-700 px-4 py-3 rounded-md font-medium hover:bg-gray-200 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left ","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Learn"]}]}]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8 mb-8","children":[["$","div",null,{"className":"flex items-center justify-between mb-4","children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900","children":"Flatten 2D Vector"}],["$","div",null,{"className":"flex gap-4","children":[["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-star ","children":[["$","polygon","8f66p6",{"points":"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"}],"$undefined"]}],"Bookmark"]}],["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-share2 ","children":[["$","circle","gq8acd",{"cx":"18","cy":"5","r":"3"}],["$","circle","w7nqdw",{"cx":"6","cy":"12","r":"3"}],["$","circle","1xt0gg",{"cx":"18","cy":"19","r":"3"}],["$","line","47mynk",{"x1":"8.59","x2":"15.42","y1":"13.51","y2":"17.49"}],["$","line","1n3mei",{"x1":"15.41","x2":"8.59","y1":"6.51","y2":"10.49"}],"$undefined"]}],"Share"]}]]}]]}],["$","div",null,{"className":"flex gap-8 mb-4","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock ","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],"2-3 hours"]}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold text-white bg-red-500","children":"Easy"}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700","children":"Design"}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","0",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Design"}],["$","span","1",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Two Pointers"}]]}],["$","p",null,{"className":"text-lg text-gray-700 leading-relaxed","children":" *  * Design an iterator to flatten a 2D vector. It should support the following operations:  * - next and hasNext.  *  * Implement the Vector2D class: ..."}]]}],["$","div",null,{"className":"grid grid-cols-1 lg:grid-cols-3 gap-8","children":[["$","div",null,{"className":"lg:col-span-2","children":["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8","children":["$","$L3",null,{"content":"$4"}]}]}],["$","div",null,{"className":"space-y-6","children":[["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Your Progress"}],["$","div",null,{"className":"w-full bg-gray-200 rounded-full h-2 mb-2","children":["$","div",null,{"className":"bg-blue-600 h-2 rounded-full","style":{"width":"25%"}}]}],["$","p",null,{"className":"text-sm text-gray-600","children":"25% Complete"}]]}],false]}]]}]]}],null],null],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L8",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
