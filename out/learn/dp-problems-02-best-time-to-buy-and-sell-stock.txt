2:I[2972,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],""]
3:I[5907,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],"default"]
5:I[4707,[],""]
7:I[6423,[],""]
8:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
4:T1cc4,
# Best Time to Buy and Sell Stock



## Problem Description

 *  * You are given an array prices where prices[i] is the price of a given stock on the ith day.  * You want to maximize your profit by choosing a single day to buy one stock and choosing  * a different day in the future to sell that stock.  * 

## Solutions

{% raw %}
/**
 * Best Time to Buy and Sell Stock
 *
 * Problem: https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
 *
 * You are given an array prices where prices[i] is the price of a given stock on the ith day.
 * You want to maximize your profit by choosing a single day to buy one stock and choosing
 * a different day in the future to sell that stock.
 *
 * Return the maximum profit you can achieve from this transaction. If you cannot achieve
 * any profit, return 0.
 *
 * Example 1:
 * Input: prices = [7,1,5,3,6,4]
 * Output: 5
 * Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
 * Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
 *
 * Example 2:
 * Input: prices = [7,6,4,3,1]
 * Output: 0
 * Explanation: In this case, no transactions are done and the max profit = 0.
 *
 * Constraints:
 * - 1 <= prices.length <= 10^5
 * - 0 <= prices[i] <= 10^4
 *
 * Solution Approach:
 * 1. One Pass Algorithm (Kadane's Algorithm variant)
 * 2. Keep track of minimum price seen so far
 * 3. Calculate potential profit at each step
 * 4. Update maximum profit if current profit is higher
 *
 * Time Complexity: O(n) where n is the length of prices array
 * Space Complexity: O(1) as we only use a constant amount of extra space
 */

/**
 * Best Time to Buy and Sell Stock - One Pass Solution
 *
 * Thuật toán một lần duyệt (biến thể của thuật toán Kadane)
 *
 * @param prices - Mảng giá cổ phiếu theo ngày
 * @returns Lợi nhuận tối đa có thể đạt được
 */
function maxProfit(prices: number[]): number {
  if (prices.length < 2) return 0;

  let minPrice = prices[0]; // Giá thấp nhất đã thấy
  let maxProfit = 0; // Lợi nhuận tối đa

  for (let i = 1; i < prices.length; i++) {
    // Cập nhật giá thấp nhất nếu tìm thấy giá thấp hơn
    minPrice = Math.min(minPrice, prices[i]);

    // Tính lợi nhuận tiềm năng nếu bán tại ngày hiện tại
    const currentProfit = prices[i] - minPrice;

    // Cập nhật lợi nhuận tối đa nếu lợi nhuận hiện tại cao hơn
    maxProfit = Math.max(maxProfit, currentProfit);
  }

  return maxProfit;
}

/**
 * Alternative Solution: Two Pointers Approach
 *
 * Giải pháp thay thế: Sử dụng hai con trỏ
 *
 * @param prices - Mảng giá cổ phiếu theo ngày
 * @returns Lợi nhuận tối đa có thể đạt được
 */
function maxProfitTwoPointers(prices: number[]): number {
  if (prices.length < 2) return 0;

  let buy = 0; // Con trỏ mua
  let sell = 1; // Con trỏ bán
  let maxProfit = 0;

  while (sell < prices.length) {
    const profit = prices[sell] - prices[buy];

    if (profit > 0) {
      // Có lợi nhuận, cập nhật maxProfit
      maxProfit = Math.max(maxProfit, profit);
    } else {
      // Không có lợi nhuận, di chuyển con trỏ mua
      buy = sell;
    }

    sell++;
  }

  return maxProfit;
}

/**
 * Brute Force Solution (for comparison)
 *
 * Giải pháp vét cạn (để so sánh)
 *
 * @param prices - Mảng giá cổ phiếu theo ngày
 * @returns Lợi nhuận tối đa có thể đạt được
 */
function maxProfitBruteForce(prices: number[]): number {
  let maxProfit = 0;

  for (let i = 0; i < prices.length - 1; i++) {
    for (let j = i + 1; j < prices.length; j++) {
      const profit = prices[j] - prices[i];
      maxProfit = Math.max(maxProfit, profit);
    }
  }

  return maxProfit;
}

// Test cases / Các trường hợp kiểm thử
function runTests() {
  console.log("=== Best Time to Buy and Sell Stock Tests ===");
  console.log("=== Kiểm thử bài toán Mua bán cổ phiếu ===\n");

  const testCases = [
    {
      name: "Example 1: Normal case with profit",
      input: [7, 1, 5, 3, 6, 4],
      expected: 5,
      description: "Buy at 1, sell at 6 = profit of 5",
    },
    {
      name: "Example 2: No profit possible",
      input: [7, 6, 4, 3, 1],
      expected: 0,
      description: "Prices only decrease, no profit possible",
    },
    {
      name: "Single day",
      input: [5],
      expected: 0,
      description: "Cannot buy and sell on same day",
    },
    {
      name: "Two days - profit",
      input: [3, 8],
      expected: 5,
      description: "Buy at 3, sell at 8 = profit of 5",
    },
    {
      name: "Two days - no profit",
      input: [8, 3],
      expected: 0,
      description: "Price decreases, no profit",
    },
    {
      name: "All same prices",
      input: [5, 5, 5, 5],
      expected: 0,
      description: "No price difference, no profit",
    },
    {
      name: "Large profit at end",
      input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      expected: 9,
      description: "Buy at 1, sell at 10 = profit of 9",
    },
    {
      name: "Large profit at beginning",
      input: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],
      expected: 0,
      description: "Prices only decrease, no profit",
    },
    {
      name: "Profit in middle",
      input: [3, 2, 6, 5, 0, 3],
      expected: 4,
      description: "Buy at 2, sell at 6 = profit of 4",
    },
  ];

  let passedTests = 0;
  const totalTests = testCases.length;

  for (const testCase of testCases) {
    console.log(`Test: ${testCase.name}`);
    console.log(`Input: [${testCase.input.join(", ")}]`);
    console.log(`Expected: ${testCase.expected}`);
    console.log(`Description: ${testCase.description}`);

    const result = maxProfit(testCase.input);
    const passed = result === testCase.expected;

    console.log(`Result: ${result}`);
    console.log(`Status: ${passed ? "✅ PASSED" : "❌ FAILED"}`);

    if (passed) {
      passedTests++;
    } else {
      console.log(`Expected: ${testCase.expected}, Got: ${result}`);
    }

    console.log("---");
  }

  console.log(`\nTest Summary: ${passedTests}/${totalTests} tests passed`);
  console.log(
    `Tóm tắt kiểm thử: ${passedTests}/${totalTests} bài kiểm thử đã qua`
  );

  // Performance comparison / So sánh hiệu suất
  console.log("\n=== Performance Comparison ===");
  console.log("=== So sánh hiệu suất ===\n");

  const largeInput = Array.from({ length: 10000 }, (_, i) =>
    Math.floor(Math.random() * 1000)
  );

  console.log("Testing with large input (10,000 elements)...");
  console.log("Kiểm thử với dữ liệu lớn (10,000 phần tử)...");

  const start1 = performance.now();
  const result1 = maxProfit(largeInput);
  const time1 = performance.now() - start1;

  const start2 = performance.now();
  const result2 = maxProfitTwoPointers(largeInput);
  const time2 = performance.now() - start2;

  console.log(`One Pass Solution: ${time1.toFixed(4)}ms`);
  console.log(`Two Pointers Solution: ${time2.toFixed(4)}ms`);
  console.log(`Results match: ${result1 === result2 ? "✅ Yes" : "❌ No"}`);
}

// Run tests if this file is executed directly
if (require.main === module) {
  runTests();
}

export { maxProfit, maxProfitTwoPointers, maxProfitBruteForce };
{% endraw %}
6:["topic","dp-problems-02-best-time-to-buy-and-sell-stock","d"]
0:["oobj7aMCDDjl3b-JX299a",[[["",{"children":["learn",{"children":[["topic","dp-problems-02-best-time-to-buy-and-sell-stock","d"],{"children":["__PAGE__?{\"topic\":\"dp-problems-02-best-time-to-buy-and-sell-stock\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["learn",{"children":[["topic","dp-problems-02-best-time-to-buy-and-sell-stock","d"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"max-w-6xl mx-auto px-8 py-24","children":[["$","div",null,{"className":"flex items-center gap-4 mb-8","children":["$","$L2",null,{"href":"/learn","children":["$","button",null,{"className":"flex items-center gap-2 bg-gray-100 border border-gray-300 text-gray-700 px-4 py-3 rounded-md font-medium hover:bg-gray-200 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left ","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Learn"]}]}]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8 mb-8","children":[["$","div",null,{"className":"flex items-center justify-between mb-4","children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900","children":"Best Time to Buy and Sell Stock"}],["$","div",null,{"className":"flex gap-4","children":[["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-star ","children":[["$","polygon","8f66p6",{"points":"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"}],"$undefined"]}],"Bookmark"]}],["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-share2 ","children":[["$","circle","gq8acd",{"cx":"18","cy":"5","r":"3"}],["$","circle","w7nqdw",{"cx":"6","cy":"12","r":"3"}],["$","circle","1xt0gg",{"cx":"18","cy":"19","r":"3"}],["$","line","47mynk",{"x1":"8.59","x2":"15.42","y1":"13.51","y2":"17.49"}],["$","line","1n3mei",{"x1":"15.41","x2":"8.59","y1":"6.51","y2":"10.49"}],"$undefined"]}],"Share"]}]]}]]}],["$","div",null,{"className":"flex gap-8 mb-4","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock ","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],"2-3 hours"]}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold text-white bg-red-500","children":"Hard"}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700","children":"Dynamic Programming"}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","0",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Dynamic Programming"}],["$","span","1",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Two Pointers"}]]}],["$","p",null,{"className":"text-lg text-gray-700 leading-relaxed","children":" *  * You are given an array prices where prices[i] is the price of a given stock on the ith day.  * You want to maximize your profit by choosing a single day to buy one stock and choosing  * a differ..."}]]}],["$","div",null,{"className":"grid grid-cols-1 lg:grid-cols-3 gap-8","children":[["$","div",null,{"className":"lg:col-span-2","children":["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8","children":["$","$L3",null,{"content":"$4"}]}]}],["$","div",null,{"className":"space-y-6","children":[["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Your Progress"}],["$","div",null,{"className":"w-full bg-gray-200 rounded-full h-2 mb-2","children":["$","div",null,{"className":"bg-blue-600 h-2 rounded-full","style":{"width":"25%"}}]}],["$","p",null,{"className":"text-sm text-gray-600","children":"25% Complete"}]]}],false]}]]}]]}],null],null],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L8",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
