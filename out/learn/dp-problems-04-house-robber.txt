2:I[2972,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],""]
3:I[5907,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],"default"]
5:I[4707,[],""]
7:I[6423,[],""]
8:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
4:T25f2,
# House Robber



## Problem Description

 *  * You are a professional robber planning to rob houses along a street. Each house has  * a certain amount of money stashed, the only constraint stopping you from robbing each  * of them is that adjacent houses have security systems connected and it will automatically  * contact the police if two adjacent houses were broken into on the same night. 

## Solutions

{% raw %}
/**
 * House Robber
 *
 * Problem: https://leetcode.com/problems/house-robber/
 *
 * You are a professional robber planning to rob houses along a street. Each house has
 * a certain amount of money stashed, the only constraint stopping you from robbing each
 * of them is that adjacent houses have security systems connected and it will automatically
 * contact the police if two adjacent houses were broken into on the same night.
 *
 * Given an integer array nums representing the amount of money of each house, return the
 * maximum amount of money you can rob tonight without alerting the police.
 *
 * Example 1:
 * Input: nums = [1,2,3,1]
 * Output: 4
 * Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
 * Total amount you can rob = 1 + 3 = 4.
 *
 * Example 2:
 * Input: nums = [2,7,9,3,1]
 * Output: 12
 * Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
 * Total amount you can rob = 2 + 9 + 1 = 12.
 *
 * Constraints:
 * - 1 <= nums.length <= 100
 * - 0 <= nums[i] <= 400
 *
 * Solution Approach:
 * 1. Dynamic Programming with state machine
 * 2. At each house, we have two choices: rob or don't rob
 * 3. If we rob current house, we can't rob previous house
 * 4. If we don't rob current house, we can take max of previous states
 *
 * Time Complexity: O(n) where n is the length of nums array
 * Space Complexity: O(1) as we only use a constant amount of extra space
 */

/**
 * House Robber - Dynamic Programming Solution
 *
 * Giải pháp Quy hoạch động cho bài toán Cướp nhà
 *
 * @param nums - Mảng số tiền trong mỗi ngôi nhà
 * @returns Số tiền tối đa có thể cướp được
 */
function rob(nums: number[]): number {
  if (nums.length === 0) return 0;
  if (nums.length === 1) return nums[0];
  if (nums.length === 2) return Math.max(nums[0], nums[1]);

  // prev2: tổng tiền tối đa cách 2 nhà trước
  // prev1: tổng tiền tối đa cách 1 nhà trước
  let prev2 = nums[0];
  let prev1 = Math.max(nums[0], nums[1]);

  for (let i = 2; i < nums.length; i++) {
    // Tại nhà hiện tại, chúng ta có 2 lựa chọn:
    // 1. Cướp nhà hiện tại + tổng tiền cách 2 nhà trước
    // 2. Không cướp nhà hiện tại, lấy tổng tiền cách 1 nhà trước
    const current = Math.max(prev2 + nums[i], prev1);

    // Cập nhật trạng thái
    prev2 = prev1;
    prev1 = current;
  }

  return prev1;
}

/**
 * Alternative Solution: Using Array for DP
 *
 * Giải pháp thay thế: Sử dụng mảng cho DP
 *
 * @param nums - Mảng số tiền trong mỗi ngôi nhà
 * @returns Số tiền tối đa có thể cướp được
 */
function robWithArray(nums: number[]): number {
  if (nums.length === 0) return 0;
  if (nums.length === 1) return nums[0];

  const dp = new Array(nums.length).fill(0);
  dp[0] = nums[0];
  dp[1] = Math.max(nums[0], nums[1]);

  for (let i = 2; i < nums.length; i++) {
    dp[i] = Math.max(dp[i - 2] + nums[i], dp[i - 1]);
  }

  return dp[nums.length - 1];
}

/**
 * Recursive Solution with Memoization
 *
 * Giải pháp đệ quy với ghi nhớ
 *
 * @param nums - Mảng số tiền trong mỗi ngôi nhà
 * @returns Số tiền tối đa có thể cướp được
 */
function robRecursive(nums: number[]): number {
  const memo = new Map<number, number>();

  function robHelper(index: number): number {
    if (index >= nums.length) return 0;
    if (memo.has(index)) return memo.get(index)!;

    // Cướp nhà hiện tại hoặc không cướp
    const result = Math.max(
      nums[index] + robHelper(index + 2), // Cướp nhà hiện tại
      robHelper(index + 1) // Không cướp nhà hiện tại
    );

    memo.set(index, result);
    return result;
  }

  return robHelper(0);
}

/**
 * Solution with House Selection Tracking
 *
 * Giải pháp với theo dõi việc chọn nhà
 *
 * @param nums - Mảng số tiền trong mỗi ngôi nhà
 * @returns Object chứa tổng tiền và danh sách nhà được chọn
 */
function robWithSelection(nums: number[]): {
  maxMoney: number;
  selectedHouses: number[];
} {
  if (nums.length === 0) return { maxMoney: 0, selectedHouses: [] };
  if (nums.length === 1) return { maxMoney: nums[0], selectedHouses: [0] };

  const dp = new Array(nums.length).fill(0);
  const selected = new Array(nums.length).fill(false);

  dp[0] = nums[0];
  selected[0] = true;

  if (nums[1] > nums[0]) {
    dp[1] = nums[1];
    selected[1] = true;
    selected[0] = false;
  } else {
    dp[1] = nums[0];
  }

  for (let i = 2; i < nums.length; i++) {
    const robCurrent = dp[i - 2] + nums[i];
    const skipCurrent = dp[i - 1];

    if (robCurrent > skipCurrent) {
      dp[i] = robCurrent;
      selected[i] = true;
      selected[i - 1] = false;
    } else {
      dp[i] = skipCurrent;
      selected[i] = false;
    }
  }

  const selectedHouses: number[] = [];
  for (let i = 0; i < nums.length; i++) {
    if (selected[i]) {
      selectedHouses.push(i);
    }
  }

  return { maxMoney: dp[nums.length - 1], selectedHouses };
}

// Test cases / Các trường hợp kiểm thử
function runTests() {
  console.log("=== House Robber Tests ===");
  console.log("=== Kiểm thử bài toán Cướp nhà ===\n");

  const testCases = [
    {
      name: "Example 1: Four houses",
      input: [1, 2, 3, 1],
      expected: 4,
      description: "Rob houses 0 and 2: 1 + 3 = 4",
    },
    {
      name: "Example 2: Five houses",
      input: [2, 7, 9, 3, 1],
      expected: 12,
      description: "Rob houses 0, 2, and 4: 2 + 9 + 1 = 12",
    },
    {
      name: "Single house",
      input: [5],
      expected: 5,
      description: "Only one house to rob",
    },
    {
      name: "Two houses",
      input: [3, 7],
      expected: 7,
      description: "Rob the house with more money",
    },
    {
      name: "All same amount",
      input: [2, 2, 2, 2],
      expected: 4,
      description: "Rob houses 0 and 2: 2 + 2 = 4",
    },
    {
      name: "Alternating amounts",
      input: [1, 3, 1, 3, 1],
      expected: 6,
      description: "Rob houses 1 and 3: 3 + 3 = 6",
    },
    {
      name: "Large amounts",
      input: [100, 200, 300, 400],
      expected: 600,
      description:
        "Rob houses 0 and 2: 100 + 300 = 400, or houses 1 and 3: 200 + 400 = 600",
    },
    {
      name: "Zero amounts",
      input: [0, 0, 0, 0],
      expected: 0,
      description: "No money to rob",
    },
    {
      name: "One large amount",
      input: [1, 1000, 1, 1],
      expected: 1000,
      description: "Rob house 1: 1000",
    },
  ];

  let passedTests = 0;
  const totalTests = testCases.length;

  for (const testCase of testCases) {
    console.log(`Test: ${testCase.name}`);
    console.log(`Input: [${testCase.input.join(", ")}]`);
    console.log(`Expected: ${testCase.expected}`);
    console.log(`Description: ${testCase.description}`);

    const result = rob(testCase.input);
    const passed = result === testCase.expected;

    console.log(`Result: ${result}`);
    console.log(`Status: ${passed ? "✅ PASSED" : "❌ FAILED"}`);

    if (passed) {
      passedTests++;
    } else {
      console.log(`Expected: ${testCase.expected}, Got: ${result}`);
    }

    console.log("---");
  }

  console.log(`\nTest Summary: ${passedTests}/${totalTests} tests passed`);
  console.log(
    `Tóm tắt kiểm thử: ${passedTests}/${totalTests} bài kiểm thử đã qua`
  );

  // Test with selection tracking
  console.log("\n=== Testing with Selection Tracking ===");
  console.log("=== Kiểm thử với theo dõi việc chọn nhà ===\n");

  const testArray = [2, 7, 9, 3, 1];
  const resultWithSelection = robWithSelection(testArray);

  console.log(`Array: [${testArray.join(", ")}]`);
  console.log(`Max Money: ${resultWithSelection.maxMoney}`);
  console.log(
    `Selected Houses: [${resultWithSelection.selectedHouses.join(", ")}]`
  );
  console.log(
    `Selected Values: [${resultWithSelection.selectedHouses
      .map((i) => testArray[i])
      .join(", ")}]`
  );

  // Performance comparison
  console.log("\n=== Performance Comparison ===");
  console.log("=== So sánh hiệu suất ===\n");

  const largeInput = Array.from({ length: 1000 }, () =>
    Math.floor(Math.random() * 400)
  );

  console.log("Testing with large input (1,000 elements)...");
  console.log("Kiểm thử với dữ liệu lớn (1,000 phần tử)...");

  const start1 = performance.now();
  const result1 = rob(largeInput);
  const time1 = performance.now() - start1;

  const start2 = performance.now();
  const result2 = robWithArray(largeInput);
  const time2 = performance.now() - start2;

  const start3 = performance.now();
  const result3 = robRecursive(largeInput);
  const time3 = performance.now() - start3;

  console.log(`DP with variables: ${time1.toFixed(4)}ms`);
  console.log(`DP with array: ${time2.toFixed(4)}ms`);
  console.log(`Recursive with memo: ${time3.toFixed(4)}ms`);
  console.log(
    `Results match: ${
      result1 === result2 && result2 === result3 ? "✅ Yes" : "❌ No"
    }`
  );
}

// Run tests if this file is executed directly
if (require.main === module) {
  runTests();
}

export { rob, robWithArray, robRecursive, robWithSelection };
{% endraw %}
6:["topic","dp-problems-04-house-robber","d"]
0:["GkGybauu5extr5oVPcZnD",[[["",{"children":["learn",{"children":[["topic","dp-problems-04-house-robber","d"],{"children":["__PAGE__?{\"topic\":\"dp-problems-04-house-robber\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["learn",{"children":[["topic","dp-problems-04-house-robber","d"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"max-w-6xl mx-auto px-8 py-24","children":[["$","div",null,{"className":"flex items-center gap-4 mb-8","children":["$","$L2",null,{"href":"/learn","children":["$","button",null,{"className":"flex items-center gap-2 bg-gray-100 border border-gray-300 text-gray-700 px-4 py-3 rounded-md font-medium hover:bg-gray-200 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left ","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Learn"]}]}]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8 mb-8","children":[["$","div",null,{"className":"flex items-center justify-between mb-4","children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900","children":"House Robber"}],["$","div",null,{"className":"flex gap-4","children":[["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-star ","children":[["$","polygon","8f66p6",{"points":"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"}],"$undefined"]}],"Bookmark"]}],["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-share2 ","children":[["$","circle","gq8acd",{"cx":"18","cy":"5","r":"3"}],["$","circle","w7nqdw",{"cx":"6","cy":"12","r":"3"}],["$","circle","1xt0gg",{"cx":"18","cy":"19","r":"3"}],["$","line","47mynk",{"x1":"8.59","x2":"15.42","y1":"13.51","y2":"17.49"}],["$","line","1n3mei",{"x1":"15.41","x2":"8.59","y1":"6.51","y2":"10.49"}],"$undefined"]}],"Share"]}]]}]]}],["$","div",null,{"className":"flex gap-8 mb-4","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock ","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],"2-3 hours"]}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold text-white bg-red-500","children":"Hard"}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700","children":"Dynamic Programming"}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","0",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Dynamic Programming"}],["$","span","1",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Hash Table"}]]}],["$","p",null,{"className":"text-lg text-gray-700 leading-relaxed","children":" *  * You are a professional robber planning to rob houses along a street. Each house has  * a certain amount of money stashed, the only constraint stopping you from robbing each  * of them is that ad..."}]]}],["$","div",null,{"className":"grid grid-cols-1 lg:grid-cols-3 gap-8","children":[["$","div",null,{"className":"lg:col-span-2","children":["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8","children":["$","$L3",null,{"content":"$4"}]}]}],["$","div",null,{"className":"space-y-6","children":[["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Your Progress"}],["$","div",null,{"className":"w-full bg-gray-200 rounded-full h-2 mb-2","children":["$","div",null,{"className":"bg-blue-600 h-2 rounded-full","style":{"width":"25%"}}]}],["$","p",null,{"className":"text-sm text-gray-600","children":"25% Complete"}]]}],false]}]]}]]}],null],null],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L8",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
