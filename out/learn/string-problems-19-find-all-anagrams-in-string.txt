2:I[2972,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],""]
3:I[5907,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],"default"]
5:I[4707,[],""]
7:I[6423,[],""]
8:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
4:T3ce8,
# Find All Anagrams in a String

**LeetCode Problem # * 438. Find All Anagrams in a String**

## Problem Description

LeetCode problem solution with multiple approaches and explanations.

## Solutions

{% raw %}
/**
 * 438. Find All Anagrams in a String
 * 
 * Given two strings s and p, return an array of all the start indices of p's anagrams in s.
 * You may return the answer in any order.
 * 
 * An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase,
 * typically using all the original letters exactly once.
 * 
 * Example 1:
 * Input: s = "abab", p = "ab"
 * Output: [0,2]
 * Explanation:
 * The substring with start index = 0 is "ab", which is an anagram of "ab".
 * The substring with start index = 2 is "ab", which is an anagram of "ab".
 * 
 * Example 2:
 * Input: s = "abab", p = "ab"
 * Output: [0,2]
 * 
 * Example 3:
 * Input: s = "baa", p = "aa"
 * Output: [1]
 * 
 * Constraints:
 * - 1 <= s.length, p.length <= 3 * 10^4
 * - s and p consist of lowercase English letters only.
 */

// Solution 1: Sliding Window with HashMap
// Time: O(s + p), Space: O(p)
export function findAnagrams1(s: string, p: string): number[] {
    if (s.length < p.length) return [];
    
    const result: number[] = [];
    const pCount = new Map<string, number>();
    const windowCount = new Map<string, number>();
    
    // Count characters in p
    for (const char of p) {
        pCount.set(char, (pCount.get(char) || 0) + 1);
    }
    
    const windowSize = p.length;
    
    // Initialize first window
    for (let i = 0; i < windowSize; i++) {
        const char = s[i];
        windowCount.set(char, (windowCount.get(char) || 0) + 1);
    }
    
    // Check if first window is anagram
    if (mapsEqual(pCount, windowCount)) {
        result.push(0);
    }
    
    // Slide the window
    for (let i = windowSize; i < s.length; i++) {
        // Add new character
        const newChar = s[i];
        windowCount.set(newChar, (windowCount.get(newChar) || 0) + 1);
        
        // Remove old character
        const oldChar = s[i - windowSize];
        windowCount.set(oldChar, windowCount.get(oldChar)! - 1);
        if (windowCount.get(oldChar) === 0) {
            windowCount.delete(oldChar);
        }
        
        // Check if current window is anagram
        if (mapsEqual(pCount, windowCount)) {
            result.push(i - windowSize + 1);
        }
    }
    
    return result;
    
    function mapsEqual(map1: Map<string, number>, map2: Map<string, number>): boolean {
        if (map1.size !== map2.size) return false;
        
        for (const [key, value] of map1) {
            if (map2.get(key) !== value) return false;
        }
        
        return true;
    }
}

// Solution 2: Sliding Window with Array (Optimized)
// Time: O(s + p), Space: O(1)
export function findAnagrams2(s: string, p: string): number[] {
    if (s.length < p.length) return [];
    
    const result: number[] = [];
    const pCount = new Array(26).fill(0);
    const windowCount = new Array(26).fill(0);
    
    // Count characters in p
    for (const char of p) {
        pCount[char.charCodeAt(0) - 97]++;
    }
    
    const windowSize = p.length;
    
    // Process first window
    for (let i = 0; i < windowSize; i++) {
        windowCount[s.charCodeAt(i) - 97]++;
    }
    
    // Check first window
    if (arraysEqual(pCount, windowCount)) {
        result.push(0);
    }
    
    // Slide the window
    for (let i = windowSize; i < s.length; i++) {
        // Add new character
        windowCount[s.charCodeAt(i) - 97]++;
        
        // Remove old character
        windowCount[s.charCodeAt(i - windowSize) - 97]--;
        
        // Check current window
        if (arraysEqual(pCount, windowCount)) {
            result.push(i - windowSize + 1);
        }
    }
    
    return result;
    
    function arraysEqual(arr1: number[], arr2: number[]): boolean {
        for (let i = 0; i < 26; i++) {
            if (arr1[i] !== arr2[i]) return false;
        }
        return true;
    }
}

// Solution 3: Sliding Window with Match Counter
// Time: O(s + p), Space: O(1)
export function findAnagrams3(s: string, p: string): number[] {
    if (s.length < p.length) return [];
    
    const result: number[] = [];
    const count = new Array(26).fill(0);
    
    // Count characters in p (positive) and first window of s (negative)
    for (let i = 0; i < p.length; i++) {
        count[p.charCodeAt(i) - 97]++;
        count[s.charCodeAt(i) - 97]--;
    }
    
    let matches = 0;
    for (let i = 0; i < 26; i++) {
        if (count[i] === 0) matches++;
    }
    
    // Check first window
    if (matches === 26) {
        result.push(0);
    }
    
    // Slide the window
    for (let i = p.length; i < s.length; i++) {
        // Add new character
        const newCharIdx = s.charCodeAt(i) - 97;
        if (count[newCharIdx] === 0) matches--;
        count[newCharIdx]--;
        if (count[newCharIdx] === 0) matches++;
        
        // Remove old character
        const oldCharIdx = s.charCodeAt(i - p.length) - 97;
        if (count[oldCharIdx] === 0) matches--;
        count[oldCharIdx]++;
        if (count[oldCharIdx] === 0) matches++;
        
        // Check if anagram
        if (matches === 26) {
            result.push(i - p.length + 1);
        }
    }
    
    return result;
}

// Solution 4: Rolling Hash with Collision Check
// Time: O(s + p), Space: O(1)
export function findAnagrams4(s: string, p: string): number[] {
    if (s.length < p.length) return [];
    
    const result: number[] = [];
    
    // Calculate hash for pattern
    let pHash = 0;
    for (const char of p) {
        pHash += char.charCodeAt(0);
    }
    
    // Calculate hash for first window
    let windowHash = 0;
    for (let i = 0; i < p.length; i++) {
        windowHash += s.charCodeAt(i);
    }
    
    // Check first window with collision verification
    if (windowHash === pHash && isAnagram(s.substring(0, p.length), p)) {
        result.push(0);
    }
    
    // Slide the window
    for (let i = p.length; i < s.length; i++) {
        // Update rolling hash
        windowHash += s.charCodeAt(i) - s.charCodeAt(i - p.length);
        
        // Check if hash matches and verify anagram
        if (windowHash === pHash) {
            const substring = s.substring(i - p.length + 1, i + 1);
            if (isAnagram(substring, p)) {
                result.push(i - p.length + 1);
            }
        }
    }
    
    return result;
    
    function isAnagram(str1: string, str2: string): boolean {
        if (str1.length !== str2.length) return false;
        
        const count = new Array(26).fill(0);
        for (let i = 0; i < str1.length; i++) {
            count[str1.charCodeAt(i) - 97]++;
            count[str2.charCodeAt(i) - 97]--;
        }
        
        return count.every(c => c === 0);
    }
}

// Solution 5: Bit Manipulation with XOR
// Time: O(s + p), Space: O(1)
export function findAnagrams5(s: string, p: string): number[] {
    if (s.length < p.length) return [];
    
    const result: number[] = [];
    
    // Create bit pattern for p
    let pPattern = 0;
    const pCount = new Array(26).fill(0);
    for (const char of p) {
        const idx = char.charCodeAt(0) - 97;
        pCount[idx]++;
        pPattern ^= (1 << idx);
    }
    
    // Create bit pattern for first window
    let windowPattern = 0;
    const windowCount = new Array(26).fill(0);
    for (let i = 0; i < p.length; i++) {
        const idx = s.charCodeAt(i) - 97;
        windowCount[idx]++;
        windowPattern ^= (1 << idx);
    }
    
    // Check first window (bit pattern match + count verification)
    if (windowPattern === pPattern && arraysEqual(pCount, windowCount)) {
        result.push(0);
    }
    
    // Slide the window
    for (let i = p.length; i < s.length; i++) {
        // Add new character
        const newIdx = s.charCodeAt(i) - 97;
        if (windowCount[newIdx] === 0) windowPattern ^= (1 << newIdx);
        windowCount[newIdx]++;
        if (windowCount[newIdx] % 2 === 0) windowPattern ^= (1 << newIdx);
        
        // Remove old character
        const oldIdx = s.charCodeAt(i - p.length) - 97;
        if (windowCount[oldIdx] % 2 === 1) windowPattern ^= (1 << oldIdx);
        windowCount[oldIdx]--;
        if (windowCount[oldIdx] === 0) windowPattern ^= (1 << oldIdx);
        
        // Check if anagram (requires both bit pattern and count match)
        if (windowPattern === pPattern && arraysEqual(pCount, windowCount)) {
            result.push(i - p.length + 1);
        }
    }
    
    return result;
    
    function arraysEqual(arr1: number[], arr2: number[]): boolean {
        for (let i = 0; i < 26; i++) {
            if (arr1[i] !== arr2[i]) return false;
        }
        return true;
    }
}

// Solution 6: Prime Hash with Modular Arithmetic
// Time: O(s + p), Space: O(1)
export function findAnagrams6(s: string, p: string): number[] {
    if (s.length < p.length) return [];
    
    const result: number[] = [];
    
    // Prime numbers for each character (a-z)
    const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101];
    const MOD = 1e9 + 7;
    
    // Calculate hash for pattern
    let pHash = 1;
    for (const char of p) {
        pHash = (pHash * primes[char.charCodeAt(0) - 97]) % MOD;
    }
    
    // Calculate hash for first window
    let windowHash = 1;
    for (let i = 0; i < p.length; i++) {
        windowHash = (windowHash * primes[s.charCodeAt(i) - 97]) % MOD;
    }
    
    // Check first window
    if (windowHash === pHash) {
        result.push(0);
    }
    
    // Precompute modular multiplicative inverse
    function modInverse(a: number, m: number): number {
        return modPow(a, m - 2, m);
    }
    
    function modPow(base: number, exp: number, mod: number): number {
        let result = 1;
        while (exp > 0) {
            if (exp % 2 === 1) {
                result = (result * base) % mod;
            }
            base = (base * base) % mod;
            exp = Math.floor(exp / 2);
        }
        return result;
    }
    
    // Slide the window
    for (let i = p.length; i < s.length; i++) {
        // Add new character
        const newPrime = primes[s.charCodeAt(i) - 97];
        windowHash = (windowHash * newPrime) % MOD;
        
        // Remove old character
        const oldPrime = primes[s.charCodeAt(i - p.length) - 97];
        const oldInverse = modInverse(oldPrime, MOD);
        windowHash = (windowHash * oldInverse) % MOD;
        
        // Check if hash matches
        if (windowHash === pHash) {
            result.push(i - p.length + 1);
        }
    }
    
    return result;
}

// Test cases
export function testFindAnagrams() {
    console.log("Testing Find All Anagrams in a String:");
    
    const testCases = [
        {
            s: "abab",
            p: "ab",
            expected: [0, 2]
        },
        {
            s: "abab",
            p: "ab",
            expected: [0, 2]
        },
        {
            s: "baa",
            p: "aa",
            expected: [1]
        },
        {
            s: "cbaebabacd",
            p: "abc",
            expected: [1, 6]
        },
        {
            s: "aaaaaaaaaa",
            p: "aaaaaaaaaa",
            expected: [0]
        },
        {
            s: "aab",
            p: "ab",
            expected: [1]
        },
        {
            s: "a",
            p: "ab",
            expected: []
        }
    ];
    
    const solutions = [
        { name: "HashMap Sliding Window", fn: findAnagrams1 },
        { name: "Array Optimization", fn: findAnagrams2 },
        { name: "Match Counter", fn: findAnagrams3 },
        { name: "Rolling Hash", fn: findAnagrams4 },
        { name: "Bit Manipulation", fn: findAnagrams5 },
        { name: "Prime Hash", fn: findAnagrams6 }
    ];
    
    solutions.forEach(solution => {
        console.log(`\n${solution.name}:`);
        testCases.forEach((test, i) => {
            const result = solution.fn(test.s, test.p);
            result.sort((a, b) => a - b); // Sort for comparison
            const passed = JSON.stringify(result) === JSON.stringify(test.expected);
            console.log(`  Test ${i + 1}: ${passed ? 'PASS' : 'FAIL'}`);
            if (!passed) {
                console.log(`    Input: s="${test.s}", p="${test.p}"`);
                console.log(`    Expected: ${JSON.stringify(test.expected)}`);
                console.log(`    Got: ${JSON.stringify(result)}`);
            }
        });
    });
}

/**
 * Key Insights:
 * 
 * 1. **Anagram Detection**:
 *    - Same characters with same frequencies
 *    - Order doesn't matter, only character counts
 *    - Fixed window size equals pattern length
 * 
 * 2. **Sliding Window Strategy**:
 *    - Maintain window of size |p|
 *    - Add new character, remove old character
 *    - Compare character frequencies efficiently
 * 
 * 3. **Frequency Comparison Methods**:
 *    - Direct array/map comparison
 *    - Match counter (track when frequencies align)
 *    - Hash-based approaches with collision detection
 * 
 * 4. **Time Complexity**: O(s + p)
 *    - Linear scan of string s
 *    - Constant time window updates
 *    - Frequency comparison optimizations
 * 
 * 5. **Space Complexity**: O(1)
 *    - Fixed-size arrays for character counts
 *    - Independent of input string lengths
 *    - Only 26 lowercase English letters
 * 
 * 6. **Optimization Techniques**:
 *    - Array instead of HashMap for limited alphabet
 *    - Match counter to avoid full array comparison
 *    - Hash functions for quick similarity checks
 * 
 * 7. **Interview Strategy**:
 *    - Start with basic sliding window + HashMap
 *    - Optimize to array for character counting
 *    - Add match counter for efficiency
 *    - Discuss hash-based approaches as advanced
 * 
 * 8. **Edge Cases**:
 *    - Pattern longer than string
 *    - Single character pattern/string
 *    - Pattern with all same characters
 *    - No anagrams found
 * 
 * 9. **Common Mistakes**:
 *    - Forgetting to remove old character from window
 *    - Incorrect frequency comparison logic
 *    - Off-by-one errors in indexing
 *    - Not handling empty results
 * 
 * 10. **Hash Function Considerations**:
 *     - Rolling hash for quick updates
 *     - Prime multiplication for uniqueness
 *     - Collision detection still necessary
 *     - Modular arithmetic for overflow prevention
 * 
 * 11. **Big Tech Variations**:
 *     - Google: Unicode character support
 *     - Meta: Case-insensitive anagrams
 *     - Amazon: Multiple pattern matching
 *     - Microsoft: Streaming data processing
 * 
 * 12. **Follow-up Questions**:
 *     - Return actual anagram substrings
 *     - Handle case sensitivity
 *     - Support Unicode characters
 *     - Find longest anagram substring
 * 
 * 13. **Real-world Applications**:
 *     - Plagiarism detection systems
 *     - DNA sequence analysis
 *     - Text similarity algorithms
 *     - Search engine query processing
 *     - Spell checker implementations
 * 
 * 14. **Alternative Approaches**:
 *     - Sorting-based comparison (O(n log n))
 *     - Trie-based pattern matching
 *     - Suffix array algorithms
 * 
 * 15. **Performance Considerations**:
 *     - Cache-friendly array access patterns
 *     - Minimal allocations in tight loops
 *     - Branch prediction optimization
 *     - Early termination strategies
 */
{% endraw %}
6:["topic","string-problems-19-find-all-anagrams-in-string","d"]
0:["2NmUhWiPdVVBzVtDZlggk",[[["",{"children":["learn",{"children":[["topic","string-problems-19-find-all-anagrams-in-string","d"],{"children":["__PAGE__?{\"topic\":\"string-problems-19-find-all-anagrams-in-string\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["learn",{"children":[["topic","string-problems-19-find-all-anagrams-in-string","d"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"max-w-6xl mx-auto px-8 py-24","children":[["$","div",null,{"className":"flex items-center gap-4 mb-8","children":["$","$L2",null,{"href":"/learn","children":["$","button",null,{"className":"flex items-center gap-2 bg-gray-100 border border-gray-300 text-gray-700 px-4 py-3 rounded-md font-medium hover:bg-gray-200 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left ","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Learn"]}]}]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8 mb-8","children":[["$","div",null,{"className":"flex items-center justify-between mb-4","children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900","children":"Find All Anagrams in a String"}],["$","div",null,{"className":"flex gap-4","children":[["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-star ","children":[["$","polygon","8f66p6",{"points":"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"}],"$undefined"]}],"Bookmark"]}],["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-share2 ","children":[["$","circle","gq8acd",{"cx":"18","cy":"5","r":"3"}],["$","circle","w7nqdw",{"cx":"6","cy":"12","r":"3"}],["$","circle","1xt0gg",{"cx":"18","cy":"19","r":"3"}],["$","line","47mynk",{"x1":"8.59","x2":"15.42","y1":"13.51","y2":"17.49"}],["$","line","1n3mei",{"x1":"15.41","x2":"8.59","y1":"6.51","y2":"10.49"}],"$undefined"]}],"Share"]}]]}]]}],["$","div",null,{"className":"flex gap-8 mb-4","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock ","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],"2-3 hours"]}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold text-white bg-red-500","children":"Easy"}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700","children":"String"}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","0",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"String"}],["$","span","1",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Hash Table"}],["$","span","2",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Sliding Window"}],["$","span","3",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Sorting"}]]}],["$","p",null,{"className":"text-lg text-gray-700 leading-relaxed","children":"**LeetCode Problem # * 438. Find All Anagrams in a String**..."}]]}],["$","div",null,{"className":"grid grid-cols-1 lg:grid-cols-3 gap-8","children":[["$","div",null,{"className":"lg:col-span-2","children":["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8","children":["$","$L3",null,{"content":"$4"}]}]}],["$","div",null,{"className":"space-y-6","children":[["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Your Progress"}],["$","div",null,{"className":"w-full bg-gray-200 rounded-full h-2 mb-2","children":["$","div",null,{"className":"bg-blue-600 h-2 rounded-full","style":{"width":"25%"}}]}],["$","p",null,{"className":"text-sm text-gray-600","children":"25% Complete"}]]}],false]}]]}]]}],null],null],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L8",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
