2:I[2972,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],""]
3:I[5907,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],"default"]
5:I[4707,[],""]
7:I[6423,[],""]
8:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
4:T32ec,
# Word Ladder

**LeetCode Problem # * 127. Word Ladder**

## Problem Description

LeetCode problem solution with multiple approaches and explanations.

## Solutions

{% raw %}
/**
 * 127. Word Ladder
 * 
 * A transformation sequence from word beginWord to word endWord using a dictionary wordList 
 * is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:
 * 
 * - Every adjacent pair of words differs by exactly one letter.
 * - Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
 * - sk == endWord
 * 
 * Given two words, beginWord and endWord, and a dictionary wordList, return the length of the 
 * shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.
 * 
 * Example 1:
 * Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
 * Output: 5
 * Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> "cog", which is 5 words long.
 * 
 * Example 2:
 * Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
 * Output: 0
 * Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.
 * 
 * Constraints:
 * - 1 <= beginWord.length <= 10
 * - endWord.length == beginWord.length
 * - 1 <= wordList.length <= 5000
 * - wordList[i].length == beginWord.length
 * - beginWord, endWord, and wordList[i] consist of lowercase English letters.
 * - beginWord != endWord
 * - All the words in wordList are unique.
 */

// Solution 1: BFS (Breadth-First Search)
// Time: O(M²×N), Space: O(M²×N)
// M = length of each word, N = total number of words
export function ladderLength1(beginWord: string, endWord: string, wordList: string[]): number {
    const wordSet = new Set(wordList);
    if (!wordSet.has(endWord)) return 0;
    
    const queue: [string, number][] = [[beginWord, 1]];
    const visited = new Set<string>();
    visited.add(beginWord);
    
    while (queue.length > 0) {
        const [currentWord, level] = queue.shift()!;
        
        if (currentWord === endWord) {
            return level;
        }
        
        // Try changing each character
        for (let i = 0; i < currentWord.length; i++) {
            for (let charCode = 97; charCode <= 122; charCode++) { // 'a' to 'z'
                const newChar = String.fromCharCode(charCode);
                if (newChar === currentWord[i]) continue;
                
                const newWord = currentWord.slice(0, i) + newChar + currentWord.slice(i + 1);
                
                if (wordSet.has(newWord) && !visited.has(newWord)) {
                    visited.add(newWord);
                    queue.push([newWord, level + 1]);
                }
            }
        }
    }
    
    return 0;
}

// Solution 2: Bidirectional BFS
// Time: O(M²×N), Space: O(M²×N)
export function ladderLength2(beginWord: string, endWord: string, wordList: string[]): number {
    const wordSet = new Set(wordList);
    if (!wordSet.has(endWord)) return 0;
    
    let beginSet = new Set([beginWord]);
    let endSet = new Set([endWord]);
    const visited = new Set<string>();
    let level = 1;
    
    while (beginSet.size > 0 && endSet.size > 0) {
        // Always expand the smaller set for optimization
        if (beginSet.size > endSet.size) {
            [beginSet, endSet] = [endSet, beginSet];
        }
        
        const nextSet = new Set<string>();
        
        for (const word of beginSet) {
            for (let i = 0; i < word.length; i++) {
                for (let charCode = 97; charCode <= 122; charCode++) {
                    const newChar = String.fromCharCode(charCode);
                    if (newChar === word[i]) continue;
                    
                    const newWord = word.slice(0, i) + newChar + word.slice(i + 1);
                    
                    if (endSet.has(newWord)) {
                        return level + 1;
                    }
                    
                    if (wordSet.has(newWord) && !visited.has(newWord)) {
                        visited.add(newWord);
                        nextSet.add(newWord);
                    }
                }
            }
        }
        
        beginSet = nextSet;
        level++;
    }
    
    return 0;
}

// Solution 3: BFS with Pattern Matching
// Time: O(M²×N), Space: O(M²×N)
export function ladderLength3(beginWord: string, endWord: string, wordList: string[]): number {
    const wordSet = new Set(wordList);
    if (!wordSet.has(endWord)) return 0;
    
    // Build adjacency list using pattern matching
    const patternMap = new Map<string, string[]>();
    const allWords = [beginWord, ...wordList];
    
    for (const word of allWords) {
        for (let i = 0; i < word.length; i++) {
            const pattern = word.slice(0, i) + '*' + word.slice(i + 1);
            if (!patternMap.has(pattern)) {
                patternMap.set(pattern, []);
            }
            patternMap.get(pattern)!.push(word);
        }
    }
    
    const queue: [string, number][] = [[beginWord, 1]];
    const visited = new Set<string>();
    visited.add(beginWord);
    
    while (queue.length > 0) {
        const [currentWord, level] = queue.shift()!;
        
        if (currentWord === endWord) {
            return level;
        }
        
        // Check all patterns for current word
        for (let i = 0; i < currentWord.length; i++) {
            const pattern = currentWord.slice(0, i) + '*' + currentWord.slice(i + 1);
            const neighbors = patternMap.get(pattern) || [];
            
            for (const neighbor of neighbors) {
                if (!visited.has(neighbor)) {
                    visited.add(neighbor);
                    queue.push([neighbor, level + 1]);
                }
            }
        }
    }
    
    return 0;
}

// Solution 4: DFS with Memoization
// Time: O(M²×N), Space: O(M²×N)
export function ladderLength4(beginWord: string, endWord: string, wordList: string[]): number {
    const wordSet = new Set(wordList);
    if (!wordSet.has(endWord)) return 0;
    
    const memo = new Map<string, number>();
    
    function canTransform(word1: string, word2: string): boolean {
        let diff = 0;
        for (let i = 0; i < word1.length; i++) {
            if (word1[i] !== word2[i]) {
                diff++;
                if (diff > 1) return false;
            }
        }
        return diff === 1;
    }
    
    function dfs(currentWord: string, visited: Set<string>): number {
        if (currentWord === endWord) return 1;
        
        const key = currentWord + '|' + Array.from(visited).sort().join(',');
        if (memo.has(key)) return memo.get(key)!;
        
        let minLength = Infinity;
        
        for (const word of wordSet) {
            if (!visited.has(word) && canTransform(currentWord, word)) {
                visited.add(word);
                const length = dfs(word, visited);
                if (length !== Infinity) {
                    minLength = Math.min(minLength, length + 1);
                }
                visited.delete(word);
            }
        }
        
        memo.set(key, minLength);
        return minLength;
    }
    
    const result = dfs(beginWord, new Set([beginWord]));
    return result === Infinity ? 0 : result;
}

// Solution 5: A* Search Algorithm
// Time: O(M²×N log N), Space: O(M²×N)
export function ladderLength5(beginWord: string, endWord: string, wordList: string[]): number {
    const wordSet = new Set(wordList);
    if (!wordSet.has(endWord)) return 0;
    
    function heuristic(word1: string, word2: string): number {
        let diff = 0;
        for (let i = 0; i < word1.length; i++) {
            if (word1[i] !== word2[i]) diff++;
        }
        return diff;
    }
    
    function getNeighbors(word: string): string[] {
        const neighbors: string[] = [];
        for (let i = 0; i < word.length; i++) {
            for (let charCode = 97; charCode <= 122; charCode++) {
                const newChar = String.fromCharCode(charCode);
                if (newChar === word[i]) continue;
                
                const newWord = word.slice(0, i) + newChar + word.slice(i + 1);
                if (wordSet.has(newWord)) {
                    neighbors.push(newWord);
                }
            }
        }
        return neighbors;
    }
    
    // Priority queue: [fScore, gScore, word]
    const openSet: [number, number, string][] = [[heuristic(beginWord, endWord), 0, beginWord]];
    const gScore = new Map<string, number>();
    gScore.set(beginWord, 0);
    
    while (openSet.length > 0) {
        // Find node with lowest fScore
        openSet.sort((a, b) => a[0] - b[0]);
        const [, g, current] = openSet.shift()!;
        
        if (current === endWord) {
            return g + 1;
        }
        
        const neighbors = getNeighbors(current);
        for (const neighbor of neighbors) {
            const tentativeG = g + 1;
            
            if (!gScore.has(neighbor) || tentativeG < gScore.get(neighbor)!) {
                gScore.set(neighbor, tentativeG);
                const fScore = tentativeG + heuristic(neighbor, endWord);
                openSet.push([fScore, tentativeG, neighbor]);
            }
        }
    }
    
    return 0;
}

// Test cases
export function testLadderLength() {
    console.log("Testing Word Ladder:");
    
    const testCases = [
        {
            beginWord: "hit",
            endWord: "cog",
            wordList: ["hot", "dot", "dog", "lot", "log", "cog"],
            expected: 5
        },
        {
            beginWord: "hit",
            endWord: "cog",
            wordList: ["hot", "dot", "dog", "lot", "log"],
            expected: 0
        },
        {
            beginWord: "a",
            endWord: "c",
            wordList: ["a", "b", "c"],
            expected: 2
        },
        {
            beginWord: "hot",
            endWord: "dog",
            wordList: ["hot", "dog"],
            expected: 0
        },
        {
            beginWord: "hot",
            endWord: "dog",
            wordList: ["hot", "hog", "dog"],
            expected: 3
        }
    ];
    
    const solutions = [
        { name: "BFS", fn: ladderLength1 },
        { name: "Bidirectional BFS", fn: ladderLength2 },
        { name: "BFS with Patterns", fn: ladderLength3 },
        { name: "DFS with Memoization", fn: ladderLength4 },
        { name: "A* Search", fn: ladderLength5 }
    ];
    
    solutions.forEach(solution => {
        console.log(`\n${solution.name}:`);
        testCases.forEach((test, i) => {
            const result = solution.fn(test.beginWord, test.endWord, test.wordList);
            const passed = result === test.expected;
            console.log(`  Test ${i + 1}: ${passed ? 'PASS' : 'FAIL'}`);
            if (!passed) {
                console.log(`    Expected: ${test.expected}`);
                console.log(`    Got: ${result}`);
            }
        });
    });
}

/**
 * Key Insights:
 * 
 * 1. **Graph Problem Recognition**:
 *    - Each word is a node
 *    - Edge exists between words differing by exactly one character
 *    - Find shortest path from beginWord to endWord
 * 
 * 2. **BFS vs DFS**:
 *    - BFS finds shortest path naturally (level-order traversal)
 *    - DFS needs memoization to avoid exponential time
 *    - BFS preferred for shortest path problems
 * 
 * 3. **Optimization Techniques**:
 *    - Bidirectional BFS: Search from both ends
 *    - Pattern matching: Pre-compute adjacency relationships
 *    - A* search: Use heuristic to guide search
 * 
 * 4. **Time Complexity**: O(M²×N)
 *    - M = length of each word
 *    - N = number of words in wordList
 *    - For each word, try M×26 transformations
 * 
 * 5. **Space Complexity**: O(M²×N)
 *    - Storing visited words and queue
 *    - Pattern map in solution 3
 * 
 * 6. **Interview Strategy**:
 *    - Recognize as shortest path problem
 *    - Start with BFS approach
 *    - Optimize with bidirectional search
 *    - Discuss pattern matching optimization
 * 
 * 7. **Edge Cases**:
 *    - endWord not in wordList
 *    - beginWord equals endWord
 *    - No transformation possible
 *    - Single character words
 * 
 * 8. **Big Tech Focus**:
 *    - Google: Often asks about optimization techniques
 *    - Facebook: Focuses on bidirectional BFS
 *    - Amazon: Tests edge case handling
 *    - Microsoft: Emphasizes clean code structure
 * 
 * 9. **Follow-up Questions**:
 *    - Return the actual transformation sequence
 *    - Find all shortest transformation sequences
 *    - Handle case-insensitive transformations
 *    - Optimize for multiple queries
 * 
 * 10. **Common Mistakes**:
 *     - Using DFS without memoization
 *     - Not checking if endWord exists in wordList
 *     - Incorrect neighbor generation
 *     - Off-by-one errors in path length
 */
{% endraw %}
6:["topic","tree-graph-problems-13-word-ladder","d"]
0:["oobj7aMCDDjl3b-JX299a",[[["",{"children":["learn",{"children":[["topic","tree-graph-problems-13-word-ladder","d"],{"children":["__PAGE__?{\"topic\":\"tree-graph-problems-13-word-ladder\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["learn",{"children":[["topic","tree-graph-problems-13-word-ladder","d"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"max-w-6xl mx-auto px-8 py-24","children":[["$","div",null,{"className":"flex items-center gap-4 mb-8","children":["$","$L2",null,{"href":"/learn","children":["$","button",null,{"className":"flex items-center gap-2 bg-gray-100 border border-gray-300 text-gray-700 px-4 py-3 rounded-md font-medium hover:bg-gray-200 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left ","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Learn"]}]}]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8 mb-8","children":[["$","div",null,{"className":"flex items-center justify-between mb-4","children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900","children":"Word Ladder"}],["$","div",null,{"className":"flex gap-4","children":[["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-star ","children":[["$","polygon","8f66p6",{"points":"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"}],"$undefined"]}],"Bookmark"]}],["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-share2 ","children":[["$","circle","gq8acd",{"cx":"18","cy":"5","r":"3"}],["$","circle","w7nqdw",{"cx":"6","cy":"12","r":"3"}],["$","circle","1xt0gg",{"cx":"18","cy":"19","r":"3"}],["$","line","47mynk",{"x1":"8.59","x2":"15.42","y1":"13.51","y2":"17.49"}],["$","line","1n3mei",{"x1":"15.41","x2":"8.59","y1":"6.51","y2":"10.49"}],"$undefined"]}],"Share"]}]]}]]}],["$","div",null,{"className":"flex gap-8 mb-4","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock ","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],"2-3 hours"]}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold text-white bg-red-500","children":"Hard"}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700","children":"Tree/Graph"}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","0",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Tree/Graph"}],["$","span","1",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Hash Table"}]]}],["$","p",null,{"className":"text-lg text-gray-700 leading-relaxed","children":"**LeetCode Problem # * 127. Word Ladder**..."}]]}],["$","div",null,{"className":"grid grid-cols-1 lg:grid-cols-3 gap-8","children":[["$","div",null,{"className":"lg:col-span-2","children":["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8","children":["$","$L3",null,{"content":"$4"}]}]}],["$","div",null,{"className":"space-y-6","children":[["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Your Progress"}],["$","div",null,{"className":"w-full bg-gray-200 rounded-full h-2 mb-2","children":["$","div",null,{"className":"bg-blue-600 h-2 rounded-full","style":{"width":"25%"}}]}],["$","p",null,{"className":"text-sm text-gray-600","children":"25% Complete"}]]}],false]}]]}]]}],null],null],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L8",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
