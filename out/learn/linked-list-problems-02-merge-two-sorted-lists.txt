2:I[2972,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],""]
3:I[5907,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],"default"]
5:I[4707,[],""]
7:I[6423,[],""]
8:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
4:T35cd,
# Merge Two Sorted List

**LeetCode Problem # * 21. Merge Two Sorted Lists**

## Problem Description

 * You are given the heads of two sorted linked lists list1 and list2.  * Merge the two lists into one sorted list. The list should be made by  * splicing together the nodes of the first two lists.  * Return the head of the merged linked list.  * 

## Solutions

{% raw %}
/**
 * 21. Merge Two Sorted Lists
 *
 * Problem:
 * You are given the heads of two sorted linked lists list1 and list2.
 * Merge the two lists into one sorted list. The list should be made by
 * splicing together the nodes of the first two lists.
 * Return the head of the merged linked list.
 *
 * Example:
 * Input: list1 = [1,2,4], list2 = [1,3,4]
 * Output: [1,1,2,3,4,4]
 *
 * Input: list1 = [], list2 = []
 * Output: []
 *
 * Input: list1 = [], list2 = [0]
 * Output: [0]
 *
 * LeetCode: https://leetcode.com/problems/merge-two-sorted-lists/
 */

// ListNode class definition
class ListNode {
  val: number;
  next: ListNode | null;

  constructor(val: number = 0, next: ListNode | null = null) {
    this.val = val;
    this.next = next;
  }
}

/**
 * Solution 1: Iterative with Dummy Node (Optimal)
 *
 * Approach:
 * - Use dummy node to handle edge cases
 * - Compare nodes from both lists
 * - Link smaller node to result
 *
 * Time Complexity: O(n + m)
 * Space Complexity: O(1)
 */
function mergeTwoLists(
  list1: ListNode | null,
  list2: ListNode | null
): ListNode | null {
  const dummy = new ListNode(0);
  let current = dummy;

  while (list1 && list2) {
    if (list1.val <= list2.val) {
      current.next = list1;
      list1 = list1.next;
    } else {
      current.next = list2;
      list2 = list2.next;
    }
    current = current.next;
  }

  // Attach remaining nodes
  current.next = list1 || list2;

  return dummy.next;
}

/**
 * Solution 2: Recursive Approach
 *
 * Approach:
 * - Use recursion to merge lists
 * - Base case: when one list is empty
 *
 * Time Complexity: O(n + m)
 * Space Complexity: O(n + m) - recursion stack
 */
function mergeTwoListsRecursive(
  list1: ListNode | null,
  list2: ListNode | null
): ListNode | null {
  if (!list1) return list2;
  if (!list2) return list1;

  if (list1.val <= list2.val) {
    list1.next = mergeTwoListsRecursive(list1.next, list2);
    return list1;
  } else {
    list2.next = mergeTwoListsRecursive(list1, list2.next);
    return list2;
  }
}

/**
 * Solution 3: In-place Merge (Modifies input)
 *
 * Approach:
 * - Merge in-place by modifying pointers
 * - More complex but space efficient
 *
 * Time Complexity: O(n + m)
 * Space Complexity: O(1)
 */
function mergeTwoListsInPlace(
  list1: ListNode | null,
  list2: ListNode | null
): ListNode | null {
  if (!list1) return list2;
  if (!list2) return list1;

  let head: ListNode;
  let current: ListNode;

  // Choose head
  if (list1.val <= list2.val) {
    head = list1;
    list1 = list1.next;
  } else {
    head = list2;
    list2 = list2.next;
  }

  current = head;

  while (list1 && list2) {
    if (list1.val <= list2.val) {
      current.next = list1;
      list1 = list1.next;
    } else {
      current.next = list2;
      list2 = list2.next;
    }
    current = current.next;
  }

  current.next = list1 || list2;
  return head;
}

/**
 * Solution 4: Using Array Conversion
 *
 * Approach:
 * - Convert lists to arrays
 * - Merge arrays and create new list
 *
 * Time Complexity: O(n + m)
 * Space Complexity: O(n + m)
 */
function mergeTwoListsArray(
  list1: ListNode | null,
  list2: ListNode | null
): ListNode | null {
  const array1 = linkedListToArray(list1);
  const array2 = linkedListToArray(list2);

  const mergedArray = mergeArrays(array1, array2);
  return arrayToLinkedList(mergedArray);
}

/**
 * Solution 5: Two Pointers with Sentinel
 *
 * Approach:
 * - Use sentinel node for cleaner code
 * - Similar to Solution 1 but more explicit
 *
 * Time Complexity: O(n + m)
 * Space Complexity: O(1)
 */
function mergeTwoListsSentinel(
  list1: ListNode | null,
  list2: ListNode | null
): ListNode | null {
  const sentinel = new ListNode(-1);
  let tail = sentinel;

  while (list1 && list2) {
    if (list1.val <= list2.val) {
      tail.next = list1;
      list1 = list1.next;
    } else {
      tail.next = list2;
      list2 = list2.next;
    }
    tail = tail.next;
  }

  tail.next = list1 || list2;
  return sentinel.next;
}

/**
 * Solution 6: Using Priority Queue (Overkill)
 *
 * Approach:
 * - Use priority queue to merge
 * - Educational but inefficient
 *
 * Time Complexity: O((n + m) log(n + m))
 * Space Complexity: O(n + m)
 */
class PriorityQueue {
  private heap: ListNode[] = [];

  enqueue(node: ListNode): void {
    this.heap.push(node);
    this.heapifyUp();
  }

  dequeue(): ListNode | null {
    if (this.heap.length === 0) return null;

    const min = this.heap[0];
    const last = this.heap.pop()!;

    if (this.heap.length > 0) {
      this.heap[0] = last;
      this.heapifyDown();
    }

    return min;
  }

  private heapifyUp(): void {
    let index = this.heap.length - 1;
    while (index > 0) {
      const parentIndex = Math.floor((index - 1) / 2);
      if (this.heap[parentIndex].val <= this.heap[index].val) break;

      [this.heap[parentIndex], this.heap[index]] = [
        this.heap[index],
        this.heap[parentIndex],
      ];
      index = parentIndex;
    }
  }

  private heapifyDown(): void {
    let index = 0;
    while (true) {
      let smallest = index;
      const leftChild = 2 * index + 1;
      const rightChild = 2 * index + 2;

      if (
        leftChild < this.heap.length &&
        this.heap[leftChild].val < this.heap[smallest].val
      ) {
        smallest = leftChild;
      }

      if (
        rightChild < this.heap.length &&
        this.heap[rightChild].val < this.heap[smallest].val
      ) {
        smallest = rightChild;
      }

      if (smallest === index) break;

      [this.heap[index], this.heap[smallest]] = [
        this.heap[smallest],
        this.heap[index],
      ];
      index = smallest;
    }
  }

  isEmpty(): boolean {
    return this.heap.length === 0;
  }
}

function mergeTwoListsPriorityQueue(
  list1: ListNode | null,
  list2: ListNode | null
): ListNode | null {
  const pq = new PriorityQueue();

  // Add all nodes to priority queue
  let current = list1;
  while (current) {
    pq.enqueue(new ListNode(current.val));
    current = current.next;
  }

  current = list2;
  while (current) {
    pq.enqueue(new ListNode(current.val));
    current = current.next;
  }

  // Build result list
  const dummy = new ListNode(0);
  let tail = dummy;

  while (!pq.isEmpty()) {
    const node = pq.dequeue()!;
    tail.next = node;
    tail = tail.next;
  }

  return dummy.next;
}

// Helper functions
function linkedListToArray(head: ListNode | null): number[] {
  const result: number[] = [];
  let current = head;

  while (current) {
    result.push(current.val);
    current = current.next;
  }

  return result;
}

function arrayToLinkedList(arr: number[]): ListNode | null {
  if (arr.length === 0) return null;

  const head = new ListNode(arr[0]);
  let current = head;

  for (let i = 1; i < arr.length; i++) {
    current.next = new ListNode(arr[i]);
    current = current.next;
  }

  return head;
}

function mergeArrays(arr1: number[], arr2: number[]): number[] {
  const result: number[] = [];
  let i = 0,
    j = 0;

  while (i < arr1.length && j < arr2.length) {
    if (arr1[i] <= arr2[j]) {
      result.push(arr1[i]);
      i++;
    } else {
      result.push(arr2[j]);
      j++;
    }
  }

  while (i < arr1.length) {
    result.push(arr1[i]);
    i++;
  }

  while (j < arr2.length) {
    result.push(arr2[j]);
    j++;
  }

  return result;
}

function createLinkedList(arr: number[]): ListNode | null {
  return arrayToLinkedList(arr);
}

function printLinkedList(head: ListNode | null): string {
  const result: number[] = [];
  let current = head;

  while (current) {
    result.push(current.val);
    current = current.next;
  }

  return `[${result.join(" -> ")}]`;
}

// Test cases
function testMergeTwoSortedLists() {
  console.log("=== Testing Merge Two Sorted Lists ===\n");

  const testCases = [
    {
      list1: [1, 2, 4],
      list2: [1, 3, 4],
      expected: [1, 1, 2, 3, 4, 4],
      description: "Basic merge",
    },
    {
      list1: [],
      list2: [],
      expected: [],
      description: "Empty lists",
    },
    {
      list1: [],
      list2: [0],
      expected: [0],
      description: "One empty list",
    },
    {
      list1: [1, 3, 5],
      list2: [2, 4, 6],
      expected: [1, 2, 3, 4, 5, 6],
      description: "Alternating values",
    },
    {
      list1: [1, 2, 3],
      list2: [4, 5, 6],
      expected: [1, 2, 3, 4, 5, 6],
      description: "Sequential lists",
    },
    {
      list1: [4, 5, 6],
      list2: [1, 2, 3],
      expected: [1, 2, 3, 4, 5, 6],
      description: "Second list smaller",
    },
  ];

  testCases.forEach((testCase, index) => {
    console.log(`Test Case ${index + 1}: ${testCase.description}`);
    console.log(
      `Input: list1 = [${testCase.list1.join(
        ", "
      )}], list2 = [${testCase.list2.join(", ")}]`
    );
    console.log(`Expected: [${testCase.expected.join(", ")}]\n`);

    const list1 = createLinkedList(testCase.list1);
    const list2 = createLinkedList(testCase.list2);

    // Test Solution 1 (Iterative with Dummy)
    const result1 = mergeTwoLists(list1, list2);
    const result1Array = linkedListToArray(result1);
    console.log(
      `Solution 1 (Iterative): [${result1Array.join(", ")}] ${
        JSON.stringify(result1Array) === JSON.stringify(testCase.expected)
          ? "✅"
          : "❌"
      }`
    );

    // Test Solution 2 (Recursive)
    const list1Rec = createLinkedList(testCase.list1);
    const list2Rec = createLinkedList(testCase.list2);
    const result2 = mergeTwoListsRecursive(list1Rec, list2Rec);
    const result2Array = linkedListToArray(result2);
    console.log(
      `Solution 2 (Recursive): [${result2Array.join(", ")}] ${
        JSON.stringify(result2Array) === JSON.stringify(testCase.expected)
          ? "✅"
          : "❌"
      }`
    );

    // Test Solution 3 (In-place)
    const list1InPlace = createLinkedList(testCase.list1);
    const list2InPlace = createLinkedList(testCase.list2);
    const result3 = mergeTwoListsInPlace(list1InPlace, list2InPlace);
    const result3Array = linkedListToArray(result3);
    console.log(
      `Solution 3 (In-place): [${result3Array.join(", ")}] ${
        JSON.stringify(result3Array) === JSON.stringify(testCase.expected)
          ? "✅"
          : "❌"
      }`
    );

    // Test Solution 4 (Array)
    const list1Array = createLinkedList(testCase.list1);
    const list2Array = createLinkedList(testCase.list2);
    const result4 = mergeTwoListsArray(list1Array, list2Array);
    const result4Array = linkedListToArray(result4);
    console.log(
      `Solution 4 (Array): [${result4Array.join(", ")}] ${
        JSON.stringify(result4Array) === JSON.stringify(testCase.expected)
          ? "✅"
          : "❌"
      }`
    );

    // Test Solution 5 (Sentinel)
    const list1Sentinel = createLinkedList(testCase.list1);
    const list2Sentinel = createLinkedList(testCase.list2);
    const result5 = mergeTwoListsSentinel(list1Sentinel, list2Sentinel);
    const result5Array = linkedListToArray(result5);
    console.log(
      `Solution 5 (Sentinel): [${result5Array.join(", ")}] ${
        JSON.stringify(result5Array) === JSON.stringify(testCase.expected)
          ? "✅"
          : "❌"
      }`
    );

    // Test Solution 6 (Priority Queue)
    const list1PQ = createLinkedList(testCase.list1);
    const list2PQ = createLinkedList(testCase.list2);
    const result6 = mergeTwoListsPriorityQueue(list1PQ, list2PQ);
    const result6Array = linkedListToArray(result6);
    console.log(
      `Solution 6 (Priority Queue): [${result6Array.join(", ")}] ${
        JSON.stringify(result6Array) === JSON.stringify(testCase.expected)
          ? "✅"
          : "❌"
      }`
    );

    console.log("\n---\n");
  });
}

// Performance comparison
function performanceComparison() {
  console.log("=== Performance Comparison ===\n");

  const testCases = [
    { name: "Iterative", func: mergeTwoLists },
    { name: "Recursive", func: mergeTwoListsRecursive },
    { name: "In-place", func: mergeTwoListsInPlace },
    { name: "Array", func: mergeTwoListsArray },
    { name: "Sentinel", func: mergeTwoListsSentinel },
    { name: "Priority Queue", func: mergeTwoListsPriorityQueue },
  ];

  // Create test lists
  const list1 = createLinkedList(Array.from({ length: 1000 }, (_, i) => i * 2));
  const list2 = createLinkedList(
    Array.from({ length: 1000 }, (_, i) => i * 2 + 1)
  );

  testCases.forEach(({ name, func }) => {
    const start = performance.now();
    const result = func(list1, list2);
    const end = performance.now();

    console.log(`${name}:`);
    console.log(`  Time: ${(end - start).toFixed(2)}ms`);
    console.log(`  Result length: ${linkedListToArray(result).length}`);
    console.log(
      `  Memory: ${
        name === "Recursive"
          ? "O(n+m)"
          : name === "Array" || name === "Priority Queue"
          ? "O(n+m)"
          : "O(1)"
      }\n`
    );
  });
}

// Uncomment the following lines to run tests
// testMergeTwoSortedLists();
// performanceComparison();

export {
  ListNode,
  mergeTwoLists,
  mergeTwoListsRecursive,
  mergeTwoListsInPlace,
  mergeTwoListsArray,
  mergeTwoListsSentinel,
  mergeTwoListsPriorityQueue,
  PriorityQueue,
  linkedListToArray,
  arrayToLinkedList,
  createLinkedList,
  printLinkedList,
  testMergeTwoSortedLists,
  performanceComparison,
};
{% endraw %}
6:["topic","linked-list-problems-02-merge-two-sorted-lists","d"]
0:["oobj7aMCDDjl3b-JX299a",[[["",{"children":["learn",{"children":[["topic","linked-list-problems-02-merge-two-sorted-lists","d"],{"children":["__PAGE__?{\"topic\":\"linked-list-problems-02-merge-two-sorted-lists\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["learn",{"children":[["topic","linked-list-problems-02-merge-two-sorted-lists","d"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"max-w-6xl mx-auto px-8 py-24","children":[["$","div",null,{"className":"flex items-center gap-4 mb-8","children":["$","$L2",null,{"href":"/learn","children":["$","button",null,{"className":"flex items-center gap-2 bg-gray-100 border border-gray-300 text-gray-700 px-4 py-3 rounded-md font-medium hover:bg-gray-200 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left ","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Learn"]}]}]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8 mb-8","children":[["$","div",null,{"className":"flex items-center justify-between mb-4","children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900","children":"Merge Two Sorted List"}],["$","div",null,{"className":"flex gap-4","children":[["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-star ","children":[["$","polygon","8f66p6",{"points":"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"}],"$undefined"]}],"Bookmark"]}],["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-share2 ","children":[["$","circle","gq8acd",{"cx":"18","cy":"5","r":"3"}],["$","circle","w7nqdw",{"cx":"6","cy":"12","r":"3"}],["$","circle","1xt0gg",{"cx":"18","cy":"19","r":"3"}],["$","line","47mynk",{"x1":"8.59","x2":"15.42","y1":"13.51","y2":"17.49"}],["$","line","1n3mei",{"x1":"15.41","x2":"8.59","y1":"6.51","y2":"10.49"}],"$undefined"]}],"Share"]}]]}]]}],["$","div",null,{"className":"flex gap-8 mb-4","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock ","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],"2-3 hours"]}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold text-white bg-red-500","children":"Easy"}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700","children":"Linked List"}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","0",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Linked List"}],["$","span","1",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Two Pointers"}],["$","span","2",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Sorting"}]]}],["$","p",null,{"className":"text-lg text-gray-700 leading-relaxed","children":"**LeetCode Problem # * 21. Merge Two Sorted Lists**..."}]]}],["$","div",null,{"className":"grid grid-cols-1 lg:grid-cols-3 gap-8","children":[["$","div",null,{"className":"lg:col-span-2","children":["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8","children":["$","$L3",null,{"content":"$4"}]}]}],["$","div",null,{"className":"space-y-6","children":[["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Your Progress"}],["$","div",null,{"className":"w-full bg-gray-200 rounded-full h-2 mb-2","children":["$","div",null,{"className":"bg-blue-600 h-2 rounded-full","style":{"width":"25%"}}]}],["$","p",null,{"className":"text-sm text-gray-600","children":"25% Complete"}]]}],false]}]]}]]}],null],null],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L8",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
