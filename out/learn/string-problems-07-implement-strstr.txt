2:I[2972,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],""]
3:I[5907,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],"default"]
5:I[4707,[],""]
7:I[6423,[],""]
8:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
4:T34bb,
# Implement strStr()

**LeetCode Problem # * 28. Implement strStr()**

## Problem Description

 * Implement strStr().  *  * Return the index of the first occurrence of needle in haystack, or -1 if  * needle is not part of haystack.  * 

## Solutions

{% raw %}
/**
 * 28. Implement strStr()
 *
 * Problem:
 * Implement strStr().
 *
 * Return the index of the first occurrence of needle in haystack, or -1 if
 * needle is not part of haystack.
 *
 * Clarification:
 * What should we return when needle is an empty string? This is a great question
 * to ask during an interview.
 *
 * For the purpose of this problem, we will return 0 when needle is an empty string.
 * This is consistent to C's strstr() and Java's indexOf().
 *
 * Example:
 * Input: haystack = "hello", needle = "ll"
 * Output: 2
 *
 * Input: haystack = "aaaaa", needle = "bba"
 * Output: -1
 *
 * Input: haystack = "", needle = ""
 * Output: 0
 *
 * LeetCode: https://leetcode.com/problems/implement-strstr/
 */

/**
 * Solution 1: Built-in indexOf (Simple)
 *
 * Approach:
 * - Use JavaScript's built-in indexOf method
 * - Simple but not educational for interviews
 *
 * Time Complexity: O(n * m)
 * Space Complexity: O(1)
 */
function strStr(haystack: string, needle: string): number {
  return haystack.indexOf(needle);
}

/**
 * Solution 2: Brute Force (Naive)
 *
 * Approach:
 * - Check each possible starting position
 * - Compare substring with needle
 *
 * Time Complexity: O(n * m)
 * Space Complexity: O(1)
 */
function strStrBruteForce(haystack: string, needle: string): number {
  if (needle === "") return 0;

  const n = haystack.length;
  const m = needle.length;

  for (let i = 0; i <= n - m; i++) {
    let j = 0;
    while (j < m && haystack[i + j] === needle[j]) {
      j++;
    }
    if (j === m) {
      return i;
    }
  }

  return -1;
}

/**
 * Solution 3: KMP Algorithm (Optimal)
 *
 * Approach:
 * - Use KMP algorithm for efficient string matching
 * - Precompute failure function
 *
 * Time Complexity: O(n + m)
 * Space Complexity: O(m)
 */
function strStrKMP(haystack: string, needle: string): number {
  if (needle === "") return 0;

  const n = haystack.length;
  const m = needle.length;

  // Compute failure function
  const failure = computeFailureFunction(needle);

  let i = 0; // index for haystack
  let j = 0; // index for needle

  while (i < n) {
    if (needle[j] === haystack[i]) {
      i++;
      j++;
    }

    if (j === m) {
      return i - j;
    } else if (i < n && needle[j] !== haystack[i]) {
      if (j !== 0) {
        j = failure[j - 1];
      } else {
        i++;
      }
    }
  }

  return -1;
}

function computeFailureFunction(pattern: string): number[] {
  const m = pattern.length;
  const failure = new Array(m).fill(0);

  let len = 0;
  let i = 1;

  while (i < m) {
    if (pattern[i] === pattern[len]) {
      len++;
      failure[i] = len;
      i++;
    } else {
      if (len !== 0) {
        len = failure[len - 1];
      } else {
        failure[i] = 0;
        i++;
      }
    }
  }

  return failure;
}

/**
 * Solution 4: Boyer-Moore Algorithm
 *
 * Approach:
 * - Use Boyer-Moore algorithm for efficient string matching
 * - Bad character rule and good suffix rule
 *
 * Time Complexity: O(n * m) worst case, O(n/m) best case
 * Space Complexity: O(k) where k is alphabet size
 */
function strStrBoyerMoore(haystack: string, needle: string): number {
  if (needle === "") return 0;

  const n = haystack.length;
  const m = needle.length;

  // Bad character table
  const badChar = new Map<string, number>();
  for (let i = 0; i < m - 1; i++) {
    badChar.set(needle[i], m - 1 - i);
  }

  let i = m - 1;
  while (i < n) {
    let j = m - 1;
    let k = i;

    while (j >= 0 && haystack[k] === needle[j]) {
      k--;
      j--;
    }

    if (j === -1) {
      return k + 1;
    }

    const shift = badChar.get(haystack[i]) || m;
    i += shift;
  }

  return -1;
}

/**
 * Solution 5: Rabin-Karp Algorithm
 *
 * Approach:
 * - Use rolling hash for string matching
 * - Hash-based comparison
 *
 * Time Complexity: O(n + m) average case
 * Space Complexity: O(1)
 */
function strStrRabinKarp(haystack: string, needle: string): number {
  if (needle === "") return 0;

  const n = haystack.length;
  const m = needle.length;

  if (n < m) return -1;

  const base = 256;
  const mod = 101; // Prime number

  // Compute hash for needle
  let needleHash = 0;
  for (let i = 0; i < m; i++) {
    needleHash = (needleHash * base + needle.charCodeAt(i)) % mod;
  }

  // Compute hash for first window of haystack
  let haystackHash = 0;
  for (let i = 0; i < m; i++) {
    haystackHash = (haystackHash * base + haystack.charCodeAt(i)) % mod;
  }

  // Power for rolling hash
  let power = 1;
  for (let i = 0; i < m - 1; i++) {
    power = (power * base) % mod;
  }

  // Check first window
  if (haystackHash === needleHash && haystack.substring(0, m) === needle) {
    return 0;
  }

  // Check remaining windows
  for (let i = m; i < n; i++) {
    haystackHash =
      (haystackHash - ((haystack.charCodeAt(i - m) * power) % mod) + mod) % mod;
    haystackHash = (haystackHash * base + haystack.charCodeAt(i)) % mod;

    if (
      haystackHash === needleHash &&
      haystack.substring(i - m + 1, i + 1) === needle
    ) {
      return i - m + 1;
    }
  }

  return -1;
}

/**
 * Solution 6: Using Sliding Window
 *
 * Approach:
 * - Use sliding window technique
 * - Compare substrings directly
 *
 * Time Complexity: O(n * m)
 * Space Complexity: O(1)
 */
function strStrSlidingWindow(haystack: string, needle: string): number {
  if (needle === "") return 0;

  const n = haystack.length;
  const m = needle.length;

  for (let i = 0; i <= n - m; i++) {
    const window = haystack.substring(i, i + m);
    if (window === needle) {
      return i;
    }
  }

  return -1;
}

/**
 * Solution 7: Using Generator (Memory efficient)
 *
 * Approach:
 * - Use generator to yield possible positions
 * - Memory efficient for large strings
 *
 * Time Complexity: O(n * m)
 * Space Complexity: O(1)
 */
function* possiblePositions(
  haystack: string,
  needle: string
): Generator<number> {
  if (needle === "") {
    yield 0;
    return;
  }

  const n = haystack.length;
  const m = needle.length;

  for (let i = 0; i <= n - m; i++) {
    let match = true;
    for (let j = 0; j < m; j++) {
      if (haystack[i + j] !== needle[j]) {
        match = false;
        break;
      }
    }
    if (match) {
      yield i;
    }
  }
}

function strStrGenerator(haystack: string, needle: string): number {
  const positions = possiblePositions(haystack, needle);
  const first = positions.next();
  return first.done ? -1 : first.value;
}

/**
 * Solution 8: Using Class (Object-oriented)
 *
 * Approach:
 * - Create a StringMatcher class
 * - Encapsulate matching logic
 *
 * Time Complexity: O(n * m)
 * Space Complexity: O(1)
 */
class StringMatcher {
  private haystack: string;
  private needle: string;

  constructor(haystack: string, needle: string) {
    this.haystack = haystack;
    this.needle = needle;
  }

  findFirstOccurrence(): number {
    if (this.needle === "") return 0;

    const n = this.haystack.length;
    const m = this.needle.length;

    for (let i = 0; i <= n - m; i++) {
      if (this.matchesAt(i)) {
        return i;
      }
    }

    return -1;
  }

  private matchesAt(startIndex: number): boolean {
    for (let i = 0; i < this.needle.length; i++) {
      if (this.haystack[startIndex + i] !== this.needle[i]) {
        return false;
      }
    }
    return true;
  }
}

function strStrClass(haystack: string, needle: string): number {
  const matcher = new StringMatcher(haystack, needle);
  return matcher.findFirstOccurrence();
}

/**
 * Solution 9: Using Functional Approach
 *
 * Approach:
 * - Use functional programming concepts
 * - More declarative style
 *
 * Time Complexity: O(n * m)
 * Space Complexity: O(n)
 */
function strStrFunctional(haystack: string, needle: string): number {
  if (needle === "") return 0;

  const n = haystack.length;
  const m = needle.length;

  const positions = Array.from({ length: n - m + 1 }, (_, i) => i).filter(
    (i) => haystack.substring(i, i + m) === needle
  );

  return positions.length > 0 ? positions[0] : -1;
}

// Test cases
function testStrStr() {
  console.log("=== Testing Implement strStr() ===\n");

  const testCases = [
    {
      haystack: "hello",
      needle: "ll",
      expected: 2,
      description: "Standard case",
    },
    {
      haystack: "aaaaa",
      needle: "bba",
      expected: -1,
      description: "No match",
    },
    {
      haystack: "",
      needle: "",
      expected: 0,
      description: "Empty strings",
    },
    {
      haystack: "hello",
      needle: "",
      expected: 0,
      description: "Empty needle",
    },
    {
      haystack: "",
      needle: "hello",
      expected: -1,
      description: "Empty haystack",
    },
    {
      haystack: "mississippi",
      needle: "issip",
      expected: 4,
      description: "Complex case",
    },
    {
      haystack: "a",
      needle: "a",
      expected: 0,
      description: "Single character match",
    },
    {
      haystack: "abc",
      needle: "abcd",
      expected: -1,
      description: "Needle longer than haystack",
    },
  ];

  testCases.forEach((testCase, index) => {
    console.log(`Test Case ${index + 1}: ${testCase.description}`);
    console.log(
      `Input: haystack = "${testCase.haystack}", needle = "${testCase.needle}"`
    );
    console.log(`Expected: ${testCase.expected}\n`);

    // Test Solution 1 (Built-in)
    const result1 = strStr(testCase.haystack, testCase.needle);
    console.log(
      `Solution 1 (Built-in): ${result1} ${
        result1 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 2 (Brute Force)
    const result2 = strStrBruteForce(testCase.haystack, testCase.needle);
    console.log(
      `Solution 2 (Brute Force): ${result2} ${
        result2 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 3 (KMP)
    const result3 = strStrKMP(testCase.haystack, testCase.needle);
    console.log(
      `Solution 3 (KMP): ${result3} ${
        result3 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 4 (Boyer-Moore)
    const result4 = strStrBoyerMoore(testCase.haystack, testCase.needle);
    console.log(
      `Solution 4 (Boyer-Moore): ${result4} ${
        result4 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 5 (Rabin-Karp)
    const result5 = strStrRabinKarp(testCase.haystack, testCase.needle);
    console.log(
      `Solution 5 (Rabin-Karp): ${result5} ${
        result5 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 6 (Sliding Window)
    const result6 = strStrSlidingWindow(testCase.haystack, testCase.needle);
    console.log(
      `Solution 6 (Sliding Window): ${result6} ${
        result6 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 7 (Generator)
    const result7 = strStrGenerator(testCase.haystack, testCase.needle);
    console.log(
      `Solution 7 (Generator): ${result7} ${
        result7 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 8 (Class)
    const result8 = strStrClass(testCase.haystack, testCase.needle);
    console.log(
      `Solution 8 (Class): ${result8} ${
        result8 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 9 (Functional)
    const result9 = strStrFunctional(testCase.haystack, testCase.needle);
    console.log(
      `Solution 9 (Functional): ${result9} ${
        result9 === testCase.expected ? "✅" : "❌"
      }`
    );

    console.log("\n---\n");
  });
}

// Performance comparison
function performanceComparison() {
  console.log("=== Performance Comparison ===\n");

  const testCases = [
    { name: "Built-in", func: strStr },
    { name: "Brute Force", func: strStrBruteForce },
    { name: "KMP", func: strStrKMP },
    { name: "Boyer-Moore", func: strStrBoyerMoore },
    { name: "Rabin-Karp", func: strStrRabinKarp },
    { name: "Sliding Window", func: strStrSlidingWindow },
    { name: "Generator", func: strStrGenerator },
    { name: "Class", func: strStrClass },
    { name: "Functional", func: strStrFunctional },
  ];

  // Create test cases
  const shortCase = { haystack: "hello world", needle: "world" };
  const mediumCase = { haystack: "a".repeat(1000) + "b", needle: "ab" };
  const longCase = { haystack: "a".repeat(10000) + "b", needle: "ab" };

  const cases = [
    { name: "Short", case: shortCase },
    { name: "Medium", case: mediumCase },
    { name: "Long", case: longCase },
  ];

  cases.forEach(({ name, case: testCase }) => {
    console.log(`${name} Case:`);

    testCases.forEach(({ name: funcName, func }) => {
      const start = performance.now();
      const result = func(testCase.haystack, testCase.needle);
      const end = performance.now();

      console.log(`  ${funcName}: ${(end - start).toFixed(2)}ms (${result})`);
    });

    console.log("");
  });
}

// Uncomment the following lines to run tests
// testStrStr();
// performanceComparison();

export {
  strStr,
  strStrBruteForce,
  strStrKMP,
  strStrBoyerMoore,
  strStrRabinKarp,
  strStrSlidingWindow,
  strStrGenerator,
  strStrClass,
  strStrFunctional,
  StringMatcher,
  possiblePositions,
  computeFailureFunction,
  testStrStr,
  performanceComparison,
};
{% endraw %}
6:["topic","string-problems-07-implement-strstr","d"]
0:["GkGybauu5extr5oVPcZnD",[[["",{"children":["learn",{"children":[["topic","string-problems-07-implement-strstr","d"],{"children":["__PAGE__?{\"topic\":\"string-problems-07-implement-strstr\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["learn",{"children":[["topic","string-problems-07-implement-strstr","d"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"max-w-6xl mx-auto px-8 py-24","children":[["$","div",null,{"className":"flex items-center gap-4 mb-8","children":["$","$L2",null,{"href":"/learn","children":["$","button",null,{"className":"flex items-center gap-2 bg-gray-100 border border-gray-300 text-gray-700 px-4 py-3 rounded-md font-medium hover:bg-gray-200 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left ","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Learn"]}]}]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8 mb-8","children":[["$","div",null,{"className":"flex items-center justify-between mb-4","children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900","children":"Implement strStr()"}],["$","div",null,{"className":"flex gap-4","children":[["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-star ","children":[["$","polygon","8f66p6",{"points":"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"}],"$undefined"]}],"Bookmark"]}],["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-share2 ","children":[["$","circle","gq8acd",{"cx":"18","cy":"5","r":"3"}],["$","circle","w7nqdw",{"cx":"6","cy":"12","r":"3"}],["$","circle","1xt0gg",{"cx":"18","cy":"19","r":"3"}],["$","line","47mynk",{"x1":"8.59","x2":"15.42","y1":"13.51","y2":"17.49"}],["$","line","1n3mei",{"x1":"15.41","x2":"8.59","y1":"6.51","y2":"10.49"}],"$undefined"]}],"Share"]}]]}]]}],["$","div",null,{"className":"flex gap-8 mb-4","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock ","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],"2-3 hours"]}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold text-white bg-red-500","children":"Easy"}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700","children":"String"}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","0",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"String"}],["$","span","1",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Hash Table"}],["$","span","2",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Sliding Window"}]]}],["$","p",null,{"className":"text-lg text-gray-700 leading-relaxed","children":"**LeetCode Problem # * 28. Implement strStr()**..."}]]}],["$","div",null,{"className":"grid grid-cols-1 lg:grid-cols-3 gap-8","children":[["$","div",null,{"className":"lg:col-span-2","children":["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8","children":["$","$L3",null,{"content":"$4"}]}]}],["$","div",null,{"className":"space-y-6","children":[["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Your Progress"}],["$","div",null,{"className":"w-full bg-gray-200 rounded-full h-2 mb-2","children":["$","div",null,{"className":"bg-blue-600 h-2 rounded-full","style":{"width":"25%"}}]}],["$","p",null,{"className":"text-sm text-gray-600","children":"25% Complete"}]]}],false]}]]}]]}],null],null],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L8",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
