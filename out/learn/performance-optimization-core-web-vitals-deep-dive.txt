2:I[2972,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-b4f9b7b2865ef07e.js"],""]
3:I[5907,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-b4f9b7b2865ef07e.js"],"default"]
5:I[4707,[],""]
7:I[6423,[],""]
8:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
4:T25f5,
# Core Web Vitals Deep Dive - Performance Optimization Mastery

## ðŸ“Š Core Web Vitals Theory

### **What are Core Web Vitals?**
**Definition:** Core Web Vitals are a set of real-world, user-centered metrics that quantify key aspects of user experience. They measure loading performance, interactivity, and visual stability of web pages.

**Why Core Web Vitals Matter:**
- **SEO Impact**: Google uses them as ranking factors
- **User Experience**: Directly correlate with user satisfaction
- **Business Metrics**: Affect conversion rates and revenue
- **Performance Standards**: Provide objective performance targets

**The Three Core Web Vitals:**

```mermaid
graph TB
    subgraph "Core Web Vitals"
        A[Largest Contentful Paint - LCP] --> B[Loading Performance]
        C[First Input Delay - FID] --> D[Interactivity]
        E[Cumulative Layout Shift - CLS] --> F[Visual Stability]
    end

    subgraph "LCP Optimization"
        G[Server Response Time] --> H[Resource Loading]
        H --> I[Render Blocking Resources]
        I --> J[Client-side Rendering]
    end

    subgraph "FID Optimization"
        K[JavaScript Execution] --> L[Main Thread Blocking]
        L --> M[Event Handler Optimization]
        M --> N[Code Splitting]
    end

    subgraph "CLS Optimization"
        O[Layout Shifts] --> P[Image Dimensions]
        P --> Q[Font Loading]
        Q --> R[Dynamic Content]
    end
```

**Deep Theory with Advanced Examples:**
```javascript
// WHAT: Core Web Vitals measurement and optimization
class CoreWebVitalsAnalyzer {
    constructor() {
        this.metrics = new Map();
        this.observers = new Map();
        this.thresholds = {
            LCP: { good: 2500, poor: 4000 },
            FID: { good: 100, poor: 300 },
            CLS: { good: 0.1, poor: 0.25 }
        };
    }
    
    // Measure Largest Contentful Paint (LCP)
    measureLCP() {
        if (!('PerformanceObserver' in window)) return;
        
        const observer = new PerformanceObserver((entryList) => {
            const entries = entryList.getEntries();
            const lastEntry = entries[entries.length - 1];
            
            const lcpValue = lastEntry.startTime;
            this.recordMetric('LCP', lcpValue);
            
            console.log('LCP:', lcpValue, this.getPerformanceRating('LCP', lcpValue));
            
            // Analyze LCP element
            this.analyzeLCPElement(lastEntry.element);
        });
        
        observer.observe({ entryTypes: ['largest-contentful-paint'] });
        this.observers.set('LCP', observer);
    }
    
    analyzeLCPElement(element) {
        if (!element) return;
        
        const analysis = {
            tagName: element.tagName,
            src: element.src || element.currentSrc,
            dimensions: {
                width: element.offsetWidth,
                height: element.offsetHeight
            },
            loadingStrategy: element.loading,
            fetchPriority: element.fetchPriority,
            isAboveFold: this.isElementAboveFold(element),
            optimizations: this.suggestLCPOptimizations(element)
        };
        
        console.log('LCP Element Analysis:', analysis);
        return analysis;
    }
    
    suggestLCPOptimizations(element) {
        const suggestions = [];
        
        if (element.tagName === 'IMG') {
            if (!element.loading || element.loading !== 'eager') {
                suggestions.push('Set loading="eager" for LCP image');
            }
            
            if (!element.fetchPriority || element.fetchPriority !== 'high') {
                suggestions.push('Set fetchpriority="high" for LCP image');
            }
            
            if (!element.srcset) {
                suggestions.push('Implement responsive images with srcset');
            }
            
            if (!this.isImageOptimized(element.src)) {
                suggestions.push('Use modern image formats (WebP, AVIF)');
            }
        }
        
        if (element.tagName === 'VIDEO') {
            suggestions.push('Consider using poster image for faster LCP');
            suggestions.push('Preload video metadata');
        }
        
        return suggestions;
    }
    
    // Measure First Input Delay (FID)
    measureFID() {
        if (!('PerformanceObserver' in window)) return;
        
        const observer = new PerformanceObserver((entryList) => {
            entryList.getEntries().forEach((entry) => {
                const fidValue = entry.processingStart - entry.startTime;
                this.recordMetric('FID', fidValue);
                
                console.log('FID:', fidValue, this.getPerformanceRating('FID', fidValue));
                
                // Analyze the input event
                this.analyzeFIDEvent(entry);
            });
        });
        
        observer.observe({ entryTypes: ['first-input'] });
        this.observers.set('FID', observer);
    }
    
    analyzeFIDEvent(entry) {
        const analysis = {
            eventType: entry.name,
            startTime: entry.startTime,
            processingStart: entry.processingStart,
            processingEnd: entry.processingEnd,
            duration: entry.duration,
            target: entry.target?.tagName,
            inputDelay: entry.processingStart - entry.startTime,
            processingTime: entry.processingEnd - entry.processingStart
        };
        
        console.log('FID Event Analysis:', analysis);
        
        if (analysis.inputDelay > 100) {
            console.warn('High input delay detected. Consider:');
            console.warn('- Breaking up long tasks');
            console.warn('- Using web workers for heavy computations');
            console.warn('- Implementing code splitting');
        }
        
        return analysis;
    }
    
    // Measure Cumulative Layout Shift (CLS)
    measureCLS() {
        if (!('PerformanceObserver' in window)) return;
        
        let clsValue = 0;
        let sessionValue = 0;
        let sessionEntries = [];
        
        const observer = new PerformanceObserver((entryList) => {
            entryList.getEntries().forEach((entry) => {
                // Only count layout shifts without recent user input
                if (!entry.hadRecentInput) {
                    const firstSessionEntry = sessionEntries[0];
                    const lastSessionEntry = sessionEntries[sessionEntries.length - 1];
                    
                    // If the entry occurred less than 1 second after the previous entry
                    // and less than 5 seconds after the first entry in the session,
                    // include it in the current session. Otherwise, start a new session.
                    if (sessionValue &&
                        entry.startTime - lastSessionEntry.startTime < 1000 &&
                        entry.startTime - firstSessionEntry.startTime < 5000) {
                        sessionValue += entry.value;
                        sessionEntries.push(entry);
                    } else {
                        sessionValue = entry.value;
                        sessionEntries = [entry];
                    }
                    
                    // Update the CLS value if the current session value is larger
                    if (sessionValue > clsValue) {
                        clsValue = sessionValue;
                        this.recordMetric('CLS', clsValue);
                        
                        console.log('CLS:', clsValue, this.getPerformanceRating('CLS', clsValue));
                        this.analyzeCLSShift(entry);
                    }
                }
            });
        });
        
        observer.observe({ entryTypes: ['layout-shift'] });
        this.observers.set('CLS', observer);
    }
    
    analyzeCLSShift(entry) {
        const analysis = {
            value: entry.value,
            startTime: entry.startTime,
            hadRecentInput: entry.hadRecentInput,
            sources: entry.sources?.map(source => ({
                node: source.node?.tagName,
                previousRect: source.previousRect,
                currentRect: source.currentRect
            }))
        };
        
        console.log('Layout Shift Analysis:', analysis);
        
        // Suggest optimizations
        if (entry.sources) {
            entry.sources.forEach(source => {
                this.suggestCLSOptimizations(source);
            });
        }
        
        return analysis;
    }
    
    suggestCLSOptimizations(source) {
        const suggestions = [];
        
        if (source.node) {
            const element = source.node;
            
            if (element.tagName === 'IMG' && (!element.width || !element.height)) {
                suggestions.push('Set explicit width and height attributes for images');
            }
            
            if (element.tagName === 'VIDEO' && (!element.width || !element.height)) {
                suggestions.push('Set explicit dimensions for videos');
            }
            
            if (element.classList.contains('ad') || element.id.includes('ad')) {
                suggestions.push('Reserve space for ads to prevent layout shifts');
            }
            
            if (this.isWebFont(element)) {
                suggestions.push('Use font-display: swap and preload web fonts');
            }
        }
        
        suggestions.forEach(suggestion => console.warn('CLS Optimization:', suggestion));
        return suggestions;
    }
    
    // Advanced performance monitoring
    measureInteractionToNextPaint() {
        if (!('PerformanceOb
</augment_code_snippet>6:["topic","performance-optimization-core-web-vitals-deep-dive","d"]
0:["fjDGwqtt1UnBZeA2uH4xO",[[["",{"children":["learn",{"children":[["topic","performance-optimization-core-web-vitals-deep-dive","d"],{"children":["__PAGE__?{\"topic\":\"performance-optimization-core-web-vitals-deep-dive\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["learn",{"children":[["topic","performance-optimization-core-web-vitals-deep-dive","d"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"max-w-6xl mx-auto px-8 py-24","children":[["$","div",null,{"className":"flex items-center gap-4 mb-8","children":["$","$L2",null,{"href":"/learn","children":["$","button",null,{"className":"flex items-center gap-2 bg-gray-100 border border-gray-300 text-gray-700 px-4 py-3 rounded-md font-medium hover:bg-gray-200 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left ","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Learn"]}]}]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8 mb-8","children":[["$","div",null,{"className":"flex items-center justify-between mb-4","children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900","children":"Core Web Vitals Deep Dive - Performance Optimization Mastery"}],["$","div",null,{"className":"flex gap-4","children":[["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-star ","children":[["$","polygon","8f66p6",{"points":"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"}],"$undefined"]}],"Bookmark"]}],["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-share2 ","children":[["$","circle","gq8acd",{"cx":"18","cy":"5","r":"3"}],["$","circle","w7nqdw",{"cx":"6","cy":"12","r":"3"}],["$","circle","1xt0gg",{"cx":"18","cy":"19","r":"3"}],["$","line","47mynk",{"x1":"8.59","x2":"15.42","y1":"13.51","y2":"17.49"}],["$","line","1n3mei",{"x1":"15.41","x2":"8.59","y1":"6.51","y2":"10.49"}],"$undefined"]}],"Share"]}]]}]]}],["$","div",null,{"className":"flex gap-8 mb-4","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock ","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],"2-3 hours"]}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold text-white bg-yellow-500","children":"Intermediate"}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700","children":"Performance"}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","0",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"performance"}],["$","span","1",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"core-web-vitals"}],["$","span","2",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"optimization"}],["$","span","3",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"metrics"}],["$","span","4",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"user-experience"}]]}],["$","p",null,{"className":"text-lg text-gray-700 leading-relaxed","children":"Comprehensive understanding of Core Web Vitals, performance metrics, and optimization techniques for modern web applications"}]]}],["$","div",null,{"className":"grid grid-cols-1 lg:grid-cols-3 gap-8","children":[["$","div",null,{"className":"lg:col-span-2","children":["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8","children":["$","$L3",null,{"content":"$4"}]}]}],["$","div",null,{"className":"space-y-6","children":[["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Your Progress"}],["$","div",null,{"className":"w-full bg-gray-200 rounded-full h-2 mb-2","children":["$","div",null,{"className":"bg-blue-600 h-2 rounded-full","style":{"width":"25%"}}]}],["$","p",null,{"className":"text-sm text-gray-600","children":"25% Complete"}]]}],false]}]]}]]}],null],null],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L8",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
