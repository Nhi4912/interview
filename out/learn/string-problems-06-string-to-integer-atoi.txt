2:I[2972,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],""]
3:I[5907,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-4ab144227f7a7b3e.js"],"default"]
5:I[4707,[],""]
7:I[6423,[],""]
8:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
4:T3940,
# String to Integer (atoi)

**LeetCode Problem # * 8. String to Integer (atoi)**

## Problem Description

 * Implement the myAtoi(string s) function, which converts a string to a 32-bit  * signed integer (similar to C/C++'s atoi function).  *  * The algorithm for myAtoi(string s) is as follows:  * 1. Read in and ignore any leading whitespace. 

## Solutions

{% raw %}
/**
 * 8. String to Integer (atoi)
 *
 * Problem:
 * Implement the myAtoi(string s) function, which converts a string to a 32-bit
 * signed integer (similar to C/C++'s atoi function).
 *
 * The algorithm for myAtoi(string s) is as follows:
 * 1. Read in and ignore any leading whitespace.
 * 2. Check if the next character (if not already at the end of the string) is '-' or '+'.
 *    Read this character in if it is either. This determines if the final result is
 *    negative or positive respectively. If neither is present, then the result is positive.
 * 3. Read in next the characters until the next non-digit character or the end of the
 *    input is reached. The rest of the string is ignored.
 * 4. Convert these digits into an integer (i.e. "123" -> 123, "0032" -> 32). If no
 *    digits were read, then the integer is 0. Change the sign as necessary (from step 2).
 * 5. If the integer is out of the 32-bit signed integer range [-2³¹, 2³¹ - 1], then
 *    clamp the integer so that it remains in the range. Specifically, integers less
 *    than -2³¹ should be clamped to -2³¹, and integers greater than 2³¹ - 1 should
 *    be clamped to 2³¹ - 1.
 * 6. Return the integer as the final result.
 *
 * Example:
 * Input: s = "42"
 * Output: 42
 *
 * Input: s = "   -42"
 * Output: -42
 *
 * Input: s = "4193 with words"
 * Output: 4193
 *
 * LeetCode: https://leetcode.com/problems/string-to-integer-atoi/
 */

/**
 * Solution 1: State Machine (Optimal)
 *
 * Approach:
 * - Use state machine to handle different parsing states
 * - Handle overflow carefully
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function myAtoi(s: string): number {
  let i = 0;
  let sign = 1;
  let result = 0;

  // Skip leading whitespace
  while (i < s.length && s[i] === " ") {
    i++;
  }

  if (i >= s.length) return 0;

  // Handle sign
  if (s[i] === "+" || s[i] === "-") {
    sign = s[i] === "-" ? -1 : 1;
    i++;
  }

  // Parse digits
  while (i < s.length && s[i] >= "0" && s[i] <= "9") {
    const digit = parseInt(s[i]);

    // Check for overflow
    if (
      result > Math.floor(2147483647 / 10) ||
      (result === Math.floor(2147483647 / 10) && digit > 7)
    ) {
      return sign === 1 ? 2147483647 : -2147483648;
    }

    result = result * 10 + digit;
    i++;
  }

  return sign * result;
}

/**
 * Solution 2: Using Regular Expression
 *
 * Approach:
 * - Use regex to extract the number
 * - Simple but less efficient
 *
 * Time Complexity: O(n)
 * Space Complexity: O(n)
 */
function myAtoiRegex(s: string): number {
  const match = s.trim().match(/^[+-]?\d+/);

  if (!match) return 0;

  const num = parseInt(match[0]);

  // Handle overflow
  if (num > 2147483647) return 2147483647;
  if (num < -2147483648) return -2147483648;

  return num;
}

/**
 * Solution 3: Using parseInt with Validation
 *
 * Approach:
 * - Use built-in parseInt with custom validation
 * - Handle edge cases manually
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function myAtoiParseInt(s: string): number {
  const trimmed = s.trim();

  if (!trimmed) return 0;

  // Check if starts with valid character
  const firstChar = trimmed[0];
  if (
    !["+", "-", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"].includes(
      firstChar
    )
  ) {
    return 0;
  }

  const num = parseInt(trimmed);

  if (isNaN(num)) return 0;

  // Handle overflow
  if (num > 2147483647) return 2147483647;
  if (num < -2147483648) return -2147483648;

  return num;
}

/**
 * Solution 4: Character by Character Parsing
 *
 * Approach:
 * - Parse character by character
 * - More explicit control over the process
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function myAtoiCharByChar(s: string): number {
  let i = 0;
  let sign = 1;
  let result = 0;

  // Skip whitespace
  while (i < s.length && s[i] === " ") {
    i++;
  }

  if (i >= s.length) return 0;

  // Handle sign
  if (s[i] === "+" || s[i] === "-") {
    sign = s[i] === "-" ? -1 : 1;
    i++;
  }

  // Parse digits
  while (i < s.length) {
    const char = s[i];

    if (char < "0" || char > "9") {
      break;
    }

    const digit = char.charCodeAt(0) - "0".charCodeAt(0);

    // Check for overflow
    if (result > 214748364 || (result === 214748364 && digit > 7)) {
      return sign === 1 ? 2147483647 : -2147483648;
    }

    result = result * 10 + digit;
    i++;
  }

  return sign * result;
}

/**
 * Solution 5: Using BigInt (Modern JavaScript)
 *
 * Approach:
 * - Use BigInt to handle large numbers
 * - Convert back to number with clamping
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function myAtoiBigInt(s: string): number {
  const trimmed = s.trim();

  if (!trimmed) return 0;

  const match = trimmed.match(/^[+-]?\d+/);

  if (!match) return 0;

  const bigNum = BigInt(match[0]);

  // Clamp to 32-bit signed integer range
  if (bigNum > BigInt(2147483647)) return 2147483647;
  if (bigNum < BigInt(-2147483648)) return -2147483648;

  return Number(bigNum);
}

/**
 * Solution 6: Functional Approach
 *
 * Approach:
 * - Use functional programming concepts
 * - More declarative style
 *
 * Time Complexity: O(n)
 * Space Complexity: O(n)
 */
function myAtoiFunctional(s: string): number {
  const digits = s
    .trim()
    .split("")
    .reduce((acc: string[], char: string, index: number) => {
      if (index === 0 && (char === "+" || char === "-")) {
        acc.push(char);
      } else if (char >= "0" && char <= "9") {
        acc.push(char);
      } else {
        return acc;
      }
      return acc;
    }, [])
    .join("");

  if (!digits || digits === "+" || digits === "-") return 0;

  const num = parseInt(digits);

  if (isNaN(num)) return 0;

  // Clamp to 32-bit signed integer range
  return Math.max(-2147483648, Math.min(2147483647, num));
}

/**
 * Solution 7: Using Generator (Memory efficient)
 *
 * Approach:
 * - Use generator to yield characters
 * - Memory efficient for large strings
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function* characterGenerator(s: string): Generator<string> {
  for (const char of s) {
    yield char;
  }
}

function myAtoiGenerator(s: string): number {
  let sign = 1;
  let result = 0;
  let started = false;

  for (const char of characterGenerator(s)) {
    if (!started && char === " ") {
      continue;
    }

    if (!started && (char === "+" || char === "-")) {
      sign = char === "-" ? -1 : 1;
      started = true;
      continue;
    }

    if (char >= "0" && char <= "9") {
      started = true;
      const digit = parseInt(char);

      // Check for overflow
      if (
        result > Math.floor(2147483647 / 10) ||
        (result === Math.floor(2147483647 / 10) && digit > 7)
      ) {
        return sign === 1 ? 2147483647 : -2147483648;
      }

      result = result * 10 + digit;
    } else {
      break;
    }
  }

  return sign * result;
}

/**
 * Solution 8: Using Class (Object-oriented)
 *
 * Approach:
 * - Create an AtoiParser class
 * - Encapsulate parsing logic
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
class AtoiParser {
  private s: string;
  private i: number;
  private sign: number;
  private result: number;

  constructor(s: string) {
    this.s = s;
    this.i = 0;
    this.sign = 1;
    this.result = 0;
  }

  parse(): number {
    this.skipWhitespace();
    this.parseSign();
    this.parseDigits();
    return this.sign * this.result;
  }

  private skipWhitespace(): void {
    while (this.i < this.s.length && this.s[this.i] === " ") {
      this.i++;
    }
  }

  private parseSign(): void {
    if (
      this.i < this.s.length &&
      (this.s[this.i] === "+" || this.s[this.i] === "-")
    ) {
      this.sign = this.s[this.i] === "-" ? -1 : 1;
      this.i++;
    }
  }

  private parseDigits(): void {
    while (
      this.i < this.s.length &&
      this.s[this.i] >= "0" &&
      this.s[this.i] <= "9"
    ) {
      const digit = parseInt(this.s[this.i]);

      // Check for overflow
      if (
        this.result > Math.floor(2147483647 / 10) ||
        (this.result === Math.floor(2147483647 / 10) && digit > 7)
      ) {
        this.result = this.sign === 1 ? 2147483647 : 2147483648;
        return;
      }

      this.result = this.result * 10 + digit;
      this.i++;
    }
  }
}

function myAtoiClass(s: string): number {
  const parser = new AtoiParser(s);
  return parser.parse();
}

/**
 * Solution 9: Using Bit Manipulation
 *
 * Approach:
 * - Use bit operations for overflow checking
 * - More efficient for certain operations
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function myAtoiBitwise(s: string): number {
  let i = 0;
  let sign = 1;
  let result = 0;

  // Skip whitespace
  while (i < s.length && s[i] === " ") {
    i++;
  }

  if (i >= s.length) return 0;

  // Handle sign
  if (s[i] === "+" || s[i] === "-") {
    sign = s[i] === "-" ? -1 : 1;
    i++;
  }

  // Parse digits
  while (i < s.length && s[i] >= "0" && s[i] <= "9") {
    const digit = s[i].charCodeAt(0) - "0".charCodeAt(0);

    // Check for overflow using bit operations
    if (result > 0x7fffffff / 10 || (result === 0x7fffffff / 10 && digit > 7)) {
      return sign === 1 ? 0x7fffffff : -0x80000000;
    }

    result = (result << 3) + (result << 1) + digit; // result * 10 + digit
    i++;
  }

  return sign * result;
}

// Test cases
function testMyAtoi() {
  console.log("=== Testing String to Integer (atoi) ===\n");

  const testCases = [
    {
      input: "42",
      expected: 42,
      description: "Simple positive number",
    },
    {
      input: "   -42",
      expected: -42,
      description: "Negative number with leading spaces",
    },
    {
      input: "4193 with words",
      expected: 4193,
      description: "Number with trailing text",
    },
    {
      input: "words and 987",
      expected: 0,
      description: "Text before number",
    },
    {
      input: "-91283472332",
      expected: -2147483648,
      description: "Overflow negative",
    },
    {
      input: "91283472332",
      expected: 2147483647,
      description: "Overflow positive",
    },
    {
      input: "",
      expected: 0,
      description: "Empty string",
    },
    {
      input: "   ",
      expected: 0,
      description: "Only spaces",
    },
    {
      input: "+1",
      expected: 1,
      description: "Explicit positive",
    },
    {
      input: "00000-42a1234",
      expected: 0,
      description: "Complex case",
    },
  ];

  testCases.forEach((testCase, index) => {
    console.log(`Test Case ${index + 1}: ${testCase.description}`);
    console.log(`Input: "${testCase.input}"`);
    console.log(`Expected: ${testCase.expected}\n`);

    // Test Solution 1 (State Machine)
    const result1 = myAtoi(testCase.input);
    console.log(
      `Solution 1 (State Machine): ${result1} ${
        result1 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 2 (Regex)
    const result2 = myAtoiRegex(testCase.input);
    console.log(
      `Solution 2 (Regex): ${result2} ${
        result2 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 3 (parseInt)
    const result3 = myAtoiParseInt(testCase.input);
    console.log(
      `Solution 3 (parseInt): ${result3} ${
        result3 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 4 (Char by Char)
    const result4 = myAtoiCharByChar(testCase.input);
    console.log(
      `Solution 4 (Char by Char): ${result4} ${
        result4 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 5 (BigInt)
    const result5 = myAtoiBigInt(testCase.input);
    console.log(
      `Solution 5 (BigInt): ${result5} ${
        result5 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 6 (Functional)
    const result6 = myAtoiFunctional(testCase.input);
    console.log(
      `Solution 6 (Functional): ${result6} ${
        result6 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 7 (Generator)
    const result7 = myAtoiGenerator(testCase.input);
    console.log(
      `Solution 7 (Generator): ${result7} ${
        result7 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 8 (Class)
    const result8 = myAtoiClass(testCase.input);
    console.log(
      `Solution 8 (Class): ${result8} ${
        result8 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 9 (Bitwise)
    const result9 = myAtoiBitwise(testCase.input);
    console.log(
      `Solution 9 (Bitwise): ${result9} ${
        result9 === testCase.expected ? "✅" : "❌"
      }`
    );

    console.log("\n---\n");
  });
}

// Performance comparison
function performanceComparison() {
  console.log("=== Performance Comparison ===\n");

  const testCases = [
    { name: "State Machine", func: myAtoi },
    { name: "Regex", func: myAtoiRegex },
    { name: "parseInt", func: myAtoiParseInt },
    { name: "Char by Char", func: myAtoiCharByChar },
    { name: "BigInt", func: myAtoiBigInt },
    { name: "Functional", func: myAtoiFunctional },
    { name: "Generator", func: myAtoiGenerator },
    { name: "Class", func: myAtoiClass },
    { name: "Bitwise", func: myAtoiBitwise },
  ];

  // Create test strings
  const shortString = "42";
  const mediumString = "   -12345 with words";
  const longString = "   " + "9".repeat(100) + " with lots of text";

  const strings = [
    { name: "Short", string: shortString },
    { name: "Medium", string: mediumString },
    { name: "Long", string: longString },
  ];

  strings.forEach(({ name, string }) => {
    console.log(`${name} String:`);

    testCases.forEach(({ name: funcName, func }) => {
      const start = performance.now();
      const result = func(string);
      const end = performance.now();

      console.log(`  ${funcName}: ${(end - start).toFixed(2)}ms (${result})`);
    });

    console.log("");
  });
}

// Uncomment the following lines to run tests
// testMyAtoi();
// performanceComparison();

export {
  myAtoi,
  myAtoiRegex,
  myAtoiParseInt,
  myAtoiCharByChar,
  myAtoiBigInt,
  myAtoiFunctional,
  myAtoiGenerator,
  myAtoiClass,
  myAtoiBitwise,
  AtoiParser,
  characterGenerator,
  testMyAtoi,
  performanceComparison,
};
{% endraw %}
6:["topic","string-problems-06-string-to-integer-atoi","d"]
0:["2NmUhWiPdVVBzVtDZlggk",[[["",{"children":["learn",{"children":[["topic","string-problems-06-string-to-integer-atoi","d"],{"children":["__PAGE__?{\"topic\":\"string-problems-06-string-to-integer-atoi\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["learn",{"children":[["topic","string-problems-06-string-to-integer-atoi","d"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"max-w-6xl mx-auto px-8 py-24","children":[["$","div",null,{"className":"flex items-center gap-4 mb-8","children":["$","$L2",null,{"href":"/learn","children":["$","button",null,{"className":"flex items-center gap-2 bg-gray-100 border border-gray-300 text-gray-700 px-4 py-3 rounded-md font-medium hover:bg-gray-200 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left ","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Learn"]}]}]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8 mb-8","children":[["$","div",null,{"className":"flex items-center justify-between mb-4","children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900","children":"String to Integer (atoi)"}],["$","div",null,{"className":"flex gap-4","children":[["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-star ","children":[["$","polygon","8f66p6",{"points":"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"}],"$undefined"]}],"Bookmark"]}],["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-share2 ","children":[["$","circle","gq8acd",{"cx":"18","cy":"5","r":"3"}],["$","circle","w7nqdw",{"cx":"6","cy":"12","r":"3"}],["$","circle","1xt0gg",{"cx":"18","cy":"19","r":"3"}],["$","line","47mynk",{"x1":"8.59","x2":"15.42","y1":"13.51","y2":"17.49"}],["$","line","1n3mei",{"x1":"15.41","x2":"8.59","y1":"6.51","y2":"10.49"}],"$undefined"]}],"Share"]}]]}]]}],["$","div",null,{"className":"flex gap-8 mb-4","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock ","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],"2-3 hours"]}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold text-white bg-red-500","children":"Easy"}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700","children":"String"}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","0",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"String"}]]}],["$","p",null,{"className":"text-lg text-gray-700 leading-relaxed","children":"**LeetCode Problem # * 8. String to Integer (atoi)**..."}]]}],["$","div",null,{"className":"grid grid-cols-1 lg:grid-cols-3 gap-8","children":[["$","div",null,{"className":"lg:col-span-2","children":["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8","children":["$","$L3",null,{"content":"$4"}]}]}],["$","div",null,{"className":"space-y-6","children":[["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Your Progress"}],["$","div",null,{"className":"w-full bg-gray-200 rounded-full h-2 mb-2","children":["$","div",null,{"className":"bg-blue-600 h-2 rounded-full","style":{"width":"25%"}}]}],["$","p",null,{"className":"text-sm text-gray-600","children":"25% Complete"}]]}],false]}]]}]]}],null],null],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L8",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
