2:I[2972,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-b4f9b7b2865ef07e.js"],""]
3:I[5907,["918","static/chunks/918-3273b83890f10546.js","972","static/chunks/972-011bba60ed155615.js","930","static/chunks/930-3262a6c9c5acace4.js","289","static/chunks/app/learn/%5Btopic%5D/page-b4f9b7b2865ef07e.js"],"default"]
5:I[4707,[],""]
7:I[6423,[],""]
8:I[2,["918","static/chunks/918-3273b83890f10546.js","710","static/chunks/710-dfaa11b4dff08f8e.js","972","static/chunks/972-011bba60ed155615.js","233","static/chunks/233-3e0c1d820a17eca9.js","185","static/chunks/app/layout-333f4adcd11f8f39.js"],"default",1]
4:T3246,
# Valid Anagram

**LeetCode Problem # * 242. Valid Anagram**

## Problem Description

 * Given two strings s and t, return true if t is an anagram of s, and false otherwise.  *  * An Anagram is a word or phrase formed by rearranging the letters of a different word  * or phrase, typically using all the original letters exactly once.  * 

## Solutions

{% raw %}
/**
 * 242. Valid Anagram
 *
 * Problem:
 * Given two strings s and t, return true if t is an anagram of s, and false otherwise.
 *
 * An Anagram is a word or phrase formed by rearranging the letters of a different word
 * or phrase, typically using all the original letters exactly once.
 *
 * Example:
 * Input: s = "anagram", t = "nagaram"
 * Output: true
 *
 * Input: s = "rat", t = "car"
 * Output: false
 *
 * LeetCode: https://leetcode.com/problems/valid-anagram/
 */

/**
 * Solution 1: Hash Map (Optimal)
 *
 * Approach:
 * - Use hash map to count frequency of characters in both strings
 * - Compare character frequencies
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1) - fixed size alphabet
 */
function isAnagram(s: string, t: string): boolean {
  if (s.length !== t.length) return false;

  const frequency = new Map<string, number>();

  // Count characters in s
  for (const char of s) {
    frequency.set(char, (frequency.get(char) || 0) + 1);
  }

  // Decrement counts for characters in t
  for (const char of t) {
    const count = frequency.get(char);
    if (!count) return false;
    frequency.set(char, count - 1);
  }

  return true;
}

/**
 * Solution 2: Array (Fixed size)
 *
 * Approach:
 * - Use array of size 26 for lowercase letters
 * - More efficient for ASCII characters
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function isAnagramArray(s: string, t: string): boolean {
  if (s.length !== t.length) return false;

  const frequency = new Array(26).fill(0);

  // Count characters in s
  for (const char of s) {
    frequency[char.charCodeAt(0) - "a".charCodeAt(0)]++;
  }

  // Decrement counts for characters in t
  for (const char of t) {
    const index = char.charCodeAt(0) - "a".charCodeAt(0);
    frequency[index]--;
    if (frequency[index] < 0) return false;
  }

  return true;
}

/**
 * Solution 3: Sort and Compare
 *
 * Approach:
 * - Sort both strings and compare
 * - Simple but less efficient
 *
 * Time Complexity: O(n log n)
 * Space Complexity: O(n)
 */
function isAnagramSort(s: string, t: string): boolean {
  if (s.length !== t.length) return false;

  const sortedS = s.split("").sort().join("");
  const sortedT = t.split("").sort().join("");

  return sortedS === sortedT;
}

/**
 * Solution 4: Using Object (Hash table)
 *
 * Approach:
 * - Use plain object as hash table
 * - Simple implementation
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function isAnagramObject(s: string, t: string): boolean {
  if (s.length !== t.length) return false;

  const frequency: { [key: string]: number } = {};

  // Count characters in s
  for (const char of s) {
    frequency[char] = (frequency[char] || 0) + 1;
  }

  // Decrement counts for characters in t
  for (const char of t) {
    if (!frequency[char]) return false;
    frequency[char]--;
  }

  return true;
}

/**
 * Solution 5: Using Set (Incorrect but educational)
 *
 * Approach:
 * - This approach is INCORRECT for anagram detection
 * - Shows common mistake of using Set for frequency problems
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function isAnagramSet(s: string, t: string): boolean {
  if (s.length !== t.length) return false;

  const setS = new Set(s);
  const setT = new Set(t);

  return setS.size === setT.size && [...setS].every((char) => setT.has(char));
}

/**
 * Solution 6: Using Reduce (Functional)
 *
 * Approach:
 * - Use functional programming approach
 * - More declarative style
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function isAnagramFunctional(s: string, t: string): boolean {
  if (s.length !== t.length) return false;

  const frequencyS = s
    .split("")
    .reduce((acc: { [key: string]: number }, char: string) => {
      acc[char] = (acc[char] || 0) + 1;
      return acc;
    }, {});

  const frequencyT = t
    .split("")
    .reduce((acc: { [key: string]: number }, char: string) => {
      acc[char] = (acc[char] || 0) + 1;
      return acc;
    }, {});

  return JSON.stringify(frequencyS) === JSON.stringify(frequencyT);
}

/**
 * Solution 7: Using Counter Class (Object-oriented)
 *
 * Approach:
 * - Create a Counter class to handle frequency counting
 * - More structured approach
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
class Counter {
  private counts: Map<string, number> = new Map();

  constructor(items: string) {
    for (const item of items) {
      this.add(item);
    }
  }

  add(item: string): void {
    this.counts.set(item, (this.counts.get(item) || 0) + 1);
  }

  equals(other: Counter): boolean {
    if (this.counts.size !== other.counts.size) return false;

    for (const [key, value] of this.counts) {
      if (other.counts.get(key) !== value) return false;
    }

    return true;
  }
}

function isAnagramCounter(s: string, t: string): boolean {
  if (s.length !== t.length) return false;

  const counterS = new Counter(s);
  const counterT = new Counter(t);

  return counterS.equals(counterT);
}

/**
 * Solution 8: Using Generator (Memory efficient)
 *
 * Approach:
 * - Use generator to yield characters
 * - Memory efficient for large strings
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function* characterGenerator(str: string): Generator<string> {
  for (const char of str) {
    yield char;
  }
}

function isAnagramGenerator(s: string, t: string): boolean {
  if (s.length !== t.length) return false;

  const frequency = new Map<string, number>();

  // Count characters in s
  for (const char of characterGenerator(s)) {
    frequency.set(char, (frequency.get(char) || 0) + 1);
  }

  // Decrement counts for characters in t
  for (const char of characterGenerator(t)) {
    const count = frequency.get(char);
    if (!count) return false;
    frequency.set(char, count - 1);
  }

  return true;
}

/**
 * Solution 9: Using Bit Manipulation (Limited use case)
 *
 * Approach:
 * - Use bit operations for ASCII characters
 * - Limited to small strings due to integer size
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
function isAnagramBitwise(s: string, t: string): boolean {
  if (s.length !== t.length) return false;
  if (s.length > 32) {
    // Fallback to standard approach for large strings
    return isAnagram(s, t);
  }

  let sBits = 0;
  let tBits = 0;

  for (const char of s) {
    const bit = 1 << (char.charCodeAt(0) - "a".charCodeAt(0));
    sBits |= bit;
  }

  for (const char of t) {
    const bit = 1 << (char.charCodeAt(0) - "a".charCodeAt(0));
    tBits |= bit;
  }

  return sBits === tBits;
}

// Test cases
function testValidAnagram() {
  console.log("=== Testing Valid Anagram ===\n");

  const testCases = [
    {
      s: "anagram",
      t: "nagaram",
      expected: true,
      description: "Valid anagram",
    },
    {
      s: "rat",
      t: "car",
      expected: false,
      description: "Not an anagram",
    },
    {
      s: "",
      t: "",
      expected: true,
      description: "Empty strings",
    },
    {
      s: "a",
      t: "a",
      expected: true,
      description: "Single character",
    },
    {
      s: "ab",
      t: "ba",
      expected: true,
      description: "Two characters",
    },
    {
      s: "abc",
      t: "cba",
      expected: true,
      description: "Three characters",
    },
    {
      s: "hello",
      t: "world",
      expected: false,
      description: "Different lengths",
    },
    {
      s: "silent",
      t: "listen",
      expected: true,
      description: "Common anagram pair",
    },
  ];

  testCases.forEach((testCase, index) => {
    console.log(`Test Case ${index + 1}: ${testCase.description}`);
    console.log(`Input: s = "${testCase.s}", t = "${testCase.t}"`);
    console.log(`Expected: ${testCase.expected}\n`);

    // Test Solution 1 (Hash Map)
    const result1 = isAnagram(testCase.s, testCase.t);
    console.log(
      `Solution 1 (Hash Map): ${result1} ${
        result1 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 2 (Array)
    const result2 = isAnagramArray(testCase.s, testCase.t);
    console.log(
      `Solution 2 (Array): ${result2} ${
        result2 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 3 (Sort)
    const result3 = isAnagramSort(testCase.s, testCase.t);
    console.log(
      `Solution 3 (Sort): ${result3} ${
        result3 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 4 (Object)
    const result4 = isAnagramObject(testCase.s, testCase.t);
    console.log(
      `Solution 4 (Object): ${result4} ${
        result4 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 5 (Set) - Note: This is incorrect for frequency problems
    const result5 = isAnagramSet(testCase.s, testCase.t);
    console.log(
      `Solution 5 (Set): ${result5} ${
        result5 === testCase.expected ? "✅" : "❌"
      } (Note: Incorrect for frequency)`
    );

    // Test Solution 6 (Functional)
    const result6 = isAnagramFunctional(testCase.s, testCase.t);
    console.log(
      `Solution 6 (Functional): ${result6} ${
        result6 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 7 (Counter)
    const result7 = isAnagramCounter(testCase.s, testCase.t);
    console.log(
      `Solution 7 (Counter): ${result7} ${
        result7 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 8 (Generator)
    const result8 = isAnagramGenerator(testCase.s, testCase.t);
    console.log(
      `Solution 8 (Generator): ${result8} ${
        result8 === testCase.expected ? "✅" : "❌"
      }`
    );

    // Test Solution 9 (Bitwise)
    const result9 = isAnagramBitwise(testCase.s, testCase.t);
    console.log(
      `Solution 9 (Bitwise): ${result9} ${
        result9 === testCase.expected ? "✅" : "❌"
      }`
    );

    console.log("\n---\n");
  });
}

// Performance comparison
function performanceComparison() {
  console.log("=== Performance Comparison ===\n");

  const testCases = [
    { name: "Hash Map", func: isAnagram },
    { name: "Array", func: isAnagramArray },
    { name: "Sort", func: isAnagramSort },
    { name: "Object", func: isAnagramObject },
    { name: "Set", func: isAnagramSet },
    { name: "Functional", func: isAnagramFunctional },
    { name: "Counter", func: isAnagramCounter },
    { name: "Generator", func: isAnagramGenerator },
    { name: "Bitwise", func: isAnagramBitwise },
  ];

  // Create test strings
  const smallS = "anagram";
  const smallT = "nagaram";
  const largeS = "a".repeat(1000) + "b".repeat(1000);
  const largeT = "b".repeat(1000) + "a".repeat(1000);

  const stringPairs = [
    { name: "Small", s: smallS, t: smallT },
    { name: "Large", s: largeS, t: largeT },
  ];

  stringPairs.forEach(({ name, s, t }) => {
    console.log(`${name} Strings:`);

    testCases.forEach(({ name: funcName, func }) => {
      const start = performance.now();
      const result = func(s, t);
      const end = performance.now();

      console.log(`  ${funcName}: ${(end - start).toFixed(2)}ms (${result})`);
    });

    console.log("");
  });
}

// Anagram analysis
function anagramAnalysis() {
  console.log("=== Anagram Analysis ===\n");

  const testPairs = [
    { s: "anagram", t: "nagaram" },
    { s: "silent", t: "listen" },
    { s: "hello", t: "world" },
    { s: "abc", t: "cba" },
  ];

  testPairs.forEach(({ s, t }, index) => {
    console.log(`Pair ${index + 1}: "${s}" vs "${t}"`);

    const frequencyS = new Map<string, number>();
    const frequencyT = new Map<string, number>();

    // Count frequencies
    for (const char of s) {
      frequencyS.set(char, (frequencyS.get(char) || 0) + 1);
    }

    for (const char of t) {
      frequencyT.set(char, (frequencyT.get(char) || 0) + 1);
    }

    console.log("Character frequencies:");
    console.log(`  S: ${JSON.stringify(Object.fromEntries(frequencyS))}`);
    console.log(`  T: ${JSON.stringify(Object.fromEntries(frequencyT))}`);

    const isAnagramResult = isAnagram(s, t);
    console.log(`  Is anagram: ${isAnagramResult}`);
    console.log("");
  });
}

// Uncomment the following lines to run tests
// testValidAnagram();
// performanceComparison();
// anagramAnalysis();

export {
  isAnagram,
  isAnagramArray,
  isAnagramSort,
  isAnagramObject,
  isAnagramSet,
  isAnagramFunctional,
  isAnagramCounter,
  isAnagramGenerator,
  isAnagramBitwise,
  Counter,
  characterGenerator,
  testValidAnagram,
  performanceComparison,
  anagramAnalysis,
};
{% endraw %}
6:["topic","string-problems-04-valid-anagram","d"]
0:["fjDGwqtt1UnBZeA2uH4xO",[[["",{"children":["learn",{"children":[["topic","string-problems-04-valid-anagram","d"],{"children":["__PAGE__?{\"topic\":\"string-problems-04-valid-anagram\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["learn",{"children":[["topic","string-problems-04-valid-anagram","d"],{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"max-w-6xl mx-auto px-8 py-24","children":[["$","div",null,{"className":"flex items-center gap-4 mb-8","children":["$","$L2",null,{"href":"/learn","children":["$","button",null,{"className":"flex items-center gap-2 bg-gray-100 border border-gray-300 text-gray-700 px-4 py-3 rounded-md font-medium hover:bg-gray-200 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left ","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Learn"]}]}]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8 mb-8","children":[["$","div",null,{"className":"flex items-center justify-between mb-4","children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900","children":"Valid Anagram"}],["$","div",null,{"className":"flex gap-4","children":[["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-star ","children":[["$","polygon","8f66p6",{"points":"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"}],"$undefined"]}],"Bookmark"]}],["$","button",null,{"className":"flex items-center gap-2 bg-transparent text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-semibold hover:bg-gray-50 transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-share2 ","children":[["$","circle","gq8acd",{"cx":"18","cy":"5","r":"3"}],["$","circle","w7nqdw",{"cx":"6","cy":"12","r":"3"}],["$","circle","1xt0gg",{"cx":"18","cy":"19","r":"3"}],["$","line","47mynk",{"x1":"8.59","x2":"15.42","y1":"13.51","y2":"17.49"}],["$","line","1n3mei",{"x1":"15.41","x2":"8.59","y1":"6.51","y2":"10.49"}],"$undefined"]}],"Share"]}]]}]]}],["$","div",null,{"className":"flex gap-8 mb-4","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-gray-600","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock ","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],"2-3 hours"]}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold text-white bg-red-500","children":"Easy"}],["$","span",null,{"className":"px-3 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700","children":"String"}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","0",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"String"}],["$","span","1",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Hash Table"}],["$","span","2",{"className":"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs font-medium","children":"Sorting"}]]}],["$","p",null,{"className":"text-lg text-gray-700 leading-relaxed","children":"**LeetCode Problem # * 242. Valid Anagram**..."}]]}],["$","div",null,{"className":"grid grid-cols-1 lg:grid-cols-3 gap-8","children":[["$","div",null,{"className":"lg:col-span-2","children":["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-8","children":["$","$L3",null,{"content":"$4"}]}]}],["$","div",null,{"className":"space-y-6","children":[["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"text-lg font-semibold text-gray-900 mb-4","children":"Your Progress"}],["$","div",null,{"className":"w-full bg-gray-200 rounded-full h-2 mb-2","children":["$","div",null,{"className":"bg-blue-600 h-2 rounded-full","style":{"width":"25%"}}]}],["$","p",null,{"className":"text-sm text-gray-600","children":"25% Complete"}]]}],false]}]]}]]}],null],null],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","learn","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/interview/_next/static/css/387024c6a2216908.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L8",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],"params":{}}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
