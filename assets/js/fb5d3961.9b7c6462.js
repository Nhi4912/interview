"use strict";(self.webpackChunkfrontend_interview_guide=self.webpackChunkfrontend_interview_guide||[]).push([[9475],{6559:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>a,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"frontend/coding-problems/infinite-scroll","title":"Infinite Scroll Implementation","description":"Problem Description","source":"@site/docs/frontend/coding-problems/infinite-scroll.md","sourceDirName":"frontend/coding-problems","slug":"/frontend/coding-problems/infinite-scroll","permalink":"/interview/docs/frontend/coding-problems/infinite-scroll","draft":false,"unlisted":false,"editUrl":"https://github.com/Nhi4912/interview/tree/main/docs/frontend/coding-problems/infinite-scroll.md","tags":[],"version":"current","frontMatter":{},"sidebar":"frontendSidebar","previous":{"title":"Problem: Autocomplete Component","permalink":"/interview/docs/frontend/coding-problems/autocomplete"},"next":{"title":"Problem: Accessible Modal Dialog","permalink":"/interview/docs/frontend/coding-problems/modal-dialog"}}');var s=i(4848),o=i(8453);const r={},l="Infinite Scroll Implementation",a={},d=[{value:"Problem Description",id:"problem-description",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Solution",id:"solution",level:2},{value:"CSS Styling",id:"css-styling",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Advanced Usage",id:"advanced-usage",level:2}];function c(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"infinite-scroll-implementation",children:"Infinite Scroll Implementation"})}),"\n",(0,s.jsx)(e.h2,{id:"problem-description",children:"Problem Description"}),"\n",(0,s.jsx)(e.p,{children:"Implement infinite scroll functionality for a list of items."}),"\n",(0,s.jsx)(e.h2,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Load items in batches"}),"\n",(0,s.jsx)(e.li,{children:"Show loading indicator"}),"\n",(0,s.jsx)(e.li,{children:"Handle scroll events efficiently"}),"\n",(0,s.jsx)(e.li,{children:"Support search/filtering"}),"\n",(0,s.jsx)(e.li,{children:"Maintain scroll position"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"solution",children:"Solution"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'class InfiniteScroll {\n  constructor(containerId, options = {}) {\n    this.container = document.getElementById(containerId);\n    this.items = [];\n    this.currentPage = 0;\n    this.loading = false;\n    this.hasMore = true;\n\n    this.options = {\n      itemsPerPage: 20,\n      threshold: 100, // pixels from bottom to trigger load\n      ...options,\n    };\n\n    this.init();\n  }\n\n  init() {\n    this.setupContainer();\n    this.attachScrollListener();\n    this.loadMoreItems();\n  }\n\n  setupContainer() {\n    this.container.innerHTML = `\n      <div class="infinite-scroll-container">\n        <div class="items-list"></div>\n        <div class="loading-indicator" style="display: none;">\n          <div class="spinner"></div>\n          <span>Loading more items...</span>\n        </div>\n        <div class="no-more-items" style="display: none;">\n          No more items to load\n        </div>\n      </div>\n    `;\n\n    this.itemsList = this.container.querySelector(".items-list");\n    this.loadingIndicator = this.container.querySelector(".loading-indicator");\n    this.noMoreItems = this.container.querySelector(".no-more-items");\n  }\n\n  attachScrollListener() {\n    let scrollTimeout;\n\n    window.addEventListener("scroll", () => {\n      clearTimeout(scrollTimeout);\n\n      scrollTimeout = setTimeout(() => {\n        this.checkScrollPosition();\n      }, 100);\n    });\n  }\n\n  checkScrollPosition() {\n    if (this.loading || !this.hasMore) return;\n\n    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n    const windowHeight = window.innerHeight;\n    const documentHeight = document.documentElement.scrollHeight;\n\n    if (scrollTop + windowHeight >= documentHeight - this.options.threshold) {\n      this.loadMoreItems();\n    }\n  }\n\n  async loadMoreItems() {\n    if (this.loading) return;\n\n    this.loading = true;\n    this.showLoading(true);\n\n    try {\n      const newItems = await this.fetchItems(\n        this.currentPage,\n        this.options.itemsPerPage\n      );\n\n      if (newItems.length === 0) {\n        this.hasMore = false;\n        this.showNoMoreItems();\n      } else {\n        this.items.push(...newItems);\n        this.renderItems(newItems);\n        this.currentPage++;\n      }\n    } catch (error) {\n      console.error("Error loading items:", error);\n      this.showError("Failed to load items");\n    } finally {\n      this.loading = false;\n      this.showLoading(false);\n    }\n  }\n\n  async fetchItems(page, limit) {\n    // Simulate API call\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        const startIndex = page * limit;\n        const endIndex = startIndex + limit;\n        const items = [];\n\n        for (let i = startIndex; i < endIndex; i++) {\n          if (i < 1000) {\n            // Simulate limited data\n            items.push({\n              id: i,\n              title: `Item ${i + 1}`,\n              description: `This is the description for item ${i + 1}`,\n              image: `https://picsum.photos/200/200?random=${i}`,\n            });\n          }\n        }\n\n        resolve(items);\n      }, 1000);\n    });\n  }\n\n  renderItems(items) {\n    const itemsHTML = items\n      .map(\n        (item) => `\n      <div class="item-card" data-id="${item.id}">\n        <img src="${item.image}" alt="${item.title}" class="item-image">\n        <div class="item-content">\n          <h3 class="item-title">${item.title}</h3>\n          <p class="item-description">${item.description}</p>\n        </div>\n      </div>\n    `\n      )\n      .join("");\n\n    this.itemsList.insertAdjacentHTML("beforeend", itemsHTML);\n  }\n\n  showLoading(show) {\n    this.loadingIndicator.style.display = show ? "flex" : "none";\n  }\n\n  showNoMoreItems() {\n    this.noMoreItems.style.display = "block";\n  }\n\n  showError(message) {\n    const errorDiv = document.createElement("div");\n    errorDiv.className = "error-message";\n    errorDiv.textContent = message;\n    this.container.appendChild(errorDiv);\n\n    setTimeout(() => {\n      errorDiv.remove();\n    }, 3000);\n  }\n\n  // Public methods\n  refresh() {\n    this.items = [];\n    this.currentPage = 0;\n    this.hasMore = true;\n    this.itemsList.innerHTML = "";\n    this.noMoreItems.style.display = "none";\n    this.loadMoreItems();\n  }\n\n  search(query) {\n    // Implement search functionality\n    this.refresh();\n  }\n}\n\n// Usage\nconst infiniteScroll = new InfiniteScroll("infinite-scroll-container");\n'})}),"\n",(0,s.jsx)(e.h2,{id:"css-styling",children:"CSS Styling"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-css",children:".infinite-scroll-container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.items-list {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.item-card {\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  overflow: hidden;\n  transition: transform 0.2s, box-shadow 0.2s;\n}\n\n.item-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.item-image {\n  width: 100%;\n  height: 200px;\n  object-fit: cover;\n}\n\n.item-content {\n  padding: 16px;\n}\n\n.item-title {\n  margin: 0 0 8px 0;\n  font-size: 18px;\n  font-weight: 600;\n}\n\n.item-description {\n  margin: 0;\n  color: #666;\n  line-height: 1.5;\n}\n\n.loading-indicator {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 12px;\n  padding: 20px;\n  color: #666;\n}\n\n.spinner {\n  width: 20px;\n  height: 20px;\n  border: 2px solid #f3f3f3;\n  border-top: 2px solid #007bff;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n.no-more-items {\n  text-align: center;\n  padding: 20px;\n  color: #666;\n  font-style: italic;\n}\n\n.error-message {\n  background-color: #f8d7da;\n  color: #721c24;\n  padding: 12px;\n  border-radius: 4px;\n  margin: 10px 0;\n  text-align: center;\n}\n\n@media (max-width: 768px) {\n  .items-list {\n    grid-template-columns: 1fr;\n  }\n\n  .item-card {\n    margin-bottom: 16px;\n  }\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"key-features",children:"Key Features"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Efficient Scroll Handling"}),": Uses debounced scroll events to prevent excessive function calls"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Loading States"}),": Clear visual feedback during data loading"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Error Handling"}),": Graceful error handling with user feedback"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Responsive Design"}),": Adapts to different screen sizes"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Performance Optimized"}),": Only loads data when needed"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Extensible"}),": Easy to add search, filtering, and other features"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'// With custom options\nconst advancedInfiniteScroll = new InfiniteScroll("container", {\n  itemsPerPage: 50,\n  threshold: 200,\n  searchEnabled: true,\n  filterOptions: {\n    category: "all",\n    sortBy: "date",\n  },\n});\n\n// With custom item renderer\nclass CustomInfiniteScroll extends InfiniteScroll {\n  renderItems(items) {\n    const itemsHTML = items\n      .map(\n        (item) => `\n      <div class="custom-item">\n        <h3>${item.title}</h3>\n        <p>${item.description}</p>\n        <button onclick="handleItemClick(${item.id})">View Details</button>\n      </div>\n    `\n      )\n      .join("");\n\n    this.itemsList.insertAdjacentHTML("beforeend", itemsHTML);\n  }\n}\n'})})]})}function m(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>r,x:()=>l});var t=i(6540);const s={},o=t.createContext(s);function r(n){const e=t.useContext(o);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),t.createElement(o.Provider,{value:e},n.children)}}}]);