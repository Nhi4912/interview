"use strict";(self.webpackChunkfrontend_interview_guide=self.webpackChunkfrontend_interview_guide||[]).push([[9732],{4814:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>a});var i=s(4848),t=s(8453);const r={},l="Networking Interview Preparation",o={id:"frontend/networking/README",title:"Networking Interview Preparation",description:"Core Concepts",source:"@site/docs/frontend/networking/README.md",sourceDirName:"frontend/networking",slug:"/frontend/networking/",permalink:"/interview/docs/frontend/networking/",draft:!1,unlisted:!1,editUrl:"https://github.com/Nhi4912/interview/tree/main/docs/frontend/networking/README.md",tags:[],version:"current",frontMatter:{},sidebar:"frontendSidebar",previous:{title:"Problem: Lazy Loading Images and Components",permalink:"/interview/docs/frontend/performance/lazy-loading"},next:{title:"Problem: API Integration and Error Handling",permalink:"/interview/docs/frontend/networking/api-integration"}},c={},a=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"HTTP Fundamentals",id:"http-fundamentals",level:3},{value:"HTTPS &amp; Security",id:"https--security",level:3},{value:"Web APIs",id:"web-apis",level:3},{value:"Advanced Topics",id:"advanced-topics",level:2},{value:"Network Performance",id:"network-performance",level:3},{value:"Browser Networking",id:"browser-networking",level:3},{value:"Common Interview Questions &amp; Answers",id:"common-interview-questions--answers",level:2},{value:"HTTP Questions",id:"http-questions",level:3},{value:"CORS Questions",id:"cors-questions",level:3},{value:"WebSocket Questions",id:"websocket-questions",level:3},{value:"Advanced Interview Questions",id:"advanced-interview-questions",level:2},{value:"Practical Problems &amp; Solutions",id:"practical-problems--solutions",level:2},{value:"Problem 1: Implement a Retry Mechanism",id:"problem-1-implement-a-retry-mechanism",level:3},{value:"Problem 2: Create a Request Queue",id:"problem-2-create-a-request-queue",level:3},{value:"Problem 3: Implement Request/Response Interceptors",id:"problem-3-implement-requestresponse-interceptors",level:3},{value:"Problem 4: Create a WebSocket Manager",id:"problem-4-create-a-websocket-manager",level:3},{value:"Problem 5: Implement API Rate Limiting",id:"problem-5-implement-api-rate-limiting",level:3},{value:"Network Optimization Techniques",id:"network-optimization-techniques",level:2},{value:"Resource Hints",id:"resource-hints",level:3},{value:"Service Worker Caching",id:"service-worker-caching",level:3},{value:"HTTP/2 Server Push",id:"http2-server-push",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Security",id:"security",level:3},{value:"Performance",id:"performance",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Resources",id:"resources",level:2},{value:"Documentation",id:"documentation",level:3},{value:"Tools",id:"tools",level:3},{value:"Practice Platforms",id:"practice-platforms",level:3},{value:"Q2: Explain the difference between TCP and UDP",id:"q2-explain-the-difference-between-tcp-and-udp",level:4},{value:"Q3: What is a CDN and how does it work?",id:"q3-what-is-a-cdn-and-how-does-it-work",level:4},{value:"Q4: Explain the difference between REST and GraphQL",id:"q4-explain-the-difference-between-rest-and-graphql",level:4},{value:"Advanced Topics",id:"advanced-topics-1",level:2},{value:"Modern Web Protocols",id:"modern-web-protocols",level:3},{value:"1. HTTP/3",id:"1-http3",level:4},{value:"2. WebRTC",id:"2-webrtc",level:4},{value:"3. Server-Sent Events (SSE)",id:"3-server-sent-events-sse",level:4},{value:"API Design Patterns",id:"api-design-patterns",level:3},{value:"1. RESTful Design",id:"1-restful-design",level:4},{value:"2. GraphQL Schema Design",id:"2-graphql-schema-design",level:4},{value:"Security",id:"security-1",level:2},{value:"Common Security Issues",id:"common-security-issues",level:3},{value:"1. XSS (Cross-Site Scripting)",id:"1-xss-cross-site-scripting",level:4},{value:"2. CSRF (Cross-Site Request Forgery)",id:"2-csrf-cross-site-request-forgery",level:4},{value:"3. SQL Injection",id:"3-sql-injection",level:4},{value:"Authentication &amp; Authorization",id:"authentication--authorization",level:3},{value:"1. JWT (JSON Web Tokens)",id:"1-jwt-json-web-tokens",level:4},{value:"2. OAuth 2.0",id:"2-oauth-20",level:4},{value:"Performance",id:"performance-1",level:2},{value:"Optimization Techniques",id:"optimization-techniques",level:3},{value:"1. HTTP/2 Optimization",id:"1-http2-optimization",level:4},{value:"2. Caching Strategies",id:"2-caching-strategies",level:4},{value:"3. Compression",id:"3-compression",level:4},{value:"Practice Problems",id:"practice-problems",level:2},{value:"Problem 1: Design a REST API",id:"problem-1-design-a-rest-api",level:3},{value:"Problem 2: Implement Authentication",id:"problem-2-implement-authentication",level:3},{value:"Problem 3: Create a Real-time Chat",id:"problem-3-create-a-real-time-chat",level:3},{value:"Problem 4: Design a CDN Strategy",id:"problem-4-design-a-cdn-strategy",level:3},{value:"Problem 5: Build a GraphQL API",id:"problem-5-build-a-graphql-api",level:3},{value:"Problem 6: Implement CORS",id:"problem-6-implement-cors",level:3},{value:"Problem 7: Design a Rate Limiting System",id:"problem-7-design-a-rate-limiting-system",level:3},{value:"Problem 8: Create a WebRTC Application",id:"problem-8-create-a-webrtc-application",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"networking-interview-preparation",children:"Networking Interview Preparation"}),"\n",(0,i.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,i.jsx)(n.h3,{id:"http-fundamentals",children:"HTTP Fundamentals"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"HTTP Methods"}),": GET, POST, PUT, DELETE, PATCH, HEAD, OPTIONS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Status Codes"}),": 1xx (Informational), 2xx (Success), 3xx (Redirection), 4xx (Client Error), 5xx (Server Error)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Headers"}),": Request/Response headers, content negotiation, caching"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Request/Response Cycle"}),": How HTTP communication works"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Stateless Nature"}),": Each request is independent"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"https--security",children:"HTTPS & Security"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SSL/TLS"}),": Encryption protocols"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Certificates"}),": Digital certificates and validation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mixed Content"}),": HTTP/HTTPS security issues"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CORS"}),": Cross-Origin Resource Sharing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Security Headers"}),": CSP, HSTS, X-Frame-Options"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"web-apis",children:"Web APIs"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"REST APIs"}),": Representational State Transfer"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GraphQL"}),": Query language for APIs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"WebSockets"}),": Real-time bidirectional communication"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Server-Sent Events"}),": One-way real-time updates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"gRPC"}),": High-performance RPC framework"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"advanced-topics",children:"Advanced Topics"}),"\n",(0,i.jsx)(n.h3,{id:"network-performance",children:"Network Performance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"HTTP/2"}),": Multiplexing, server push, header compression"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"HTTP/3"}),": QUIC protocol, improved performance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CDN"}),": Content Delivery Networks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Caching Strategies"}),": Browser, CDN, application caching"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Compression"}),": Gzip, Brotli, compression optimization"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"browser-networking",children:"Browser Networking"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Connection Limits"}),": Browser connection pooling"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Resource Hints"}),": Preload, prefetch, preconnect"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Service Workers"}),": Offline capabilities, caching"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Progressive Web Apps"}),": Network-independent apps"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-interview-questions--answers",children:"Common Interview Questions & Answers"}),"\n",(0,i.jsx)(n.h3,{id:"http-questions",children:"HTTP Questions"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Q: Explain the difference between HTTP and HTTPS."}),"\nA:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"HTTP"}),": Unencrypted, data sent in plain text, vulnerable to interception"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"HTTPS"}),": Encrypted using SSL/TLS, secure communication, requires certificate"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ports"}),": HTTP uses port 80, HTTPS uses port 443"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Security"}),": HTTPS provides confidentiality, integrity, and authentication"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Q: What are the main HTTP methods and when would you use each?"}),"\nA:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GET"}),": Retrieve data (idempotent, cacheable)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"POST"}),": Create new resource (not idempotent, not cacheable)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PUT"}),": Update entire resource (idempotent)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PATCH"}),": Partial update (not idempotent)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"DELETE"}),": Remove resource (idempotent)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"HEAD"}),": Get headers only (idempotent, cacheable)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"OPTIONS"}),": Get allowed methods"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Q: Explain HTTP status codes 200, 201, 400, 401, 403, 404, 500."}),"\nA:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"200 OK"}),": Request successful"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"201 Created"}),": Resource created successfully"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"400 Bad Request"}),": Client error in request"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"401 Unauthorized"}),": Authentication required"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"403 Forbidden"}),": Authenticated but not authorized"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"404 Not Found"}),": Resource not found"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"500 Internal Server Error"}),": Server error"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"cors-questions",children:"CORS Questions"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Q: What is CORS and why is it needed?"}),"\nA: CORS (Cross-Origin Resource Sharing) is a security feature that controls which domains can access resources from your domain. It prevents malicious websites from making requests to your API on behalf of users."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Q: How do you handle CORS in a web application?"}),"\nA:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Server-side (Node.js/Express)\napp.use(\n  cors({\n    origin: ["https://yourdomain.com", "https://app.yourdomain.com"],\n    methods: ["GET", "POST", "PUT", "DELETE"],\n    allowedHeaders: ["Content-Type", "Authorization"],\n    credentials: true,\n  })\n);\n\n// Client-side\nfetch("https://api.example.com/data", {\n  method: "POST",\n  headers: {\n    "Content-Type": "application/json",\n  },\n  credentials: "include", // Include cookies\n  body: JSON.stringify(data),\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"websocket-questions",children:"WebSocket Questions"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Q: When would you use WebSockets instead of HTTP?"}),"\nA: Use WebSockets for:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Real-time applications (chat, gaming, live updates)"}),"\n",(0,i.jsx)(n.li,{children:"Bidirectional communication"}),"\n",(0,i.jsx)(n.li,{children:"Low-latency requirements"}),"\n",(0,i.jsx)(n.li,{children:"Persistent connections"}),"\n",(0,i.jsx)(n.li,{children:"Server push notifications"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Q: How do you implement a WebSocket connection?"}),"\nA:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Client-side\nconst socket = new WebSocket("wss://api.example.com/ws");\n\nsocket.onopen = function (event) {\n  console.log("Connected to WebSocket");\n  socket.send(JSON.stringify({ type: "join", room: "chat" }));\n};\n\nsocket.onmessage = function (event) {\n  const data = JSON.parse(event.data);\n  console.log("Received:", data);\n};\n\nsocket.onclose = function (event) {\n  console.log("Disconnected from WebSocket");\n};\n\n// Server-side (Node.js with ws library)\nconst WebSocket = require("ws");\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on("connection", function connection(ws) {\n  ws.on("message", function incoming(message) {\n    const data = JSON.parse(message);\n    // Handle message\n    ws.send(JSON.stringify({ type: "response", data: "processed" }));\n  });\n});\n'})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-interview-questions",children:"Advanced Interview Questions"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Q: How does HTTP/2 improve performance over HTTP/1.1?"}),"\nA: HTTP/2 improvements:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multiplexing"}),": Multiple requests over single connection"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Server Push"}),": Server can push resources proactively"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Header Compression"}),": HPACK compression for headers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Binary Protocol"}),": More efficient than text-based HTTP/1.1"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Stream Prioritization"}),": Prioritize important resources"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Q: Explain the difference between REST and GraphQL."}),"\nA:\n",(0,i.jsx)(n.strong,{children:"REST"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Multiple endpoints for different resources"}),"\n",(0,i.jsx)(n.li,{children:"Over-fetching/under-fetching issues"}),"\n",(0,i.jsx)(n.li,{children:"Stateless, cacheable"}),"\n",(0,i.jsx)(n.li,{children:"Simple to implement"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"GraphQL"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Single endpoint for all data"}),"\n",(0,i.jsx)(n.li,{children:"Precise data fetching"}),"\n",(0,i.jsx)(n.li,{children:"Strong typing system"}),"\n",(0,i.jsx)(n.li,{children:"Introspection capabilities"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Q: How would you implement request caching in a frontend application?"}),"\nA:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class RequestCache {\n  constructor() {\n    this.cache = new Map();\n    this.maxAge = 5 * 60 * 1000; // 5 minutes\n  }\n\n  async get(url, options = {}) {\n    const key = this.generateKey(url, options);\n    const cached = this.cache.get(key);\n\n    if (cached && Date.now() - cached.timestamp < this.maxAge) {\n      return cached.data;\n    }\n\n    const response = await fetch(url, options);\n    const data = await response.json();\n\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now(),\n    });\n\n    return data;\n  }\n\n  generateKey(url, options) {\n    return `${url}-${JSON.stringify(options)}`;\n  }\n\n  clear() {\n    this.cache.clear();\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"practical-problems--solutions",children:"Practical Problems & Solutions"}),"\n",(0,i.jsx)(n.h3,{id:"problem-1-implement-a-retry-mechanism",children:"Problem 1: Implement a Retry Mechanism"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Challenge"}),": Create a function that retries failed HTTP requests with exponential backoff."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'async function fetchWithRetry(url, options = {}, maxRetries = 3) {\n  let lastError;\n\n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\n    try {\n      const response = await fetch(url, options);\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return response;\n    } catch (error) {\n      lastError = error;\n\n      if (attempt === maxRetries) {\n        throw lastError;\n      }\n\n      // Exponential backoff: 1s, 2s, 4s\n      const delay = Math.pow(2, attempt) * 1000;\n      await new Promise((resolve) => setTimeout(resolve, delay));\n    }\n  }\n}\n\n// Usage\ntry {\n  const response = await fetchWithRetry("https://api.example.com/data", {\n    method: "POST",\n    headers: { "Content-Type": "application/json" },\n    body: JSON.stringify({ data: "test" }),\n  });\n  const data = await response.json();\n  console.log(data);\n} catch (error) {\n  console.error("Request failed after retries:", error);\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"problem-2-create-a-request-queue",children:"Problem 2: Create a Request Queue"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Challenge"}),": Implement a queue system to limit concurrent requests and prevent overwhelming the server."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'class RequestQueue {\n  constructor(maxConcurrent = 3) {\n    this.maxConcurrent = maxConcurrent;\n    this.running = 0;\n    this.queue = [];\n  }\n\n  async add(requestFn) {\n    return new Promise((resolve, reject) => {\n      this.queue.push({\n        requestFn,\n        resolve,\n        reject,\n      });\n      this.process();\n    });\n  }\n\n  async process() {\n    if (this.running >= this.maxConcurrent || this.queue.length === 0) {\n      return;\n    }\n\n    this.running++;\n    const { requestFn, resolve, reject } = this.queue.shift();\n\n    try {\n      const result = await requestFn();\n      resolve(result);\n    } catch (error) {\n      reject(error);\n    } finally {\n      this.running--;\n      this.process();\n    }\n  }\n\n  getStats() {\n    return {\n      running: this.running,\n      queued: this.queue.length,\n      maxConcurrent: this.maxConcurrent,\n    };\n  }\n}\n\n// Usage\nconst queue = new RequestQueue(2);\n\n// Add requests to queue\nconst promises = [\n  queue.add(() => fetch("https://api.example.com/data1")),\n  queue.add(() => fetch("https://api.example.com/data2")),\n  queue.add(() => fetch("https://api.example.com/data3")),\n  queue.add(() => fetch("https://api.example.com/data4")),\n];\n\nconst results = await Promise.all(promises);\nconsole.log("All requests completed");\n'})}),"\n",(0,i.jsx)(n.h3,{id:"problem-3-implement-requestresponse-interceptors",children:"Problem 3: Implement Request/Response Interceptors"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Challenge"}),": Create a system to intercept and modify HTTP requests and responses."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'class HttpClient {\n  constructor() {\n    this.requestInterceptors = [];\n    this.responseInterceptors = [];\n  }\n\n  addRequestInterceptor(interceptor) {\n    this.requestInterceptors.push(interceptor);\n  }\n\n  addResponseInterceptor(interceptor) {\n    this.responseInterceptors.push(interceptor);\n  }\n\n  async request(url, options = {}) {\n    // Apply request interceptors\n    let modifiedOptions = { ...options };\n    for (const interceptor of this.requestInterceptors) {\n      modifiedOptions = await interceptor(url, modifiedOptions);\n    }\n\n    // Make the request\n    let response = await fetch(url, modifiedOptions);\n\n    // Apply response interceptors\n    for (const interceptor of this.responseInterceptors) {\n      response = await interceptor(response);\n    }\n\n    return response;\n  }\n\n  async get(url, options = {}) {\n    return this.request(url, { ...options, method: "GET" });\n  }\n\n  async post(url, data, options = {}) {\n    return this.request(url, {\n      ...options,\n      method: "POST",\n      headers: {\n        "Content-Type": "application/json",\n        ...options.headers,\n      },\n      body: JSON.stringify(data),\n    });\n  }\n}\n\n// Usage\nconst client = new HttpClient();\n\n// Add authentication interceptor\nclient.addRequestInterceptor(async (url, options) => {\n  const token = localStorage.getItem("authToken");\n  if (token) {\n    options.headers = {\n      ...options.headers,\n      Authorization: `Bearer ${token}`,\n    };\n  }\n  return options;\n});\n\n// Add error handling interceptor\nclient.addResponseInterceptor(async (response) => {\n  if (!response.ok) {\n    if (response.status === 401) {\n      // Redirect to login\n      window.location.href = "/login";\n    }\n    throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n  }\n  return response;\n});\n\n// Use the client\ntry {\n  const response = await client.get("https://api.example.com/user");\n  const user = await response.json();\n  console.log(user);\n} catch (error) {\n  console.error("Request failed:", error);\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"problem-4-create-a-websocket-manager",children:"Problem 4: Create a WebSocket Manager"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Challenge"}),": Build a WebSocket manager that handles reconnection, message queuing, and event handling."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class WebSocketManager {\n  constructor(url, options = {}) {\n    this.url = url;\n    this.options = {\n      reconnectAttempts: 5,\n      reconnectInterval: 1000,\n      heartbeatInterval: 30000,\n      ...options\n    };\n\n    this.socket = null;\n    this.reconnectCount = 0;\n    this.messageQueue = [];\n    this.eventListeners = new Map();\n    this.isConnecting = false;\n    this.heartbeatTimer = null;\n  }\n\n  connect() {\n    if (this.isConnecting || this.socket?.readyState === WebSocket.OPEN) {\n      return;\n    }\n\n    this.isConnecting = true;\n    this.socket = new WebSocket(this.url);\n\n    this.socket.onopen = () => {\n      console.log('WebSocket connected');\n      this.isConnecting = false;\n      this.reconnectCount = 0;\n      this.startHeartbeat();\n      this.flushMessageQueue();\n    };\n\n    this.socket.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      this.handleMessage(data);\n    };\n\n    this.socket.onclose = (event) => {\n      console.log('WebSocket disconnected:', event.code, event.reason);\n      this.stopHeartbeat();\n      this.emit('disconnect', event);\n\n      if (!event.wasClean && this.reconnectCount < this.options.reconnectAttempts) {\n        this.scheduleReconnect();\n      }\n    };\n\n    this.socket.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      this.emit('error', error);\n    };\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.close(1000, 'Client disconnect');\n    }\n  }\n\n  send(data) {\n    if (this.socket?.readyState === WebSocket.OPEN) {\n      this.socket.send(JSON.stringify(data));\n    } else {\n      this.messageQueue.push(data);\n    }\n  }\n\n  on(event, callback) {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event).push(callback);\n  }\n\n  off(event, callback) {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  emit(event, data) {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      listeners.forEach(callback => callback(data));\n    }\n  }\n\n  private handleMessage(data) {\n    if (data.type === 'pong') {\n      // Heartbeat response\n      return;\n    }\n\n    this.emit('message', data);\n    this.emit(data.type, data);\n  }\n\n  private flushMessageQueue() {\n    while (this.messageQueue.length > 0) {\n      const message = this.messageQueue.shift();\n      this.send(message);\n    }\n  }\n\n  private scheduleReconnect() {\n    this.reconnectCount++;\n    const delay = this.options.reconnectInterval * Math.pow(2, this.reconnectCount - 1);\n\n    setTimeout(() => {\n      this.connect();\n    }, delay);\n  }\n\n  private startHeartbeat() {\n    this.heartbeatTimer = setInterval(() => {\n      this.send({ type: 'ping' });\n    }, this.options.heartbeatInterval);\n  }\n\n  private stopHeartbeat() {\n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n      this.heartbeatTimer = null;\n    }\n  }\n}\n\n// Usage\nconst ws = new WebSocketManager('wss://api.example.com/ws');\n\nws.on('connect', () => {\n  console.log('Connected to WebSocket');\n});\n\nws.on('message', (data) => {\n  console.log('Received message:', data);\n});\n\nws.on('chat', (data) => {\n  console.log('Chat message:', data.message);\n});\n\nws.on('disconnect', () => {\n  console.log('Disconnected from WebSocket');\n});\n\nws.connect();\n\n// Send a message\nws.send({ type: 'chat', message: 'Hello, world!' });\n"})}),"\n",(0,i.jsx)(n.h3,{id:"problem-5-implement-api-rate-limiting",children:"Problem 5: Implement API Rate Limiting"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Challenge"}),": Create a client-side rate limiter to prevent exceeding API rate limits."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'class RateLimiter {\n  constructor(maxRequests, timeWindow) {\n    this.maxRequests = maxRequests;\n    this.timeWindow = timeWindow;\n    this.requests = [];\n  }\n\n  async throttle(requestFn) {\n    const now = Date.now();\n\n    // Remove expired requests\n    this.requests = this.requests.filter(\n      (timestamp) => now - timestamp < this.timeWindow\n    );\n\n    if (this.requests.length >= this.maxRequests) {\n      const oldestRequest = this.requests[0];\n      const waitTime = this.timeWindow - (now - oldestRequest);\n      await new Promise((resolve) => setTimeout(resolve, waitTime));\n    }\n\n    this.requests.push(now);\n    return requestFn();\n  }\n\n  getRemainingRequests() {\n    const now = Date.now();\n    this.requests = this.requests.filter(\n      (timestamp) => now - timestamp < this.timeWindow\n    );\n    return this.maxRequests - this.requests.length;\n  }\n}\n\n// Usage\nconst rateLimiter = new RateLimiter(10, 60000); // 10 requests per minute\n\nasync function makeApiCall(endpoint) {\n  return rateLimiter.throttle(async () => {\n    const response = await fetch(`https://api.example.com/${endpoint}`);\n    return response.json();\n  });\n}\n\n// Make multiple API calls\nconst promises = [\n  makeApiCall("users"),\n  makeApiCall("posts"),\n  makeApiCall("comments"),\n  // ... more calls\n];\n\nconst results = await Promise.all(promises);\nconsole.log("API calls completed");\n'})}),"\n",(0,i.jsx)(n.h2,{id:"network-optimization-techniques",children:"Network Optimization Techniques"}),"\n",(0,i.jsx)(n.h3,{id:"resource-hints",children:"Resource Hints"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'\x3c!-- Preload critical resources --\x3e\n<link rel="preload" href="/critical.css" as="style" />\n<link rel="preload" href="/main.js" as="script" />\n\n\x3c!-- Prefetch non-critical resources --\x3e\n<link rel="prefetch" href="/next-page.js" />\n\n\x3c!-- Preconnect to external domains --\x3e\n<link rel="preconnect" href="https://fonts.googleapis.com" />\n<link rel="preconnect" href="https://cdn.example.com" />\n'})}),"\n",(0,i.jsx)(n.h3,{id:"service-worker-caching",children:"Service Worker Caching"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Service Worker for caching\nself.addEventListener("install", (event) => {\n  event.waitUntil(\n    caches.open("v1").then((cache) => {\n      return cache.addAll([\n        "/",\n        "/styles/main.css",\n        "/scripts/main.js",\n        "/images/logo.png",\n      ]);\n    })\n  );\n});\n\nself.addEventListener("fetch", (event) => {\n  event.respondWith(\n    caches.match(event.request).then((response) => {\n      return response || fetch(event.request);\n    })\n  );\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"http2-server-push",children:"HTTP/2 Server Push"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Server-side (Node.js with http2)\nconst http2 = require("http2");\nconst fs = require("fs");\n\nconst server = http2.createSecureServer({\n  key: fs.readFileSync("key.pem"),\n  cert: fs.readFileSync("cert.pem"),\n});\n\nserver.on("stream", (stream, headers) => {\n  if (headers[":path"] === "/") {\n    // Push critical resources\n    stream.pushStream(\n      { ":path": "/styles/critical.css" },\n      (err, pushStream) => {\n        pushStream.respondWithFile("/styles/critical.css");\n      }\n    );\n\n    stream.pushStream({ ":path": "/scripts/main.js" }, (err, pushStream) => {\n      pushStream.respondWithFile("/scripts/main.js");\n    });\n\n    stream.respondWithFile("/index.html");\n  }\n});\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"security",children:"Security"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Always use HTTPS in production"}),"\n",(0,i.jsx)(n.li,{children:"Implement proper CORS policies"}),"\n",(0,i.jsx)(n.li,{children:"Validate and sanitize all inputs"}),"\n",(0,i.jsx)(n.li,{children:"Use security headers (CSP, HSTS, etc.)"}),"\n",(0,i.jsx)(n.li,{children:"Implement rate limiting"}),"\n",(0,i.jsx)(n.li,{children:"Use authentication tokens"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"performance",children:"Performance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Minimize HTTP requests"}),"\n",(0,i.jsx)(n.li,{children:"Use CDNs for static assets"}),"\n",(0,i.jsx)(n.li,{children:"Implement proper caching strategies"}),"\n",(0,i.jsx)(n.li,{children:"Compress responses (Gzip/Brotli)"}),"\n",(0,i.jsx)(n.li,{children:"Use HTTP/2 when possible"}),"\n",(0,i.jsx)(n.li,{children:"Optimize images and assets"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Implement proper error boundaries"}),"\n",(0,i.jsx)(n.li,{children:"Use exponential backoff for retries"}),"\n",(0,i.jsx)(n.li,{children:"Provide meaningful error messages"}),"\n",(0,i.jsx)(n.li,{children:"Log errors for debugging"}),"\n",(0,i.jsx)(n.li,{children:"Handle network timeouts"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,i.jsx)(n.h3,{id:"documentation",children:"Documentation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP",children:"MDN Web Docs - HTTP"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API",children:"MDN Web Docs - WebSockets"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://http2.github.io/http2-spec/",children:"HTTP/2 Specification"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS",children:"CORS Documentation"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"tools",children:"Tools"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://www.postman.com/",children:"Postman"})," - API testing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://websocketking.com/",children:"WebSocket King"})," - WebSocket testing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://tools.keycdn.com/http2-test",children:"HTTP/2 Test"})," - HTTP/2 support check"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://www.ssllabs.com/ssltest/",children:"SSL Labs"})," - SSL/TLS testing"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"practice-platforms",children:"Practice Platforms"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://httpbin.org/",children:"HTTPbin"})," - HTTP testing"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.websocket.org/echo.html",children:"WebSocket Echo Test"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://jsonplaceholder.typicode.com/",children:"REST API Testing"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"This guide covers essential networking concepts for frontend interviews, including practical problems and advanced techniques commonly asked at companies companies."})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Server authentication"}),"\n",(0,i.jsx)(n.li,{children:"Protection against man-in-the-middle attacks"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"q2-explain-the-difference-between-tcp-and-udp",children:"Q2: Explain the difference between TCP and UDP"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Answer"}),":\n",(0,i.jsx)(n.strong,{children:"TCP (Transmission Control Protocol)"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Connection-oriented"}),"\n",(0,i.jsx)(n.li,{children:"Reliable delivery"}),"\n",(0,i.jsx)(n.li,{children:"Ordered delivery"}),"\n",(0,i.jsx)(n.li,{children:"Error checking"}),"\n",(0,i.jsx)(n.li,{children:"Flow control"}),"\n",(0,i.jsx)(n.li,{children:"Used for: HTTP, HTTPS, FTP, SMTP"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"UDP (User Datagram Protocol)"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Connectionless"}),"\n",(0,i.jsx)(n.li,{children:"Unreliable delivery"}),"\n",(0,i.jsx)(n.li,{children:"No ordering guarantee"}),"\n",(0,i.jsx)(n.li,{children:"No flow control"}),"\n",(0,i.jsx)(n.li,{children:"Lower overhead"}),"\n",(0,i.jsx)(n.li,{children:"Used for: DNS, DHCP, streaming, gaming"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"q3-what-is-a-cdn-and-how-does-it-work",children:"Q3: What is a CDN and how does it work?"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Answer"}),":\nCDN (Content Delivery Network) is a distributed network of servers that deliver content based on geographic location."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"How it works"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"User requests content"}),"\n",(0,i.jsx)(n.li,{children:"DNS resolves to nearest CDN server"}),"\n",(0,i.jsx)(n.li,{children:"CDN server serves cached content"}),"\n",(0,i.jsx)(n.li,{children:"If not cached, fetches from origin server"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Benefits"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Reduced latency"}),"\n",(0,i.jsx)(n.li,{children:"Reduced bandwidth costs"}),"\n",(0,i.jsx)(n.li,{children:"Improved availability"}),"\n",(0,i.jsx)(n.li,{children:"DDoS protection"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"q4-explain-the-difference-between-rest-and-graphql",children:"Q4: Explain the difference between REST and GraphQL"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Answer"}),":\n",(0,i.jsx)(n.strong,{children:"REST"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Multiple endpoints"}),"\n",(0,i.jsx)(n.li,{children:"Fixed data structure"}),"\n",(0,i.jsx)(n.li,{children:"Over-fetching/under-fetching possible"}),"\n",(0,i.jsx)(n.li,{children:"Stateless"}),"\n",(0,i.jsx)(n.li,{children:"Cacheable"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"GraphQL"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Single endpoint"}),"\n",(0,i.jsx)(n.li,{children:"Flexible queries"}),"\n",(0,i.jsx)(n.li,{children:"Precise data fetching"}),"\n",(0,i.jsx)(n.li,{children:"Strong typing"}),"\n",(0,i.jsx)(n.li,{children:"Introspection"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"advanced-topics-1",children:"Advanced Topics"}),"\n",(0,i.jsx)(n.h3,{id:"modern-web-protocols",children:"Modern Web Protocols"}),"\n",(0,i.jsx)(n.h4,{id:"1-http3",children:"1. HTTP/3"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Definition"}),": Latest HTTP version using QUIC protocol over UDP."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Features"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Multiplexing without head-of-line blocking"}),"\n",(0,i.jsx)(n.li,{children:"Connection migration"}),"\n",(0,i.jsx)(n.li,{children:"0-RTT handshake"}),"\n",(0,i.jsx)(n.li,{children:"Better performance on unreliable networks"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"2-webrtc",children:"2. WebRTC"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Definition"}),": Web Real-Time Communication for peer-to-peer communication."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Use Cases"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Video/audio calling"}),"\n",(0,i.jsx)(n.li,{children:"File sharing"}),"\n",(0,i.jsx)(n.li,{children:"Screen sharing"}),"\n",(0,i.jsx)(n.li,{children:"Gaming"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"3-server-sent-events-sse",children:"3. Server-Sent Events (SSE)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Definition"}),": Technology for pushing data from server to client over HTTP."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Characteristics"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"One-way communication (server to client)"}),"\n",(0,i.jsx)(n.li,{children:"Automatic reconnection"}),"\n",(0,i.jsx)(n.li,{children:"Built-in event types"}),"\n",(0,i.jsx)(n.li,{children:"Simple implementation"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"api-design-patterns",children:"API Design Patterns"}),"\n",(0,i.jsx)(n.h4,{id:"1-restful-design",children:"1. RESTful Design"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Principles"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use nouns, not verbs in URLs"}),"\n",(0,i.jsx)(n.li,{children:"Use HTTP methods appropriately"}),"\n",(0,i.jsx)(n.li,{children:"Return appropriate status codes"}),"\n",(0,i.jsx)(n.li,{children:"Use plural nouns for collections"}),"\n",(0,i.jsx)(n.li,{children:"Implement proper error handling"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"GET /api/users          # Get all users\nGET /api/users/123      # Get specific user\nPOST /api/users         # Create user\nPUT /api/users/123      # Update user\nDELETE /api/users/123   # Delete user\n"})}),"\n",(0,i.jsx)(n.h4,{id:"2-graphql-schema-design",children:"2. GraphQL Schema Design"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Best Practices"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use descriptive field names"}),"\n",(0,i.jsx)(n.li,{children:"Implement proper pagination"}),"\n",(0,i.jsx)(n.li,{children:"Use input types for mutations"}),"\n",(0,i.jsx)(n.li,{children:"Implement proper error handling"}),"\n",(0,i.jsx)(n.li,{children:"Use fragments for reusable fields"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"security-1",children:"Security"}),"\n",(0,i.jsx)(n.h3,{id:"common-security-issues",children:"Common Security Issues"}),"\n",(0,i.jsx)(n.h4,{id:"1-xss-cross-site-scripting",children:"1. XSS (Cross-Site Scripting)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Definition"}),": Attack where malicious scripts are injected into trusted websites."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Prevention"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Input validation and sanitization"}),"\n",(0,i.jsx)(n.li,{children:"Output encoding"}),"\n",(0,i.jsx)(n.li,{children:"Content Security Policy (CSP)"}),"\n",(0,i.jsx)(n.li,{children:"HttpOnly cookies"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"2-csrf-cross-site-request-forgery",children:"2. CSRF (Cross-Site Request Forgery)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Definition"}),": Attack that forces users to perform unwanted actions."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Prevention"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"CSRF tokens"}),"\n",(0,i.jsx)(n.li,{children:"SameSite cookie attribute"}),"\n",(0,i.jsx)(n.li,{children:"Custom headers"}),"\n",(0,i.jsx)(n.li,{children:"Double submit cookies"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"3-sql-injection",children:"3. SQL Injection"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Definition"}),": Attack where malicious SQL code is inserted into queries."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Prevention"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Parameterized queries"}),"\n",(0,i.jsx)(n.li,{children:"Input validation"}),"\n",(0,i.jsx)(n.li,{children:"Least privilege principle"}),"\n",(0,i.jsx)(n.li,{children:"ORM usage"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"authentication--authorization",children:"Authentication & Authorization"}),"\n",(0,i.jsx)(n.h4,{id:"1-jwt-json-web-tokens",children:"1. JWT (JSON Web Tokens)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Definition"}),": Compact, URL-safe means of representing claims between parties."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Structure"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Header (algorithm, token type)"}),"\n",(0,i.jsx)(n.li,{children:"Payload (claims)"}),"\n",(0,i.jsx)(n.li,{children:"Signature (verification)"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Best Practices"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Keep tokens small"}),"\n",(0,i.jsx)(n.li,{children:"Set appropriate expiration"}),"\n",(0,i.jsx)(n.li,{children:"Use HTTPS"}),"\n",(0,i.jsx)(n.li,{children:"Validate on server side"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"2-oauth-20",children:"2. OAuth 2.0"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Definition"}),": Authorization framework for third-party applications."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Flows"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Authorization Code"}),"\n",(0,i.jsx)(n.li,{children:"Implicit"}),"\n",(0,i.jsx)(n.li,{children:"Client Credentials"}),"\n",(0,i.jsx)(n.li,{children:"Resource Owner Password"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"performance-1",children:"Performance"}),"\n",(0,i.jsx)(n.h3,{id:"optimization-techniques",children:"Optimization Techniques"}),"\n",(0,i.jsx)(n.h4,{id:"1-http2-optimization",children:"1. HTTP/2 Optimization"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use server push for critical resources"}),"\n",(0,i.jsx)(n.li,{children:"Minimize round trips"}),"\n",(0,i.jsx)(n.li,{children:"Optimize header compression"}),"\n",(0,i.jsx)(n.li,{children:"Use appropriate stream prioritization"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"2-caching-strategies",children:"2. Caching Strategies"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Browser caching"}),"\n",(0,i.jsx)(n.li,{children:"CDN caching"}),"\n",(0,i.jsx)(n.li,{children:"Application-level caching"}),"\n",(0,i.jsx)(n.li,{children:"Database caching"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"3-compression",children:"3. Compression"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Gzip compression"}),"\n",(0,i.jsx)(n.li,{children:"Brotli compression"}),"\n",(0,i.jsx)(n.li,{children:"Image optimization"}),"\n",(0,i.jsx)(n.li,{children:"Minification"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"practice-problems",children:"Practice Problems"}),"\n",(0,i.jsx)(n.h3,{id:"problem-1-design-a-rest-api",children:"Problem 1: Design a REST API"}),"\n",(0,i.jsx)(n.p,{children:"Design a REST API for a social media platform with users, posts, and comments."}),"\n",(0,i.jsx)(n.h3,{id:"problem-2-implement-authentication",children:"Problem 2: Implement Authentication"}),"\n",(0,i.jsx)(n.p,{children:"Build a JWT-based authentication system with refresh tokens."}),"\n",(0,i.jsx)(n.h3,{id:"problem-3-create-a-real-time-chat",children:"Problem 3: Create a Real-time Chat"}),"\n",(0,i.jsx)(n.p,{children:"Implement a WebSocket-based chat application with rooms and private messages."}),"\n",(0,i.jsx)(n.h3,{id:"problem-4-design-a-cdn-strategy",children:"Problem 4: Design a CDN Strategy"}),"\n",(0,i.jsx)(n.p,{children:"Plan a CDN implementation for a global e-commerce platform."}),"\n",(0,i.jsx)(n.h3,{id:"problem-5-build-a-graphql-api",children:"Problem 5: Build a GraphQL API"}),"\n",(0,i.jsx)(n.p,{children:"Create a GraphQL API for a blog platform with nested queries and mutations."}),"\n",(0,i.jsx)(n.h3,{id:"problem-6-implement-cors",children:"Problem 6: Implement CORS"}),"\n",(0,i.jsx)(n.p,{children:"Set up proper CORS configuration for a multi-domain application."}),"\n",(0,i.jsx)(n.h3,{id:"problem-7-design-a-rate-limiting-system",children:"Problem 7: Design a Rate Limiting System"}),"\n",(0,i.jsx)(n.p,{children:"Implement rate limiting for API endpoints with different tiers."}),"\n",(0,i.jsx)(n.h3,{id:"problem-8-create-a-webrtc-application",children:"Problem 8: Create a WebRTC Application"}),"\n",(0,i.jsx)(n.p,{children:"Build a peer-to-peer video calling application using WebRTC."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"This guide covers essential networking concepts for frontend interviews at companies companies. Focus on understanding HTTP fundamentals, security best practices, and modern web protocols."})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var i=s(6540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);