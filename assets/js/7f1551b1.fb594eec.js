"use strict";(self.webpackChunkfrontend_interview_guide=self.webpackChunkfrontend_interview_guide||[]).push([[1491],{8348:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"frontend/coding-problems/README","title":"Frontend Coding Problems & Solutions","description":"Table of Contents","source":"@site/docs/frontend/coding-problems/README.md","sourceDirName":"frontend/coding-problems","slug":"/frontend/coding-problems/","permalink":"/interview/docs/frontend/coding-problems/","draft":false,"unlisted":false,"editUrl":"https://github.com/Nhi4912/interview/tree/main/docs/frontend/coding-problems/README.md","tags":[],"version":"current","frontMatter":{},"sidebar":"frontendSidebar","previous":{"title":"Frontend Projects & Practice Guide","permalink":"/interview/docs/frontend/projects/"},"next":{"title":"Problem 1: Dynamic Table Generator","permalink":"/interview/docs/frontend/coding-problems/dynamic-table"}}');var i=t(4848),s=t(8453);const a={},o="Frontend Coding Problems & Solutions",l={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"DOM Manipulation Problems",id:"dom-manipulation-problems",level:2},{value:"Problem 1: Dynamic Table Generator",id:"problem-1-dynamic-table-generator",level:3},{value:"Problem 2: Infinite Scroll Implementation",id:"problem-2-infinite-scroll-implementation",level:3},{value:"JavaScript Algorithm Problems",id:"javascript-algorithm-problems",level:2},{value:"Problem 3: Debounce and Throttle Implementation",id:"problem-3-debounce-and-throttle-implementation",level:3},{value:"React Component Problems",id:"react-component-problems",level:2},{value:"Problem 4: Custom Hook for Form Validation",id:"problem-4-custom-hook-for-form-validation",level:3}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"frontend-coding-problems--solutions",children:"Frontend Coding Problems & Solutions"})}),"\n",(0,i.jsx)(e.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#dom-manipulation-problems",children:"DOM Manipulation Problems"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#javascript-algorithm-problems",children:"JavaScript Algorithm Problems"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#react-component-problems",children:"React Component Problems"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#css-layout-problems",children:"CSS Layout Problems"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#performance-optimization-problems",children:"Performance Optimization Problems"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#state-management-problems",children:"State Management Problems"})}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"dom-manipulation-problems",children:"DOM Manipulation Problems"}),"\n",(0,i.jsx)(e.h3,{id:"problem-1-dynamic-table-generator",children:"Problem 1: Dynamic Table Generator"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem"}),": Create a function that generates a dynamic table from an array of objects."]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Requirements"}),":"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Accept array of objects as input"}),"\n",(0,i.jsx)(e.li,{children:"Generate table headers automatically from object keys"}),"\n",(0,i.jsx)(e.li,{children:"Support sorting by any column"}),"\n",(0,i.jsx)(e.li,{children:"Support filtering by any column"}),"\n",(0,i.jsx)(e.li,{children:"Make it responsive"}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Solution"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'class DynamicTable {\n  constructor(containerId, data) {\n    this.container = document.getElementById(containerId);\n    this.data = data;\n    this.currentSort = { column: null, direction: "asc" };\n    this.filters = {};\n    this.init();\n  }\n\n  init() {\n    this.render();\n    this.attachEventListeners();\n  }\n\n  render() {\n    if (!this.data.length) {\n      this.container.innerHTML = "<p>No data available</p>";\n      return;\n    }\n\n    const headers = Object.keys(this.data[0]);\n    const filteredData = this.getFilteredData();\n    const sortedData = this.getSortedData(filteredData);\n\n    const tableHTML = `\n      <div class="table-controls">\n        <div class="filters">\n          ${headers\n            .map(\n              (header) => `\n            <input \n              type="text" \n              placeholder="Filter ${header}..."\n              data-filter="${header}"\n              class="filter-input"\n            >\n          `\n            )\n            .join("")}\n        </div>\n      </div>\n      <table class="dynamic-table">\n        <thead>\n          <tr>\n            ${headers\n              .map(\n                (header) => `\n              <th data-sort="${header}" class="sortable">\n                ${header}\n                <span class="sort-indicator"></span>\n              </th>\n            `\n              )\n              .join("")}\n          </tr>\n        </thead>\n        <tbody>\n          ${sortedData\n            .map(\n              (row) => `\n            <tr>\n              ${headers\n                .map(\n                  (header) => `\n                <td>${row[header]}</td>\n              `\n                )\n                .join("")}\n            </tr>\n          `\n            )\n            .join("")}\n        </tbody>\n      </table>\n    `;\n\n    this.container.innerHTML = tableHTML;\n  }\n\n  getFilteredData() {\n    return this.data.filter((row) => {\n      return Object.keys(this.filters).every((filterKey) => {\n        const filterValue = this.filters[filterKey].toLowerCase();\n        const cellValue = String(row[filterKey]).toLowerCase();\n        return cellValue.includes(filterValue);\n      });\n    });\n  }\n\n  getSortedData(data) {\n    if (!this.currentSort.column) return data;\n\n    return [...data].sort((a, b) => {\n      const aVal = a[this.currentSort.column];\n      const bVal = b[this.currentSort.column];\n\n      if (typeof aVal === "string") {\n        return this.currentSort.direction === "asc"\n          ? aVal.localeCompare(bVal)\n          : bVal.localeCompare(aVal);\n      }\n\n      return this.currentSort.direction === "asc" ? aVal - bVal : bVal - aVal;\n    });\n  }\n\n  attachEventListeners() {\n    // Sort event listeners\n    this.container.addEventListener("click", (e) => {\n      if (e.target.closest(".sortable")) {\n        const header = e.target.closest(".sortable");\n        const column = header.dataset.sort;\n\n        if (this.currentSort.column === column) {\n          this.currentSort.direction =\n            this.currentSort.direction === "asc" ? "desc" : "asc";\n        } else {\n          this.currentSort.column = column;\n          this.currentSort.direction = "asc";\n        }\n\n        this.render();\n      }\n    });\n\n    // Filter event listeners\n    this.container.addEventListener("input", (e) => {\n      if (e.target.classList.contains("filter-input")) {\n        const filterKey = e.target.dataset.filter;\n        const filterValue = e.target.value;\n\n        if (filterValue) {\n          this.filters[filterKey] = filterValue;\n        } else {\n          delete this.filters[filterKey];\n        }\n\n        this.render();\n      }\n    });\n  }\n}\n\n// Usage\nconst sampleData = [\n  { name: "John", age: 25, city: "New York", salary: 50000 },\n  { name: "Jane", age: 30, city: "Los Angeles", salary: 60000 },\n  { name: "Bob", age: 35, city: "Chicago", salary: 55000 },\n  { name: "Alice", age: 28, city: "Boston", salary: 65000 },\n];\n\nconst table = new DynamicTable("table-container", sampleData);\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"CSS Styling"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-css",children:'.dynamic-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 20px;\n}\n\n.dynamic-table th,\n.dynamic-table td {\n  padding: 12px;\n  text-align: left;\n  border-bottom: 1px solid #ddd;\n}\n\n.dynamic-table th {\n  background-color: #f5f5f5;\n  font-weight: bold;\n  cursor: pointer;\n  user-select: none;\n}\n\n.dynamic-table th:hover {\n  background-color: #e9e9e9;\n}\n\n.sortable {\n  position: relative;\n}\n\n.sort-indicator::after {\n  content: "\u2195";\n  position: absolute;\n  right: 8px;\n  color: #999;\n}\n\n.sortable[data-sort="name"].asc .sort-indicator::after {\n  content: "\u2191";\n  color: #007bff;\n}\n\n.sortable[data-sort="name"].desc .sort-indicator::after {\n  content: "\u2193";\n  color: #007bff;\n}\n\n.table-controls {\n  margin-bottom: 20px;\n}\n\n.filters {\n  display: flex;\n  gap: 10px;\n  flex-wrap: wrap;\n}\n\n.filter-input {\n  padding: 8px 12px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 14px;\n}\n\n@media (max-width: 768px) {\n  .dynamic-table {\n    font-size: 14px;\n  }\n\n  .dynamic-table th,\n  .dynamic-table td {\n    padding: 8px 6px;\n  }\n\n  .filters {\n    flex-direction: column;\n  }\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"problem-2-infinite-scroll-implementation",children:"Problem 2: Infinite Scroll Implementation"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem"}),": Implement infinite scroll functionality for a list of items."]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Requirements"}),":"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Load items in batches"}),"\n",(0,i.jsx)(e.li,{children:"Show loading indicator"}),"\n",(0,i.jsx)(e.li,{children:"Handle scroll events efficiently"}),"\n",(0,i.jsx)(e.li,{children:"Support search/filtering"}),"\n",(0,i.jsx)(e.li,{children:"Maintain scroll position"}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Solution"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'class InfiniteScroll {\n  constructor(containerId, options = {}) {\n    this.container = document.getElementById(containerId);\n    this.items = [];\n    this.currentPage = 0;\n    this.loading = false;\n    this.hasMore = true;\n\n    this.options = {\n      itemsPerPage: 20,\n      threshold: 100, // pixels from bottom to trigger load\n      ...options,\n    };\n\n    this.init();\n  }\n\n  init() {\n    this.setupContainer();\n    this.attachScrollListener();\n    this.loadMoreItems();\n  }\n\n  setupContainer() {\n    this.container.innerHTML = `\n      <div class="infinite-scroll-container">\n        <div class="items-list"></div>\n        <div class="loading-indicator" style="display: none;">\n          <div class="spinner"></div>\n          <span>Loading more items...</span>\n        </div>\n        <div class="no-more-items" style="display: none;">\n          No more items to load\n        </div>\n      </div>\n    `;\n\n    this.itemsList = this.container.querySelector(".items-list");\n    this.loadingIndicator = this.container.querySelector(".loading-indicator");\n    this.noMoreItems = this.container.querySelector(".no-more-items");\n  }\n\n  attachScrollListener() {\n    let scrollTimeout;\n\n    window.addEventListener("scroll", () => {\n      clearTimeout(scrollTimeout);\n\n      scrollTimeout = setTimeout(() => {\n        this.checkScrollPosition();\n      }, 100);\n    });\n  }\n\n  checkScrollPosition() {\n    if (this.loading || !this.hasMore) return;\n\n    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n    const windowHeight = window.innerHeight;\n    const documentHeight = document.documentElement.scrollHeight;\n\n    if (scrollTop + windowHeight >= documentHeight - this.options.threshold) {\n      this.loadMoreItems();\n    }\n  }\n\n  async loadMoreItems() {\n    if (this.loading) return;\n\n    this.loading = true;\n    this.showLoading(true);\n\n    try {\n      const newItems = await this.fetchItems(\n        this.currentPage,\n        this.options.itemsPerPage\n      );\n\n      if (newItems.length === 0) {\n        this.hasMore = false;\n        this.showNoMoreItems();\n      } else {\n        this.items.push(...newItems);\n        this.renderItems(newItems);\n        this.currentPage++;\n      }\n    } catch (error) {\n      console.error("Error loading items:", error);\n      this.showError("Failed to load items");\n    } finally {\n      this.loading = false;\n      this.showLoading(false);\n    }\n  }\n\n  async fetchItems(page, limit) {\n    // Simulate API call\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        const startIndex = page * limit;\n        const endIndex = startIndex + limit;\n        const items = [];\n\n        for (let i = startIndex; i < endIndex; i++) {\n          if (i < 1000) {\n            // Simulate limited data\n            items.push({\n              id: i,\n              title: `Item ${i + 1}`,\n              description: `This is the description for item ${i + 1}`,\n              image: `https://picsum.photos/200/200?random=${i}`,\n            });\n          }\n        }\n\n        resolve(items);\n      }, 1000);\n    });\n  }\n\n  renderItems(items) {\n    const itemsHTML = items\n      .map(\n        (item) => `\n      <div class="item-card" data-id="${item.id}">\n        <img src="${item.image}" alt="${item.title}" class="item-image">\n        <div class="item-content">\n          <h3 class="item-title">${item.title}</h3>\n          <p class="item-description">${item.description}</p>\n        </div>\n      </div>\n    `\n      )\n      .join("");\n\n    this.itemsList.insertAdjacentHTML("beforeend", itemsHTML);\n  }\n\n  showLoading(show) {\n    this.loadingIndicator.style.display = show ? "flex" : "none";\n  }\n\n  showNoMoreItems() {\n    this.noMoreItems.style.display = "block";\n  }\n\n  showError(message) {\n    const errorDiv = document.createElement("div");\n    errorDiv.className = "error-message";\n    errorDiv.textContent = message;\n    this.container.appendChild(errorDiv);\n\n    setTimeout(() => {\n      errorDiv.remove();\n    }, 3000);\n  }\n\n  // Public methods\n  refresh() {\n    this.items = [];\n    this.currentPage = 0;\n    this.hasMore = true;\n    this.itemsList.innerHTML = "";\n    this.noMoreItems.style.display = "none";\n    this.loadMoreItems();\n  }\n\n  search(query) {\n    // Implement search functionality\n    this.refresh();\n  }\n}\n\n// Usage\nconst infiniteScroll = new InfiniteScroll("infinite-scroll-container");\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"CSS Styling"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-css",children:".infinite-scroll-container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.items-list {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.item-card {\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  overflow: hidden;\n  transition: transform 0.2s, box-shadow 0.2s;\n}\n\n.item-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.item-image {\n  width: 100%;\n  height: 200px;\n  object-fit: cover;\n}\n\n.item-content {\n  padding: 16px;\n}\n\n.item-title {\n  margin: 0 0 8px 0;\n  font-size: 18px;\n  font-weight: 600;\n}\n\n.item-description {\n  margin: 0;\n  color: #666;\n  line-height: 1.5;\n}\n\n.loading-indicator {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 12px;\n  padding: 20px;\n  color: #666;\n}\n\n.spinner {\n  width: 20px;\n  height: 20px;\n  border: 2px solid #f3f3f3;\n  border-top: 2px solid #007bff;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n.no-more-items {\n  text-align: center;\n  padding: 20px;\n  color: #666;\n  font-style: italic;\n}\n\n.error-message {\n  background-color: #f8d7da;\n  color: #721c24;\n  padding: 12px;\n  border-radius: 4px;\n  margin: 10px 0;\n  text-align: center;\n}\n\n@media (max-width: 768px) {\n  .items-list {\n    grid-template-columns: 1fr;\n  }\n\n  .item-card {\n    margin-bottom: 16px;\n  }\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"javascript-algorithm-problems",children:"JavaScript Algorithm Problems"}),"\n",(0,i.jsx)(e.h3,{id:"problem-3-debounce-and-throttle-implementation",children:"Problem 3: Debounce and Throttle Implementation"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem"}),": Implement debounce and throttle functions for performance optimization."]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Requirements"}),":"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Debounce: Delay function execution until after a pause"}),"\n",(0,i.jsx)(e.li,{children:"Throttle: Limit function execution to once per time period"}),"\n",(0,i.jsx)(e.li,{children:"Handle edge cases"}),"\n",(0,i.jsx)(e.li,{children:"Support immediate execution option"}),"\n",(0,i.jsx)(e.li,{children:"Cancel functionality"}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Solution"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'class FunctionOptimizer {\n  static debounce(func, delay, immediate = false) {\n    let timeoutId;\n\n    return function (...args) {\n      const context = this;\n\n      const later = function () {\n        timeoutId = null;\n        if (!immediate) func.apply(context, args);\n      };\n\n      const callNow = immediate && !timeoutId;\n\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(later, delay);\n\n      if (callNow) func.apply(context, args);\n    };\n  }\n\n  static throttle(func, limit, options = {}) {\n    let inThrottle;\n    let lastFunc;\n    let lastRan;\n\n    const { leading = true, trailing = true } = options;\n\n    return function (...args) {\n      const context = this;\n\n      if (!inThrottle) {\n        if (leading) {\n          func.apply(context, args);\n        }\n        lastRan = Date.now();\n        inThrottle = true;\n      } else {\n        clearTimeout(lastFunc);\n        lastFunc = setTimeout(function () {\n          if (Date.now() - lastRan >= limit) {\n            if (trailing) {\n              func.apply(context, args);\n            }\n            inThrottle = false;\n          }\n        }, limit - (Date.now() - lastRan));\n      }\n    };\n  }\n\n  static debounceWithCancel(func, delay, immediate = false) {\n    let timeoutId;\n\n    const debounced = function (...args) {\n      const context = this;\n\n      const later = function () {\n        timeoutId = null;\n        if (!immediate) func.apply(context, args);\n      };\n\n      const callNow = immediate && !timeoutId;\n\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(later, delay);\n\n      if (callNow) func.apply(context, args);\n    };\n\n    debounced.cancel = function () {\n      clearTimeout(timeoutId);\n      timeoutId = null;\n    };\n\n    return debounced;\n  }\n\n  static throttleWithCancel(func, limit, options = {}) {\n    let inThrottle;\n    let lastFunc;\n    let lastRan;\n\n    const { leading = true, trailing = true } = options;\n\n    const throttled = function (...args) {\n      const context = this;\n\n      if (!inThrottle) {\n        if (leading) {\n          func.apply(context, args);\n        }\n        lastRan = Date.now();\n        inThrottle = true;\n      } else {\n        clearTimeout(lastFunc);\n        lastFunc = setTimeout(function () {\n          if (Date.now() - lastRan >= limit) {\n            if (trailing) {\n              func.apply(context, args);\n            }\n            inThrottle = false;\n          }\n        }, limit - (Date.now() - lastRan));\n      }\n    };\n\n    throttled.cancel = function () {\n      clearTimeout(lastFunc);\n      inThrottle = false;\n      lastRan = 0;\n    };\n\n    return throttled;\n  }\n}\n\n// Usage examples\nclass SearchComponent {\n  constructor() {\n    this.searchInput = document.getElementById("search-input");\n    this.resultsContainer = document.getElementById("search-results");\n\n    // Debounced search\n    this.debouncedSearch = FunctionOptimizer.debounce(\n      this.performSearch.bind(this),\n      300\n    );\n\n    // Throttled scroll handler\n    this.throttledScroll = FunctionOptimizer.throttle(\n      this.handleScroll.bind(this),\n      100\n    );\n\n    this.init();\n  }\n\n  init() {\n    this.searchInput.addEventListener("input", this.debouncedSearch);\n    window.addEventListener("scroll", this.throttledScroll);\n  }\n\n  async performSearch(query) {\n    console.log("Searching for:", query);\n\n    // Simulate API call\n    const results = await this.fetchSearchResults(query);\n    this.displayResults(results);\n  }\n\n  async fetchSearchResults(query) {\n    // Simulate API delay\n    await new Promise((resolve) => setTimeout(resolve, 500));\n\n    return [\n      { id: 1, title: `Result 1 for ${query}` },\n      { id: 2, title: `Result 2 for ${query}` },\n      { id: 3, title: `Result 3 for ${query}` },\n    ];\n  }\n\n  displayResults(results) {\n    this.resultsContainer.innerHTML = results\n      .map((result) => `<div class="result-item">${result.title}</div>`)\n      .join("");\n  }\n\n  handleScroll() {\n    console.log("Scroll position:", window.pageYOffset);\n    // Handle scroll-based functionality\n  }\n}\n\n// Advanced usage with cancel functionality\nclass AdvancedSearchComponent {\n  constructor() {\n    this.searchInput = document.getElementById("advanced-search-input");\n    this.resultsContainer = document.getElementById("advanced-search-results");\n\n    // Debounced search with cancel\n    this.debouncedSearch = FunctionOptimizer.debounceWithCancel(\n      this.performAdvancedSearch.bind(this),\n      500\n    );\n\n    this.init();\n  }\n\n  init() {\n    this.searchInput.addEventListener("input", (e) => {\n      this.debouncedSearch(e.target.value);\n    });\n\n    // Cancel search on blur\n    this.searchInput.addEventListener("blur", () => {\n      this.debouncedSearch.cancel();\n    });\n  }\n\n  async performAdvancedSearch(query) {\n    if (!query.trim()) {\n      this.resultsContainer.innerHTML = "";\n      return;\n    }\n\n    console.log("Advanced search for:", query);\n\n    // Simulate complex search\n    const results = await this.fetchAdvancedResults(query);\n    this.displayAdvancedResults(results);\n  }\n\n  async fetchAdvancedResults(query) {\n    await new Promise((resolve) => setTimeout(resolve, 800));\n\n    return [\n      { id: 1, title: `Advanced result 1 for ${query}`, score: 0.95 },\n      { id: 2, title: `Advanced result 2 for ${query}`, score: 0.87 },\n      { id: 3, title: `Advanced result 3 for ${query}`, score: 0.76 },\n    ];\n  }\n\n  displayAdvancedResults(results) {\n    this.resultsContainer.innerHTML = results\n      .map(\n        (result) => `\n        <div class="advanced-result-item">\n          <span class="result-title">${result.title}</span>\n          <span class="result-score">${(result.score * 100).toFixed(0)}%</span>\n        </div>\n      `\n      )\n      .join("");\n  }\n}\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"CSS for Search Components"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-css",children:".search-container {\n  max-width: 600px;\n  margin: 20px auto;\n  padding: 20px;\n}\n\n.search-input {\n  width: 100%;\n  padding: 12px 16px;\n  border: 2px solid #ddd;\n  border-radius: 8px;\n  font-size: 16px;\n  transition: border-color 0.3s;\n}\n\n.search-input:focus {\n  outline: none;\n  border-color: #007bff;\n}\n\n.search-results {\n  margin-top: 20px;\n}\n\n.result-item {\n  padding: 12px;\n  border: 1px solid #eee;\n  border-radius: 4px;\n  margin-bottom: 8px;\n  background: white;\n  transition: background-color 0.2s;\n}\n\n.result-item:hover {\n  background-color: #f8f9fa;\n}\n\n.advanced-result-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 12px;\n  border: 1px solid #eee;\n  border-radius: 4px;\n  margin-bottom: 8px;\n  background: white;\n}\n\n.result-score {\n  color: #007bff;\n  font-weight: 600;\n  font-size: 14px;\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"react-component-problems",children:"React Component Problems"}),"\n",(0,i.jsx)(e.h3,{id:"problem-4-custom-hook-for-form-validation",children:"Problem 4: Custom Hook for Form Validation"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem"}),": Create a custom React hook for form validation with multiple validation rules."]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Requirements"}),":"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Support multiple validation rules"}),"\n",(0,i.jsx)(e.li,{children:"Real-time validation"}),"\n",(0,i.jsx)(e.li,{children:"Custom error messages"}),"\n",(0,i.jsx)(e.li,{children:"Field-level and form-level validation"}),"\n",(0,i.jsx)(e.li,{children:"Async validation support"}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Solution"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// useFormValidation.js\nimport { useState, useCallback, useEffect } from 'react';\n\nconst useFormValidation = (initialValues = {}, validationRules = {}) => {\n  const [values, setValues] = useState(initialValues);\n  const [errors, setErrors] = useState({});\n  const [touched, setTouched] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isValid, setIsValid] = useState(false);\n\n  // Validation rules\n  const defaultRules = {\n    required: (value) => value && value.trim() !== '' || 'This field is required',\n    email: (value) => {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      return emailRegex.test(value) || 'Please enter a valid email address';\n    },\n    minLength: (min) => (value) =>\n      value.length >= min || `Must be at least ${min} characters`,\n    maxLength: (max) => (value) =>\n      value.length <= max || `Must be no more than ${max} characters`,\n    pattern: (regex, message) => (value) =>\n      regex.test(value) || message,\n    custom: (validator) => validator,\n    async: (asyncValidator) => asyncValidator\n  };\n\n  const allRules = { ...defaultRules, ...validationRules };\n\n  // Validate a single field\n  const validateField = useCallback(async (name, value) => {\n    const fieldRules = allRules[name];\n    if (!fieldRules) return null;\n\n    for (const rule of fieldRules) {\n      let validator;\n      let params;\n\n      if (typeof rule === 'string') {\n        validator = allRules[rule];\n        params = [];\n      } else if (typeof rule === 'function') {\n        validator = rule;\n        params = [];\n      } else if (rule.type && allRules[rule.type]) {\n        validator = allRules[rule.type];\n        params = rule.params || [];\n      } else {\n        continue;\n      }\n\n      const result = validator(value, ...params);\n\n      if (result instanceof Promise) {\n        try {\n          const asyncResult = await result;\n          if (asyncResult !== true) {\n            return asyncResult;\n          }\n        } catch (error) {\n          return error.message || 'Validation failed';\n        }\n      } else if (result !== true) {\n        return result;\n      }\n    }\n\n    return null;\n  }, [allRules]);\n\n  // Validate all fields\n  const validateForm = useCallback(async () => {\n    const newErrors = {};\n    const validationPromises = [];\n\n    for (const [name, value] of Object.entries(values)) {\n      validationPromises.push(\n        validateField(name, value).then(error => {\n          if (error) newErrors[name] = error;\n        })\n      );\n    }\n\n    await Promise.all(validationPromises);\n    setErrors(newErrors);\n    setIsValid(Object.keys(newErrors).length === 0);\n    return newErrors;\n  }, [values, validateField]);\n\n  // Handle field change\n  const handleChange = useCallback((name, value) => {\n    setValues(prev => ({ ...prev, [name]: value }));\n\n    // Clear error when user starts typing\n    if (errors[name]) {\n      setErrors(prev => ({ ...prev, [name]: null }));\n    }\n  }, [errors]);\n\n  // Handle field blur\n  const handleBlur = useCallback(async (name) => {\n    setTouched(prev => ({ ...prev, [name]: true }));\n\n    const error = await validateField(name, values[name]);\n    setErrors(prev => ({ ...prev, [name]: error }));\n  }, [validateField, values]);\n\n  // Handle form submission\n  const handleSubmit = useCallback(async (onSubmit) => {\n    setIsSubmitting(true);\n\n    try {\n      const formErrors = await validateForm();\n\n      if (Object.keys(formErrors).length === 0) {\n        await onSubmit(values);\n      }\n    } catch (error) {\n      console.error('Form submission error:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [validateForm, values]);\n\n  // Reset form\n  const reset = useCallback(() => {\n    setValues(initialValues);\n    setErrors({});\n    setTouched({});\n    setIsSubmitting(false);\n    setIsValid(false);\n  }, [initialValues]);\n\n  // Update form values\n  const setValue = useCallback((name, value) => {\n    setValues(prev => ({ ...prev, [name]: value }));\n  }, []);\n\n  // Get field props\n  const getFieldProps = useCallback((name) => ({\n    value: values[name] || '',\n    onChange: (e) => handleChange(name, e.target.value),\n    onBlur: () => handleBlur(name),\n    error: touched[name] ? errors[name] : null,\n    hasError: touched[name] && errors[name]\n  }), [values, handleChange, handleBlur, touched, errors]);\n\n  // Effect to validate form when values change\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (Object.keys(touched).length > 0) {\n        validateForm();\n      }\n    }, 300);\n\n    return () => clearTimeout(timeoutId);\n  }, [values, touched, validateForm]);\n\n  return {\n    values,\n    errors,\n    touched,\n    isSubmitting,\n    isValid,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    reset,\n    setValue,\n    getFieldProps,\n    validateField,\n    validateForm\n  };\n};\n\n// Usage example\nconst RegistrationForm = () => {\n  const validationRules = {\n    username: [\n      'required',\n      { type: 'minLength', params: [3] },\n      { type: 'pattern', params: [/^[a-zA-Z0-9_]+$/, 'Only letters, numbers, and underscores allowed'] },\n      {\n        type: 'async',\n        params: [\n          async (value) => {\n            // Simulate API call to check username availability\n            await new Promise(resolve => setTimeout(resolve, 1000));\n            return value !== 'admin' || 'Username already taken';\n          }\n        ]\n      }\n    ],\n    email: ['required', 'email'],\n    password: [\n      'required',\n      { type: 'minLength', params: [8] },\n      {\n        type: 'custom',\n        params: [\n          (value) => {\n            const hasUpperCase = /[A-Z]/.test(value);\n            const hasLowerCase = /[a-z]/.test(value);\n            const hasNumbers = /\\d/.test(value);\n            const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(value);\n\n            if (!hasUpperCase) return 'Must contain at least one uppercase letter';\n            if (!hasLowerCase) return 'Must contain at least one lowercase letter';\n            if (!hasNumbers) return 'Must contain at least one number';\n            if (!hasSpecialChar) return 'Must contain at least one special character';\n\n            return true;\n          }\n        ]\n      }\n    ],\n    confirmPassword: [\n      'required',\n      {\n        type: 'custom',\n        params: [\n          (value, allValues) => value === allValues.password || 'Passwords do not match'\n        ]\n      }\n    ]\n  };\n\n  const {\n    values,\n    errors,\n    isSubmitting,\n    isValid,\n    handleSubmit,\n    getFieldProps\n  } useFormValidation({}, validationRules);\n\n  const onSubmit = async (formData) => {\n    console.log('Form submitted:', formData);\n    // Handle form submission\n  };\n\n  return (\n    <form onSubmit={(e) => {\n      e.preventDefault();\n      handleSubmit(onSubmit);\n    }}>\n      <div className=\"form-group\">\n        <label htmlFor=\"username\">Username</label>\n        <input\n          id=\"username\"\n          type=\"text\"\n          {...getFieldProps('username')}\n          className={getFieldProps('username').hasError ? 'error' : ''}\n        />\n        {getFieldProps('username').error && (\n          <span className=\"error-message\">{getFieldProps('username').error}</span>\n        )}\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"email\">Email</label>\n        <input\n          id=\"email\"\n          type=\"email\"\n          {...getFieldProps('email')}\n          className={getFieldProps('email').hasError ? 'error' : ''}\n        />\n        {getFieldProps('email').error && (\n          <span className=\"error-message\">{getFieldProps('email').error}</span>\n        )}\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"password\">Password</label>\n        <input\n          id=\"password\"\n          type=\"password\"\n          {...getFieldProps('password')}\n          className={getFieldProps('password').hasError ? 'error' : ''}\n        />\n        {getFieldProps('password').error && (\n          <span className=\"error-message\">{getFieldProps('password').error}</span>\n        )}\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"confirmPassword\">Confirm Password</label>\n        <input\n          id=\"confirmPassword\"\n          type=\"password\"\n          {...getFieldProps('confirmPassword')}\n          className={getFieldProps('confirmPassword').hasError ? 'error' : ''}\n        />\n        {getFieldProps('confirmPassword').error && (\n          <span className=\"error-message\">{getFieldProps('confirmPassword').error}</span>\n        )}\n      </div>\n\n      <button\n        type=\"submit\"\n        disabled={isSubmitting || !isValid}\n        className=\"submit-button\"\n      >\n        {isSubmitting ? 'Submitting...' : 'Register'}\n      </button>\n    </form>\n  );\n};\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"CSS for Form Validation"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-css",children:".form-group {\n  margin-bottom: 20px;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 5px;\n  font-weight: 600;\n  color: #333;\n}\n\n.form-group input {\n  width: 100%;\n  padding: 12px;\n  border: 2px solid #ddd;\n  border-radius: 6px;\n  font-size: 16px;\n  transition: border-color 0.3s, box-shadow 0.3s;\n}\n\n.form-group input:focus {\n  outline: none;\n  border-color: #007bff;\n  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);\n}\n\n.form-group input.error {\n  border-color: #dc3545;\n  box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1);\n}\n\n.error-message {\n  display: block;\n  margin-top: 5px;\n  color: #dc3545;\n  font-size: 14px;\n  font-weight: 500;\n}\n\n.submit-button {\n  width: 100%;\n  padding: 12px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  font-size: 16px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.submit-button:hover:not(:disabled) {\n  background-color: #0056b3;\n}\n\n.submit-button:disabled {\n  background-color: #6c757d;\n  cursor: not-allowed;\n}\n\n.form-group input:valid {\n  border-color: #28a745;\n}\n\n.form-group input:valid:focus {\n  box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.1);\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"This comprehensive set of frontend coding problems covers:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"DOM Manipulation"}),": Dynamic table generation with sorting and filtering"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Performance Optimization"}),": Infinite scroll implementation"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"JavaScript Algorithms"}),": Debounce and throttle functions"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"React Patterns"}),": Custom form validation hook"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"Each problem includes:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Clear problem description and requirements"}),"\n",(0,i.jsx)(e.li,{children:"Complete solution with working code"}),"\n",(0,i.jsx)(e.li,{children:"CSS styling for visual presentation"}),"\n",(0,i.jsx)(e.li,{children:"Usage examples and best practices"}),"\n",(0,i.jsx)(e.li,{children:"Performance considerations and edge case handling"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"These problems are designed to test both theoretical knowledge and practical implementation skills commonly required in frontend interviews."})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>o});var r=t(6540);const i={},s=r.createContext(i);function a(n){const e=r.useContext(s);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);