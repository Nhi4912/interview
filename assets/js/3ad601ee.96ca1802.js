"use strict";(self.webpackChunkfrontend_interview_guide=self.webpackChunkfrontend_interview_guide||[]).push([[7634],{2443:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"frontend/challenges/README","title":"Frontend Coding Challenges Guide","description":"Table of Contents","source":"@site/docs/frontend/challenges/README.md","sourceDirName":"frontend/challenges","slug":"/frontend/challenges/","permalink":"/interview/docs/frontend/challenges/","draft":false,"unlisted":false,"editUrl":"https://github.com/Nhi4912/interview/tree/main/docs/frontend/challenges/README.md","tags":[],"version":"current","frontMatter":{}}');var a=t(4848),i=t(8453);const r={},o="Frontend Coding Challenges Guide",l={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Challenge Categories",id:"challenge-categories",level:2},{value:"Technical Skills",id:"technical-skills",level:3},{value:"Problem-Solving",id:"problem-solving",level:3},{value:"Beginner Challenges",id:"beginner-challenges",level:2},{value:"Challenge 1: Todo List Application",id:"challenge-1-todo-list-application",level:3},{value:"Challenge 2: Weather Dashboard",id:"challenge-2-weather-dashboard",level:3},{value:"Intermediate Challenges",id:"intermediate-challenges",level:2},{value:"Challenge 3: Real-time Chat Application",id:"challenge-3-real-time-chat-application",level:3},{value:"Challenge 4: E-commerce Product Catalog",id:"challenge-4-e-commerce-product-catalog",level:3},{value:"Advanced Challenges",id:"advanced-challenges",level:2},{value:"Challenge 5: Real-time Dashboard with Charts",id:"challenge-5-real-time-dashboard-with-charts",level:3},{value:"System Design Challenges",id:"system-design-challenges",level:2},{value:"Challenge 6: Design a Social Media Feed",id:"challenge-6-design-a-social-media-feed",level:3},{value:"Performance Challenges",id:"performance-challenges",level:2},{value:"Challenge 7: Optimize a Large Data Table",id:"challenge-7-optimize-a-large-data-table",level:3},{value:"Interview Scenarios",id:"interview-scenarios",level:2},{value:"Scenario 1: Live Coding Session",id:"scenario-1-live-coding-session",level:3},{value:"Scenario 2: Code Review",id:"scenario-2-code-review",level:3},{value:"Scenario 3: System Design Discussion",id:"scenario-3-system-design-discussion",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"frontend-coding-challenges-guide",children:"Frontend Coding Challenges Guide"})}),"\n",(0,a.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#challenge-categories",children:"Challenge Categories"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#beginner-challenges",children:"Beginner Challenges"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#intermediate-challenges",children:"Intermediate Challenges"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#advanced-challenges",children:"Advanced Challenges"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#system-design-challenges",children:"System Design Challenges"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#performance-challenges",children:"Performance Challenges"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#interview-scenarios",children:"Interview Scenarios"})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"challenge-categories",children:"Challenge Categories"}),"\n",(0,a.jsx)(n.h3,{id:"technical-skills",children:"Technical Skills"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"JavaScript Fundamentals"}),": Closures, promises, async/await"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"React Patterns"}),": Hooks, context, performance optimization"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"CSS Layouts"}),": Flexbox, Grid, responsive design"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"DOM Manipulation"}),": Event handling, dynamic content"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"API Integration"}),": REST, GraphQL, real-time data"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"problem-solving",children:"Problem-Solving"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Algorithm Implementation"}),": Data structures, sorting, searching"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"State Management"}),": Complex state logic, data flow"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"User Experience"}),": Accessibility, performance, usability"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Error Handling"}),": Edge cases, validation, recovery"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"beginner-challenges",children:"Beginner Challenges"}),"\n",(0,a.jsx)(n.h3,{id:"challenge-1-todo-list-application",children:"Challenge 1: Todo List Application"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description"}),": Build a fully functional todo list with CRUD operations."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Requirements"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Add, edit, delete todos"}),"\n",(0,a.jsx)(n.li,{children:"Mark todos as complete"}),"\n",(0,a.jsx)(n.li,{children:"Filter by status (all, active, completed)"}),"\n",(0,a.jsx)(n.li,{children:"Persist data in localStorage"}),"\n",(0,a.jsx)(n.li,{children:"Responsive design"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Expected Features"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// Core functionality\nconst TodoApp = () => {\n  const [todos, setTodos] = useState([]);\n  const [filter, setFilter] = useState("all");\n  const [inputValue, setInputValue] = useState("");\n\n  const addTodo = (text) => {\n    const newTodo = {\n      id: Date.now(),\n      text,\n      completed: false,\n      createdAt: new Date(),\n    };\n    setTodos((prev) => [...prev, newTodo]);\n  };\n\n  const toggleTodo = (id) => {\n    setTodos((prev) =>\n      prev.map((todo) =>\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\n      )\n    );\n  };\n\n  const deleteTodo = (id) => {\n    setTodos((prev) => prev.filter((todo) => todo.id !== id));\n  };\n\n  const filteredTodos = todos.filter((todo) => {\n    if (filter === "active") return !todo.completed;\n    if (filter === "completed") return todo.completed;\n    return true;\n  });\n\n  return (\n    <div className="todo-app">\n      <h1>Todo List</h1>\n\n      <div className="add-todo">\n        <input\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n          onKeyPress={(e) => {\n            if (e.key === "Enter" && inputValue.trim()) {\n              addTodo(inputValue.trim());\n              setInputValue("");\n            }\n          }}\n          placeholder="Add a new todo..."\n        />\n        <button\n          onClick={() => {\n            if (inputValue.trim()) {\n              addTodo(inputValue.trim());\n              setInputValue("");\n            }\n          }}\n        >\n          Add\n        </button>\n      </div>\n\n      <div className="filters">\n        <button\n          className={filter === "all" ? "active" : ""}\n          onClick={() => setFilter("all")}\n        >\n          All\n        </button>\n        <button\n          className={filter === "active" ? "active" : ""}\n          onClick={() => setFilter("active")}\n        >\n          Active\n        </button>\n        <button\n          className={filter === "completed" ? "active" : ""}\n          onClick={() => setFilter("completed")}\n        >\n          Completed\n        </button>\n      </div>\n\n      <ul className="todo-list">\n        {filteredTodos.map((todo) => (\n          <li key={todo.id} className={todo.completed ? "completed" : ""}>\n            <input\n              type="checkbox"\n              checked={todo.completed}\n              onChange={() => toggleTodo(todo.id)}\n            />\n            <span>{todo.text}</span>\n            <button onClick={() => deleteTodo(todo.id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"CSS Styling"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",children:".todo-app {\n  max-width: 600px;\n  margin: 0 auto;\n  padding: 20px;\n  font-family: Arial, sans-serif;\n}\n\n.add-todo {\n  display: flex;\n  gap: 10px;\n  margin-bottom: 20px;\n}\n\n.add-todo input {\n  flex: 1;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\n.add-todo button {\n  padding: 10px 20px;\n  background: #007bff;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.filters {\n  display: flex;\n  gap: 10px;\n  margin-bottom: 20px;\n}\n\n.filters button {\n  padding: 8px 16px;\n  border: 1px solid #ddd;\n  background: white;\n  cursor: pointer;\n}\n\n.filters button.active {\n  background: #007bff;\n  color: white;\n}\n\n.todo-list {\n  list-style: none;\n  padding: 0;\n}\n\n.todo-list li {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  padding: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n.todo-list li.completed span {\n  text-decoration: line-through;\n  color: #888;\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"challenge-2-weather-dashboard",children:"Challenge 2: Weather Dashboard"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description"}),": Create a weather application that displays current weather and forecast."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Requirements"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Search by city name"}),"\n",(0,a.jsx)(n.li,{children:"Display current weather (temperature, humidity, wind)"}),"\n",(0,a.jsx)(n.li,{children:"Show 5-day forecast"}),"\n",(0,a.jsx)(n.li,{children:"Use geolocation for current location"}),"\n",(0,a.jsx)(n.li,{children:"Handle loading and error states"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Implementation"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'const WeatherApp = () => {\n  const [weather, setWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [city, setCity] = useState("");\n\n  const API_KEY = "your_api_key";\n  const BASE_URL = "https://api.openweathermap.org/data/2.5";\n\n  const fetchWeather = async (cityName) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\n        `${BASE_URL}/weather?q=${cityName}&appid=${API_KEY}&units=metric`\n      );\n\n      if (!response.ok) {\n        throw new Error("City not found");\n      }\n\n      const data = await response.json();\n      setWeather(data);\n\n      // Fetch forecast\n      const forecastResponse = await fetch(\n        `${BASE_URL}/forecast?q=${cityName}&appid=${API_KEY}&units=metric`\n      );\n      const forecastData = await forecastResponse.json();\n      setForecast(forecastData);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getCurrentLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        async (position) => {\n          const { latitude, longitude } = position.coords;\n          const response = await fetch(\n            `${BASE_URL}/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric`\n          );\n          const data = await response.json();\n          setWeather(data);\n          setCity(data.name);\n        },\n        (error) => {\n          setError("Unable to get location");\n        }\n      );\n    }\n  };\n\n  return (\n    <div className="weather-app">\n      <h1>Weather Dashboard</h1>\n\n      <div className="search-section">\n        <input\n          value={city}\n          onChange={(e) => setCity(e.target.value)}\n          placeholder="Enter city name..."\n          onKeyPress={(e) => {\n            if (e.key === "Enter" && city.trim()) {\n              fetchWeather(city.trim());\n            }\n          }}\n        />\n        <button onClick={() => fetchWeather(city)}>Search</button>\n        <button onClick={getCurrentLocation}>\ud83d\udccd Current Location</button>\n      </div>\n\n      {loading && <div className="loading">Loading...</div>}\n\n      {error && <div className="error">{error}</div>}\n\n      {weather && (\n        <div className="current-weather">\n          <h2>\n            {weather.name}, {weather.sys.country}\n          </h2>\n          <div className="weather-info">\n            <div className="temperature">{Math.round(weather.main.temp)}\xb0C</div>\n            <div className="description">{weather.weather[0].description}</div>\n            <div className="details">\n              <p>Humidity: {weather.main.humidity}%</p>\n              <p>Wind: {weather.wind.speed} m/s</p>\n              <p>Pressure: {weather.main.pressure} hPa</p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {forecast && (\n        <div className="forecast">\n          <h3>5-Day Forecast</h3>\n          <div className="forecast-list">\n            {forecast.list\n              .filter((item, index) => index % 8 === 0) // Daily forecast\n              .map((item, index) => (\n                <div key={index} className="forecast-item">\n                  <div className="date">\n                    {new Date(item.dt * 1000).toLocaleDateString()}\n                  </div>\n                  <div className="temp">{Math.round(item.main.temp)}\xb0C</div>\n                  <div className="description">\n                    {item.weather[0].description}\n                  </div>\n                </div>\n              ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n'})}),"\n",(0,a.jsx)(n.h2,{id:"intermediate-challenges",children:"Intermediate Challenges"}),"\n",(0,a.jsx)(n.h3,{id:"challenge-3-real-time-chat-application",children:"Challenge 3: Real-time Chat Application"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description"}),": Build a chat application with real-time messaging capabilities."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Requirements"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Real-time messaging using WebSocket"}),"\n",(0,a.jsx)(n.li,{children:"User authentication"}),"\n",(0,a.jsx)(n.li,{children:"Message history"}),"\n",(0,a.jsx)(n.li,{children:"Typing indicators"}),"\n",(0,a.jsx)(n.li,{children:"File sharing"}),"\n",(0,a.jsx)(n.li,{children:"Online/offline status"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Implementation"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// WebSocket connection\nconst useWebSocket = (url) => {\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n\n  useEffect(() => {\n    const ws = new WebSocket(url);\n\n    ws.onopen = () => {\n      setIsConnected(true);\n      console.log("Connected to WebSocket");\n    };\n\n    ws.onclose = () => {\n      setIsConnected(false);\n      console.log("Disconnected from WebSocket");\n    };\n\n    ws.onerror = (error) => {\n      console.error("WebSocket error:", error);\n    };\n\n    setSocket(ws);\n\n    return () => {\n      ws.close();\n    };\n  }, [url]);\n\n  return { socket, isConnected };\n};\n\n// Chat component\nconst ChatApp = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState("");\n  const [users, setUsers] = useState([]);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isTyping, setIsTyping] = useState(false);\n\n  const { socket, isConnected } = useWebSocket("ws://localhost:8080");\n\n  useEffect(() => {\n    if (!socket) return;\n\n    socket.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n\n      switch (data.type) {\n        case "message":\n          setMessages((prev) => [...prev, data.message]);\n          break;\n        case "userList":\n          setUsers(data.users);\n          break;\n        case "typing":\n          setIsTyping(data.isTyping);\n          break;\n        case "userJoined":\n          setUsers((prev) => [...prev, data.user]);\n          break;\n        case "userLeft":\n          setUsers((prev) => prev.filter((user) => user.id !== data.userId));\n          break;\n      }\n    };\n  }, [socket]);\n\n  const sendMessage = () => {\n    if (!inputMessage.trim() || !socket) return;\n\n    const message = {\n      id: Date.now(),\n      text: inputMessage,\n      user: currentUser,\n      timestamp: new Date(),\n    };\n\n    socket.send(\n      JSON.stringify({\n        type: "message",\n        message,\n      })\n    );\n\n    setInputMessage("");\n  };\n\n  const handleTyping = () => {\n    if (!socket) return;\n\n    socket.send(\n      JSON.stringify({\n        type: "typing",\n        isTyping: true,\n      })\n    );\n\n    // Stop typing indicator after 3 seconds\n    setTimeout(() => {\n      socket.send(\n        JSON.stringify({\n          type: "typing",\n          isTyping: false,\n        })\n      );\n    }, 3000);\n  };\n\n  return (\n    <div className="chat-app">\n      <div className="chat-header">\n        <h2>Real-time Chat</h2>\n        <div className="connection-status">\n          {isConnected ? "\ud83d\udfe2 Connected" : "\ud83d\udd34 Disconnected"}\n        </div>\n      </div>\n\n      <div className="chat-container">\n        <div className="users-sidebar">\n          <h3>Online Users</h3>\n          <div className="users-list">\n            {users.map((user) => (\n              <div key={user.id} className="user-item">\n                <span className="user-status">\ud83d\udfe2</span>\n                {user.name}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div className="chat-main">\n          <div className="messages-container">\n            {messages.map((message) => (\n              <div\n                key={message.id}\n                className={`message ${\n                  message.user.id === currentUser?.id ? "own" : ""\n                }`}\n              >\n                <div className="message-header">\n                  <span className="username">{message.user.name}</span>\n                  <span className="timestamp">\n                    {new Date(message.timestamp).toLocaleTimeString()}\n                  </span>\n                </div>\n                <div className="message-text">{message.text}</div>\n              </div>\n            ))}\n            {isTyping && (\n              <div className="typing-indicator">Someone is typing...</div>\n            )}\n          </div>\n\n          <div className="message-input">\n            <input\n              value={inputMessage}\n              onChange={(e) => setInputMessage(e.target.value)}\n              onKeyPress={(e) => {\n                if (e.key === "Enter") {\n                  sendMessage();\n                } else {\n                  handleTyping();\n                }\n              }}\n              placeholder="Type a message..."\n            />\n            <button onClick={sendMessage}>Send</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n'})}),"\n",(0,a.jsx)(n.h3,{id:"challenge-4-e-commerce-product-catalog",children:"Challenge 4: E-commerce Product Catalog"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description"}),": Create a product catalog with filtering, sorting, and cart functionality."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Requirements"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Product grid with images and details"}),"\n",(0,a.jsx)(n.li,{children:"Filter by category, price, rating"}),"\n",(0,a.jsx)(n.li,{children:"Sort by price, name, popularity"}),"\n",(0,a.jsx)(n.li,{children:"Shopping cart with persistent storage"}),"\n",(0,a.jsx)(n.li,{children:"Search functionality"}),"\n",(0,a.jsx)(n.li,{children:"Responsive design"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Implementation"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'const ProductCatalog = () => {\n  const [products, setProducts] = useState([]);\n  const [filteredProducts, setFilteredProducts] = useState([]);\n  const [cart, setCart] = useState([]);\n  const [filters, setFilters] = useState({\n    category: \'all\',\n    minPrice: 0,\n    maxPrice: 1000,\n    rating: 0\n  });\n  const [sortBy, setSortBy] = useState(\'name\');\n  const [searchQuery, setSearchQuery] = useState(\'\');\n\n  // Load products from API\n  useEffect(() => {\n    const fetchProducts = async () => {\n      const response = await fetch(\'/api/products\');\n      const data = await response.json();\n      setProducts(data);\n      setFilteredProducts(data);\n    };\n    fetchProducts();\n  }, []);\n\n  // Apply filters and search\n  useEffect(() => {\n    let filtered = products.filter(product => {\n      const matchesCategory = filters.category === \'all\' ||\n                             product.category === filters.category;\n      const matchesPrice = product.price >= filters.minPrice &&\n                          product.price <= filters.maxPrice;\n      const matchesRating = product.rating >= filters.rating;\n      const matchesSearch = product.name.toLowerCase()\n        .includes(searchQuery.toLowerCase()) ||\n        product.description.toLowerCase()\n        .includes(searchQuery.toLowerCase());\n\n      return matchesCategory && matchesPrice && matchesRating && matchesSearch;\n    });\n\n    // Apply sorting\n    filtered.sort((a, b) => {\n      switch (sortBy) {\n        case \'price-low\':\n          return a.price - b.price;\n        case \'price-high\':\n          return b.price - a.price;\n        case \'name\':\n          return a.name.localeCompare(b.name);\n        case \'rating\':\n          return b.rating - a.rating;\n        default:\n          return 0;\n      }\n    });\n\n    setFilteredProducts(filtered);\n  }, [products, filters, sortBy, searchQuery]);\n\n  const addToCart = (product) => {\n    setCart(prev => {\n      const existingItem = prev.find(item => item.id === product.id);\n      if (existingItem) {\n        return prev.map(item =>\n          item.id === product.id\n            ? { ...item, quantity: item.quantity + 1 }\n            : item\n        );\n      }\n      return [...prev, { ...product, quantity: 1 }];\n    });\n  };\n\n  const removeFromCart = (productId) => {\n    setCart(prev => prev.filter(item => item.id !== productId));\n  };\n\n  const updateQuantity = (productId, quantity) => {\n    if (quantity <= 0) {\n      removeFromCart(productId);\n      return;\n    }\n\n    setCart(prev => prev.map(item =>\n      item.id === productId\n        ? { ...item, quantity }\n        : item\n    ));\n  };\n\n  const cartTotal = cart.reduce((total, item) =>\n    total + (item.price * item.quantity), 0\n  );\n\n  return (\n    <div className="product-catalog">\n      <header className="catalog-header">\n        <h1>Product Catalog</h1>\n        <div className="search-bar">\n          <input\n            type="text"\n            placeholder="Search products..."\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n          />\n        </div>\n      </header>\n\n      <div className="catalog-container">\n        <aside className="filters-sidebar">\n          <h3>Filters</h3>\n\n          <div className="filter-group">\n            <label>Category</label>\n            <select\n              value={filters.category}\n              onChange={(e) => setFilters(prev => ({\n                ...prev,\n                category: e.target.value\n              }))}\n            >\n              <option value="all">All Categories</option>\n              <option value="electronics">Electronics</option>\n              <option value="clothing">Clothing</option>\n              <option value="books">Books</option>\n            </select>\n          </div>\n\n          <div className="filter-group">\n            <label>Price Range</label>\n            <div className="price-inputs">\n              <input\n                type="number"\n                placeholder="Min"\n                value={filters.minPrice}\n                onChange={(e) => setFilters(prev => ({\n                  ...prev,\n                  minPrice: Number(e.target.value)\n                }))}\n              />\n              <input\n                type="number"\n                placeholder="Max"\n                value={filters.maxPrice}\n                onChange={(e) => setFilters(prev => ({\n                  ...prev,\n                  maxPrice: Number(e.target.value)\n                }))}\n              />\n            </div>\n          </div>\n\n          <div className="filter-group">\n            <label>Minimum Rating</label>\n            <select\n              value={filters.rating}\n              onChange={(e) => setFilters(prev => ({\n                ...prev,\n                rating: Number(e.target.value)\n              }))}\n            >\n              <option value={0}>Any Rating</option>\n              <option value={4}>4+ Stars</option>\n              <option value={3}>3+ Stars</option>\n              <option value={2}>2+ Stars</option>\n            </select>\n          </div>\n        </aside>\n\n        <main className="products-main">\n          <div className="products-header">\n            <h2>Products ({filteredProducts.length})</h2>\n            <select\n              value={sortBy}\n              onChange={(e) => setSortBy(e.target.value)}\n            >\n              <option value="name">Sort by Name</option>\n              <option value="price-low">Price: Low to High</option>\n              <option value="price-high">Price: High to Low</option>\n              <option value="rating">Sort by Rating</option>\n            </select>\n          </div>\n\n          <div className="products-grid">\n            {filteredProducts.map(product => (\n              <div key={product.id} className="product-card">\n                <img src={product.image} alt={product.name} />\n                <div className="product-info">\n                  <h3>{product.name}</h3>\n                  <p className="price">${product.price}</p>\n                  <div className="rating">\n                    {[...Array(5)].map((_, i) => (\n                      <span key={i} className={i < product.rating ? \'star filled\' : \'star\'}>\n                        \u2605\n                      </span>\n                    ))}\n                    <span className="rating-text">({product.rating})</span>\n                  </p>\n                  <p className="description">{product.description}</p>\n                  <button\n                    onClick={() => addToCart(product)}\n                    className="add-to-cart"\n                  >\n                    Add to Cart\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </main>\n\n        <aside className="cart-sidebar">\n          <h3>Shopping Cart</h3>\n          {cart.length === 0 ? (\n            <p>Your cart is empty</p>\n          ) : (\n            <>\n              <div className="cart-items">\n                {cart.map(item => (\n                  <div key={item.id} className="cart-item">\n                    <img src={item.image} alt={item.name} />\n                    <div className="item-details">\n                      <h4>{item.name}</h4>\n                      <p>${item.price}</p>\n                      <div className="quantity-controls">\n                        <button\n                          onClick={() => updateQuantity(item.id, item.quantity - 1)}\n                        >\n                          -\n                        </button>\n                        <span>{item.quantity}</span>\n                        <button\n                          onClick={() => updateQuantity(item.id, item.quantity + 1)}\n                        >\n                          +\n                        </button>\n                      </div>\n                    </div>\n                    <button\n                      onClick={() => removeFromCart(item.id)}\n                      className="remove-item"\n                    >\n                      \xd7\n                    </button>\n                  </div>\n                ))}\n              </div>\n              <div className="cart-total">\n                <h4>Total: ${cartTotal.toFixed(2)}</h4>\n                <button className="checkout-btn">Checkout</button>\n              </div>\n            </>\n          )}\n        </aside>\n      </div>\n    </div>\n  );\n};\n'})}),"\n",(0,a.jsx)(n.h2,{id:"advanced-challenges",children:"Advanced Challenges"}),"\n",(0,a.jsx)(n.h3,{id:"challenge-5-real-time-dashboard-with-charts",children:"Challenge 5: Real-time Dashboard with Charts"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description"}),": Build a dashboard with real-time data visualization and interactive charts."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Requirements"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Multiple chart types (line, bar, pie)"}),"\n",(0,a.jsx)(n.li,{children:"Real-time data updates"}),"\n",(0,a.jsx)(n.li,{children:"Interactive filters and date ranges"}),"\n",(0,a.jsx)(n.li,{children:"Responsive design"}),"\n",(0,a.jsx)(n.li,{children:"Data export functionality"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Implementation"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { Line, Bar, Pie } from "react-chartjs-2";\n\nconst Dashboard = () => {\n  const [data, setData] = useState({\n    sales: [],\n    users: [],\n    revenue: [],\n  });\n  const [filters, setFilters] = useState({\n    dateRange: "7d",\n    category: "all",\n  });\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Real-time data updates\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        const [salesRes, usersRes, revenueRes] = await Promise.all([\n          fetch(`/api/sales?range=${filters.dateRange}`),\n          fetch(`/api/users?range=${filters.dateRange}`),\n          fetch(`/api/revenue?range=${filters.dateRange}`),\n        ]);\n\n        const [salesData, usersData, revenueData] = await Promise.all([\n          salesRes.json(),\n          usersRes.json(),\n          revenueRes.json(),\n        ]);\n\n        setData({\n          sales: salesData,\n          users: usersData,\n          revenue: revenueData,\n        });\n      } catch (error) {\n        console.error("Error fetching data:", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n\n    // Set up real-time updates\n    const interval = setInterval(fetchData, 30000); // Update every 30 seconds\n\n    return () => clearInterval(interval);\n  }, [filters]);\n\n  const salesChartData = {\n    labels: data.sales.map((item) => item.date),\n    datasets: [\n      {\n        label: "Sales",\n        data: data.sales.map((item) => item.value),\n        borderColor: "rgb(75, 192, 192)",\n        backgroundColor: "rgba(75, 192, 192, 0.2)",\n        tension: 0.1,\n      },\n    ],\n  };\n\n  const usersChartData = {\n    labels: data.users.map((item) => item.category),\n    datasets: [\n      {\n        label: "Users",\n        data: data.users.map((item) => item.count),\n        backgroundColor: [\n          "rgba(255, 99, 132, 0.8)",\n          "rgba(54, 162, 235, 0.8)",\n          "rgba(255, 206, 86, 0.8)",\n          "rgba(75, 192, 192, 0.8)",\n        ],\n      },\n    ],\n  };\n\n  const revenueChartData = {\n    labels: data.revenue.map((item) => item.month),\n    datasets: [\n      {\n        label: "Revenue",\n        data: data.revenue.map((item) => item.amount),\n        backgroundColor: "rgba(153, 102, 255, 0.8)",\n      },\n    ],\n  };\n\n  const exportData = () => {\n    const csvContent = [\n      ["Date", "Sales", "Users", "Revenue"],\n      ...data.sales.map((sale, index) => [\n        sale.date,\n        sale.value,\n        data.users[index]?.count || 0,\n        data.revenue[index]?.amount || 0,\n      ]),\n    ]\n      .map((row) => row.join(","))\n      .join("\\n");\n\n    const blob = new Blob([csvContent], { type: "text/csv" });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement("a");\n    a.href = url;\n    a.download = "dashboard-data.csv";\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className="dashboard">\n      <header className="dashboard-header">\n        <h1>Analytics Dashboard</h1>\n        <div className="dashboard-controls">\n          <select\n            value={filters.dateRange}\n            onChange={(e) =>\n              setFilters((prev) => ({\n                ...prev,\n                dateRange: e.target.value,\n              }))\n            }\n          >\n            <option value="1d">Last 24 Hours</option>\n            <option value="7d">Last 7 Days</option>\n            <option value="30d">Last 30 Days</option>\n            <option value="90d">Last 90 Days</option>\n          </select>\n\n          <select\n            value={filters.category}\n            onChange={(e) =>\n              setFilters((prev) => ({\n                ...prev,\n                category: e.target.value,\n              }))\n            }\n          >\n            <option value="all">All Categories</option>\n            <option value="electronics">Electronics</option>\n            <option value="clothing">Clothing</option>\n            <option value="books">Books</option>\n          </select>\n\n          <button onClick={exportData} className="export-btn">\n            Export Data\n          </button>\n        </div>\n      </header>\n\n      {isLoading && (\n        <div className="loading-overlay">\n          <div className="spinner"></div>\n          <p>Loading data...</p>\n        </div>\n      )}\n\n      <div className="dashboard-grid">\n        <div className="chart-container">\n          <h3>Sales Trend</h3>\n          <Line\n            data={salesChartData}\n            options={{\n              responsive: true,\n              plugins: {\n                legend: { display: false },\n              },\n              scales: {\n                y: { beginAtZero: true },\n              },\n            }}\n          />\n        </div>\n\n        <div className="chart-container">\n          <h3>User Distribution</h3>\n          <Pie\n            data={usersChartData}\n            options={{\n              responsive: true,\n              plugins: {\n                legend: { position: "bottom" },\n              },\n            }}\n          />\n        </div>\n\n        <div className="chart-container">\n          <h3>Revenue by Month</h3>\n          <Bar\n            data={revenueChartData}\n            options={{\n              responsive: true,\n              plugins: {\n                legend: { display: false },\n              },\n              scales: {\n                y: { beginAtZero: true },\n              },\n            }}\n          />\n        </div>\n\n        <div className="metrics-container">\n          <div className="metric-card">\n            <h4>Total Sales</h4>\n            <p className="metric-value">\n              $\n              {data.sales\n                .reduce((sum, item) => sum + item.value, 0)\n                .toLocaleString()}\n            </p>\n          </div>\n\n          <div className="metric-card">\n            <h4>Total Users</h4>\n            <p className="metric-value">\n              {data.users\n                .reduce((sum, item) => sum + item.count, 0)\n                .toLocaleString()}\n            </p>\n          </div>\n\n          <div className="metric-card">\n            <h4>Total Revenue</h4>\n            <p className="metric-value">\n              $\n              {data.revenue\n                .reduce((sum, item) => sum + item.amount, 0)\n                .toLocaleString()}\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n'})}),"\n",(0,a.jsx)(n.h2,{id:"system-design-challenges",children:"System Design Challenges"}),"\n",(0,a.jsx)(n.h3,{id:"challenge-6-design-a-social-media-feed",children:"Challenge 6: Design a Social Media Feed"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description"}),": Design and implement a scalable social media feed system."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Requirements"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Infinite scrolling feed"}),"\n",(0,a.jsx)(n.li,{children:"Real-time updates"}),"\n",(0,a.jsx)(n.li,{children:"Content filtering and personalization"}),"\n",(0,a.jsx)(n.li,{children:"Performance optimization"}),"\n",(0,a.jsx)(n.li,{children:"Caching strategy"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Architecture Design"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// Feed component with virtualization\nconst SocialFeed = () => {\n  const [posts, setPosts] = useState([]);\n  const [hasMore, setHasMore] = useState(true);\n  const [loading, setLoading] = useState(false);\n  const [filters, setFilters] = useState({\n    sortBy: "latest",\n    category: "all",\n  });\n\n  // Virtual scrolling implementation\n  const [visibleRange, setVisibleRange] = useState({ start: 0, end: 20 });\n  const itemHeight = 200; // Estimated height of each post\n\n  const loadMorePosts = useCallback(async () => {\n    if (loading || !hasMore) return;\n\n    setLoading(true);\n    try {\n      const response = await fetch(\n        `/api/posts?offset=${posts.length}&limit=20&sort=${filters.sortBy}&category=${filters.category}`\n      );\n      const newPosts = await response.json();\n\n      if (newPosts.length < 20) {\n        setHasMore(false);\n      }\n\n      setPosts((prev) => [...prev, ...newPosts]);\n    } catch (error) {\n      console.error("Error loading posts:", error);\n    } finally {\n      setLoading(false);\n    }\n  }, [posts.length, loading, hasMore, filters]);\n\n  // Intersection observer for infinite scroll\n  const observerRef = useRef();\n  const lastPostRef = useCallback(\n    (node) => {\n      if (loading) return;\n\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n\n      observerRef.current = new IntersectionObserver((entries) => {\n        if (entries[0].isIntersecting && hasMore) {\n          loadMorePosts();\n        }\n      });\n\n      if (node) {\n        observerRef.current.observe(node);\n      }\n    },\n    [loading, hasMore, loadMorePosts]\n  );\n\n  // Real-time updates using WebSocket\n  useEffect(() => {\n    const ws = new WebSocket("ws://localhost:8080/feed");\n\n    ws.onmessage = (event) => {\n      const newPost = JSON.parse(event.data);\n      setPosts((prev) => [newPost, ...prev]);\n    };\n\n    return () => ws.close();\n  }, []);\n\n  return (\n    <div className="social-feed">\n      <div className="feed-filters">\n        <select\n          value={filters.sortBy}\n          onChange={(e) =>\n            setFilters((prev) => ({\n              ...prev,\n              sortBy: e.target.value,\n            }))\n          }\n        >\n          <option value="latest">Latest</option>\n          <option value="popular">Most Popular</option>\n          <option value="trending">Trending</option>\n        </select>\n\n        <select\n          value={filters.category}\n          onChange={(e) =>\n            setFilters((prev) => ({\n              ...prev,\n              category: e.target.value,\n            }))\n          }\n        >\n          <option value="all">All Categories</option>\n          <option value="technology">Technology</option>\n          <option value="sports">Sports</option>\n          <option value="entertainment">Entertainment</option>\n        </select>\n      </div>\n\n      <div className="posts-container">\n        {posts.map((post, index) => (\n          <div\n            key={post.id}\n            ref={index === posts.length - 1 ? lastPostRef : null}\n            className="post-card"\n          >\n            <div className="post-header">\n              <img src={post.author.avatar} alt={post.author.name} />\n              <div className="post-meta">\n                <h4>{post.author.name}</h4>\n                <span>{new Date(post.createdAt).toLocaleDateString()}</span>\n              </div>\n            </div>\n\n            <div className="post-content">\n              <p>{post.content}</p>\n              {post.image && <img src={post.image} alt="Post content" />}\n            </div>\n\n            <div className="post-actions">\n              <button onClick={() => handleLike(post.id)}>\n                \u2764\ufe0f {post.likes}\n              </button>\n              <button onClick={() => handleComment(post.id)}>\n                \ud83d\udcac {post.comments}\n              </button>\n              <button onClick={() => handleShare(post.id)}>\ud83d\udce4 Share</button>\n            </div>\n          </div>\n        ))}\n\n        {loading && (\n          <div className="loading-indicator">Loading more posts...</div>\n        )}\n      </div>\n    </div>\n  );\n};\n'})}),"\n",(0,a.jsx)(n.h2,{id:"performance-challenges",children:"Performance Challenges"}),"\n",(0,a.jsx)(n.h3,{id:"challenge-7-optimize-a-large-data-table",children:"Challenge 7: Optimize a Large Data Table"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description"}),": Build a high-performance data table that can handle thousands of rows."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Requirements"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Virtual scrolling for large datasets"}),"\n",(0,a.jsx)(n.li,{children:"Column sorting and filtering"}),"\n",(0,a.jsx)(n.li,{children:"Row selection and bulk actions"}),"\n",(0,a.jsx)(n.li,{children:"Export functionality"}),"\n",(0,a.jsx)(n.li,{children:"Responsive design"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Implementation"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'const DataTable = ({ data, columns }) => {\n  const [sortConfig, setSortConfig] = useState({ key: null, direction: "asc" });\n  const [filters, setFilters] = useState({});\n  const [selectedRows, setSelectedRows] = useState(new Set());\n  const [currentPage, setCurrentPage] = useState(0);\n  const [pageSize, setPageSize] = useState(50);\n\n  // Virtual scrolling setup\n  const [scrollTop, setScrollTop] = useState(0);\n  const containerRef = useRef(null);\n  const rowHeight = 40;\n  const visibleRows =\n    Math.ceil(containerRef.current?.clientHeight / rowHeight) || 20;\n  const startIndex = Math.floor(scrollTop / rowHeight);\n  const endIndex = Math.min(startIndex + visibleRows + 5, data.length);\n\n  // Apply sorting and filtering\n  const processedData = useMemo(() => {\n    let filtered = data.filter((row) => {\n      return Object.entries(filters).every(([key, value]) => {\n        if (!value) return true;\n        return String(row[key]).toLowerCase().includes(value.toLowerCase());\n      });\n    });\n\n    if (sortConfig.key) {\n      filtered.sort((a, b) => {\n        const aVal = a[sortConfig.key];\n        const bVal = b[sortConfig.key];\n\n        if (aVal < bVal) return sortConfig.direction === "asc" ? -1 : 1;\n        if (aVal > bVal) return sortConfig.direction === "asc" ? 1 : -1;\n        return 0;\n      });\n    }\n\n    return filtered;\n  }, [data, filters, sortConfig]);\n\n  const handleSort = (key) => {\n    setSortConfig((prev) => ({\n      key,\n      direction: prev.key === key && prev.direction === "asc" ? "desc" : "asc",\n    }));\n  };\n\n  const handleSelectAll = () => {\n    if (selectedRows.size === processedData.length) {\n      setSelectedRows(new Set());\n    } else {\n      setSelectedRows(new Set(processedData.map((row) => row.id)));\n    }\n  };\n\n  const handleSelectRow = (id) => {\n    const newSelected = new Set(selectedRows);\n    if (newSelected.has(id)) {\n      newSelected.delete(id);\n    } else {\n      newSelected.add(id);\n    }\n    setSelectedRows(newSelected);\n  };\n\n  const exportData = () => {\n    const selectedData = processedData.filter((row) =>\n      selectedRows.has(row.id)\n    );\n    const csvContent = [\n      columns.map((col) => col.header).join(","),\n      ...selectedData.map((row) =>\n        columns.map((col) => row[col.key]).join(",")\n      ),\n    ].join("\\n");\n\n    const blob = new Blob([csvContent], { type: "text/csv" });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement("a");\n    a.href = url;\n    a.download = "exported-data.csv";\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className="data-table">\n      <div className="table-controls">\n        <div className="filters">\n          {columns.map((column) => (\n            <input\n              key={column.key}\n              placeholder={`Filter ${column.header}...`}\n              value={filters[column.key] || ""}\n              onChange={(e) =>\n                setFilters((prev) => ({\n                  ...prev,\n                  [column.key]: e.target.value,\n                }))\n              }\n            />\n          ))}\n        </div>\n\n        <div className="actions">\n          <button onClick={exportData} disabled={selectedRows.size === 0}>\n            Export Selected ({selectedRows.size})\n          </button>\n          <select\n            value={pageSize}\n            onChange={(e) => setPageSize(Number(e.target.value))}\n          >\n            <option value={25}>25 rows</option>\n            <option value={50}>50 rows</option>\n            <option value={100}>100 rows</option>\n          </select>\n        </div>\n      </div>\n\n      <div className="table-container" ref={containerRef}>\n        <table>\n          <thead>\n            <tr>\n              <th>\n                <input\n                  type="checkbox"\n                  checked={selectedRows.size === processedData.length}\n                  onChange={handleSelectAll}\n                />\n              </th>\n              {columns.map((column) => (\n                <th\n                  key={column.key}\n                  onClick={() => handleSort(column.key)}\n                  className="sortable"\n                >\n                  {column.header}\n                  {sortConfig.key === column.key && (\n                    <span className="sort-indicator">\n                      {sortConfig.direction === "asc" ? "\u2191" : "\u2193"}\n                    </span>\n                  )}\n                </th>\n              ))}\n            </tr>\n          </thead>\n\n          <tbody>\n            {processedData.slice(startIndex, endIndex).map((row, index) => (\n              <tr\n                key={row.id}\n                style={{\n                  position: "absolute",\n                  top: (startIndex + index) * rowHeight,\n                  height: rowHeight,\n                }}\n                className={selectedRows.has(row.id) ? "selected" : ""}\n              >\n                <td>\n                  <input\n                    type="checkbox"\n                    checked={selectedRows.has(row.id)}\n                    onChange={() => handleSelectRow(row.id)}\n                  />\n                </td>\n                {columns.map((column) => (\n                  <td key={column.key}>\n                    {column.render\n                      ? column.render(row[column.key], row)\n                      : row[column.key]}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <div className="table-footer">\n        <p>\n          Showing {startIndex + 1} to {Math.min(endIndex, processedData.length)}{" "}\n          of {processedData.length} results\n        </p>\n      </div>\n    </div>\n  );\n};\n'})}),"\n",(0,a.jsx)(n.h2,{id:"interview-scenarios",children:"Interview Scenarios"}),"\n",(0,a.jsx)(n.h3,{id:"scenario-1-live-coding-session",children:"Scenario 1: Live Coding Session"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Setup"}),": You're asked to build a feature during a live coding interview."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Tips"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Start with a clear plan and requirements"}),"\n",(0,a.jsx)(n.li,{children:"Write clean, readable code"}),"\n",(0,a.jsx)(n.li,{children:"Explain your thought process"}),"\n",(0,a.jsx)(n.li,{children:"Handle edge cases"}),"\n",(0,a.jsx)(n.li,{children:"Test your implementation"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"scenario-2-code-review",children:"Scenario 2: Code Review"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Setup"}),": You're given existing code to review and improve."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Focus Areas"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Code quality and readability"}),"\n",(0,a.jsx)(n.li,{children:"Performance optimization"}),"\n",(0,a.jsx)(n.li,{children:"Security considerations"}),"\n",(0,a.jsx)(n.li,{children:"Testing coverage"}),"\n",(0,a.jsx)(n.li,{children:"Best practices"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"scenario-3-system-design-discussion",children:"Scenario 3: System Design Discussion"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Setup"}),": Design a scalable frontend architecture."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Key Points"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Component architecture"}),"\n",(0,a.jsx)(n.li,{children:"State management strategy"}),"\n",(0,a.jsx)(n.li,{children:"Performance considerations"}),"\n",(0,a.jsx)(n.li,{children:"Scalability planning"}),"\n",(0,a.jsx)(n.li,{children:"Technology choices"}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"This comprehensive guide provides real-world coding challenges that test both technical skills and problem-solving abilities. Practice these challenges to prepare for frontend interviews at companies companies."})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(6540);const a={},i=s.createContext(a);function r(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);