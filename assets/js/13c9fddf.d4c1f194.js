"use strict";(self.webpackChunkfrontend_interview_guide=self.webpackChunkfrontend_interview_guide||[]).push([[8947],{1796:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var s=t(4848),i=t(8453);const o={},r="Problem 5: Simple State Management System",a={id:"frontend/coding-problems/state-management",title:"Problem 5: Simple State Management System",description:"Problem Description",source:"@site/docs/frontend/coding-problems/05-state-management.md",sourceDirName:"frontend/coding-problems",slug:"/frontend/coding-problems/state-management",permalink:"/interview/docs/frontend/coding-problems/state-management",draft:!1,unlisted:!1,editUrl:"https://github.com/Nhi4912/interview/tree/main/docs/frontend/coding-problems/05-state-management.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"frontendSidebar",previous:{title:"Problem 4: Virtual Scrolling Implementation",permalink:"/interview/docs/frontend/coding-problems/virtual-scrolling"},next:{title:"Problem: Autocomplete Component",permalink:"/interview/docs/frontend/coding-problems/autocomplete"}},d={},l=[{value:"Problem Description",id:"problem-description",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Solution",id:"solution",level:2},{value:"React Integration",id:"react-integration",level:2},{value:"CSS Styling",id:"css-styling",level:2},{value:"Key Features",id:"key-features",level:2},{value:"1. What is the Virtual DOM and how does React use it?",id:"1-what-is-the-virtual-dom-and-how-does-react-use-it",level:2},{value:"2. Explain React&#39;s Reconciliation Process",id:"2-explain-reacts-reconciliation-process",level:2},{value:"3. What are React Hooks? Name and explain the most common ones.",id:"3-what-are-react-hooks-name-and-explain-the-most-common-ones",level:2},{value:"4. How does Context API work? When should you use it?",id:"4-how-does-context-api-work-when-should-you-use-it",level:2},{value:"5. What is a Higher-Order Component (HOC)?",id:"5-what-is-a-higher-order-component-hoc",level:2},{value:"6. Explain React&#39;s key prop and why it&#39;s important.",id:"6-explain-reacts-key-prop-and-why-its-important",level:2},{value:"7. What is code splitting and how do you implement it in React?",id:"7-what-is-code-splitting-and-how-do-you-implement-it-in-react",level:2},{value:"8. How do you optimize performance in React apps?",id:"8-how-do-you-optimize-performance-in-react-apps",level:2},{value:"9. What is an Error Boundary? How do you use it?",id:"9-what-is-an-error-boundary-how-do-you-use-it",level:2},{value:"10. How does React handle events? How is it different from the DOM?",id:"10-how-does-react-handle-events-how-is-it-different-from-the-dom",level:2},{value:"11. What is the difference between controlled and uncontrolled components?",id:"11-what-is-the-difference-between-controlled-and-uncontrolled-components",level:2},{value:"12. How do you test React components?",id:"12-how-do-you-test-react-components",level:2},{value:"13. How do you handle side effects in React?",id:"13-how-do-you-handle-side-effects-in-react",level:2},{value:"14. What is prop drilling and how do you avoid it?",id:"14-what-is-prop-drilling-and-how-do-you-avoid-it",level:2},{value:"15. Explain React&#39;s rendering lifecycle (function and class components).",id:"15-explain-reacts-rendering-lifecycle-function-and-class-components",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"problem-5-simple-state-management-system",children:"Problem 5: Simple State Management System"}),"\n",(0,s.jsx)(n.h2,{id:"problem-description",children:"Problem Description"}),"\n",(0,s.jsx)(n.p,{children:"Implement a simple state management system similar to Redux but lightweight."}),"\n",(0,s.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Centralized state store"}),"\n",(0,s.jsx)(n.li,{children:"Action dispatching"}),"\n",(0,s.jsx)(n.li,{children:"Reducer pattern"}),"\n",(0,s.jsx)(n.li,{children:"State subscriptions"}),"\n",(0,s.jsx)(n.li,{children:"Middleware support"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'class SimpleStore {\n  constructor(reducer, initialState = {}) {\n    this.reducer = reducer;\n    this.state = initialState;\n    this.subscribers = new Set();\n    this.middlewares = [];\n\n    this.dispatch = this.dispatch.bind(this);\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  dispatch(action) {\n    if (typeof action === "function") {\n      return action(this.dispatch, this.getState);\n    }\n\n    // Apply middlewares\n    let processedAction = action;\n    for (const middleware of this.middlewares) {\n      processedAction = middleware(this)(processedAction);\n      if (!processedAction) return;\n    }\n\n    // Update state\n    const previousState = this.state;\n    this.state = this.reducer(this.state, processedAction);\n\n    // Notify subscribers\n    this.subscribers.forEach((subscriber) => {\n      subscriber(this.state, previousState, processedAction);\n    });\n\n    return processedAction;\n  }\n\n  subscribe(subscriber) {\n    this.subscribers.add(subscriber);\n    return () => {\n      this.subscribers.delete(subscriber);\n    };\n  }\n\n  useMiddleware(middleware) {\n    this.middlewares.push(middleware);\n  }\n}\n\n// Example reducer\nconst todoReducer = (state = { todos: [], filter: "all" }, action) => {\n  switch (action.type) {\n    case "ADD_TODO":\n      return {\n        ...state,\n        todos: [\n          ...state.todos,\n          {\n            id: Date.now(),\n            text: action.payload,\n            completed: false,\n          },\n        ],\n      };\n\n    case "TOGGLE_TODO":\n      return {\n        ...state,\n        todos: state.todos.map((todo) =>\n          todo.id === action.payload\n            ? { ...todo, completed: !todo.completed }\n            : todo\n        ),\n      };\n\n    case "DELETE_TODO":\n      return {\n        ...state,\n        todos: state.todos.filter((todo) => todo.id !== action.payload),\n      };\n\n    case "SET_FILTER":\n      return {\n        ...state,\n        filter: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// Action creators\nconst addTodo = (text) => ({\n  type: "ADD_TODO",\n  payload: text,\n});\n\nconst toggleTodo = (id) => ({\n  type: "TOGGLE_TODO",\n  payload: id,\n});\n\nconst deleteTodo = (id) => ({\n  type: "DELETE_TODO",\n  payload: id,\n});\n\nconst setFilter = (filter) => ({\n  type: "SET_FILTER",\n  payload: filter,\n});\n\n// Middleware examples\nconst loggerMiddleware = (store) => (action) => {\n  console.log("Previous State:", store.getState());\n  console.log("Action:", action);\n  const result = action;\n  console.log("Next State:", store.getState());\n  return result;\n};\n\nconst thunkMiddleware = (store) => (action) => {\n  if (typeof action === "function") {\n    return action(store.dispatch, store.getState);\n  }\n  return action;\n};\n\n// Usage\nconst store = new SimpleStore(todoReducer, {\n  todos: [],\n  filter: "all",\n});\n\nstore.useMiddleware(loggerMiddleware);\nstore.useMiddleware(thunkMiddleware);\n\nconst unsubscribe = store.subscribe((state, previousState, action) => {\n  console.log("State changed:", action.type);\n  renderApp(state);\n});\n\n// Dispatch actions\nstore.dispatch(addTodo("Learn Redux"));\nstore.dispatch(addTodo("Build an app"));\nstore.dispatch(toggleTodo(1));\n'})}),"\n",(0,s.jsx)(n.h2,{id:"react-integration",children:"React Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { useState, useEffect } from "react";\n\nconst useStore = (store, selector) => {\n  const [state, setState] = useState(selector(store.getState()));\n\n  useEffect(() => {\n    const unsubscribe = store.subscribe((newState) => {\n      const newSelectedState = selector(newState);\n      setState(newSelectedState);\n    });\n\n    return unsubscribe;\n  }, [store, selector]);\n\n  return [state, store.dispatch];\n};\n\nconst TodoApp = ({ store }) => {\n  const [state, dispatch] = useStore(store, (state) => state);\n  const [inputValue, setInputValue] = useState("");\n\n  const handleAddTodo = (e) => {\n    e.preventDefault();\n    if (inputValue.trim()) {\n      dispatch(addTodo(inputValue.trim()));\n      setInputValue("");\n    }\n  };\n\n  const filteredTodos = state.todos.filter((todo) => {\n    if (state.filter === "active") return !todo.completed;\n    if (state.filter === "completed") return todo.completed;\n    return true;\n  });\n\n  return (\n    <div className="todo-app">\n      <h1>Todo App</h1>\n\n      <form onSubmit={handleAddTodo}>\n        <input\n          type="text"\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n          placeholder="Add a new todo..."\n        />\n        <button type="submit">Add</button>\n      </form>\n\n      <div className="filters">\n        <button\n          className={state.filter === "all" ? "active" : ""}\n          onClick={() => dispatch(setFilter("all"))}\n        >\n          All\n        </button>\n        <button\n          className={state.filter === "active" ? "active" : ""}\n          onClick={() => dispatch(setFilter("active"))}\n        >\n          Active\n        </button>\n        <button\n          className={state.filter === "completed" ? "active" : ""}\n          onClick={() => dispatch(setFilter("completed"))}\n        >\n          Completed\n        </button>\n      </div>\n\n      <ul className="todo-list">\n        {filteredTodos.map((todo) => (\n          <li key={todo.id} className={todo.completed ? "completed" : ""}>\n            <input\n              type="checkbox"\n              checked={todo.completed}\n              onChange={() => dispatch(toggleTodo(todo.id))}\n            />\n            <span>{todo.text}</span>\n            <button onClick={() => dispatch(deleteTodo(todo.id))}>\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n'})}),"\n",(0,s.jsx)(n.h2,{id:"css-styling",children:"CSS Styling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:'.todo-app {\n  max-width: 600px;\n  margin: 0 auto;\n  padding: 20px;\n  font-family: Arial, sans-serif;\n}\n\n.todo-app h1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 30px;\n}\n\n.todo-app form {\n  display: flex;\n  gap: 10px;\n  margin-bottom: 20px;\n}\n\n.todo-app input[type="text"] {\n  flex: 1;\n  padding: 12px;\n  border: 2px solid #ddd;\n  border-radius: 6px;\n  font-size: 16px;\n}\n\n.todo-app button {\n  padding: 12px 20px;\n  background: #007bff;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 16px;\n  transition: background-color 0.3s;\n}\n\n.todo-app button:hover {\n  background: #0056b3;\n}\n\n.filters {\n  display: flex;\n  gap: 10px;\n  margin-bottom: 20px;\n}\n\n.filters button {\n  padding: 8px 16px;\n  background: white;\n  color: #333;\n  border: 1px solid #ddd;\n}\n\n.filters button.active {\n  background: #007bff;\n  color: white;\n  border-color: #007bff;\n}\n\n.todo-list {\n  list-style: none;\n  padding: 0;\n}\n\n.todo-list li {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  padding: 12px;\n  border-bottom: 1px solid #eee;\n  background: white;\n}\n\n.todo-list li.completed span {\n  text-decoration: line-through;\n  color: #888;\n}\n\n.todo-list button {\n  padding: 6px 12px;\n  background: #dc3545;\n  font-size: 14px;\n}\n\n.todo-list button:hover {\n  background: #c82333;\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Centralized State"}),": Single source of truth"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Predictable Updates"}),": State changes through actions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Middleware Support"}),": Extensible with custom middleware"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"React Integration"}),": Custom hook for React"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Subscription System"}),": Efficient state change notifications"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Action Creators"}),": Reusable action functions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Immutable Updates"}),": Always return new state objects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Debugging"}),": Built-in logging middleware"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h1,{id:"react-interview-deep-dive-questions-diagrams-and-explanations",children:"React Interview Deep Dive: Questions, Diagrams, and Explanations"}),"\n",(0,s.jsx)(n.h2,{id:"1-what-is-the-virtual-dom-and-how-does-react-use-it",children:"1. What is the Virtual DOM and how does React use it?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The Virtual DOM is a lightweight JS representation of the real DOM."}),"\n",(0,s.jsx)(n.li,{children:"React updates the Virtual DOM first, then efficiently updates the real DOM using a diffing algorithm (reconciliation)."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Diagram:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"flowchart LR\n  A[Component State Change] --\x3e B[Virtual DOM Update]\n  B --\x3e C[Diffing Algorithm]\n  C --\x3e D[Minimal Real DOM Updates]\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"2-explain-reacts-reconciliation-process",children:"2. Explain React's Reconciliation Process"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"When state/props change, React creates a new Virtual DOM tree."}),"\n",(0,s.jsx)(n.li,{children:"It compares (diffs) the new tree with the previous one."}),"\n",(0,s.jsx)(n.li,{children:"Only the changed nodes are updated in the real DOM."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Diagram:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"sequenceDiagram\n  participant User\n  participant React\n  participant DOM\n  User->>React: setState()\n  React->>React: Create new Virtual DOM\n  React->>React: Diff with old Virtual DOM\n  React->>DOM: Update only changed nodes\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"3-what-are-react-hooks-name-and-explain-the-most-common-ones",children:"3. What are React Hooks? Name and explain the most common ones."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Hooks let you use state and lifecycle features in function components."}),"\n",(0,s.jsxs)(n.li,{children:["Common hooks:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"useState"}),": Local state"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"useEffect"}),": Side effects (data fetching, subscriptions)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"useContext"}),": Access context"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"useReducer"}),": Complex state logic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"useRef"}),": Mutable refs, DOM access"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"useMemo"}),"/",(0,s.jsx)(n.code,{children:"useCallback"}),": Memoization"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"4-how-does-context-api-work-when-should-you-use-it",children:"4. How does Context API work? When should you use it?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Context provides a way to pass data through the component tree without props drilling."}),"\n",(0,s.jsx)(n.li,{children:"Use for global data (theme, user, locale) but avoid for high-frequency updates (use state management instead)."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Diagram:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"flowchart TD\n  A[Provider] --\x3e B[Child 1]\n  A --\x3e C[Child 2]\n  C --\x3e D[Grandchild]\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"5-what-is-a-higher-order-component-hoc",children:"5. What is a Higher-Order Component (HOC)?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A function that takes a component and returns a new component with enhanced behavior."}),"\n",(0,s.jsx)(n.li,{children:"Used for code reuse (e.g., authentication, logging, theming)."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'function withLogger(WrappedComponent) {\n  return function (props) {\n    useEffect(() => {\n      console.log("Mounted");\n    }, []);\n    return <WrappedComponent {...props} />;\n  };\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"6-explain-reacts-key-prop-and-why-its-important",children:"6. Explain React's key prop and why it's important."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"key"})," prop helps React identify which items have changed, are added, or are removed in a list."]}),"\n",(0,s.jsx)(n.li,{children:"Keys should be unique and stable (not array index)."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"7-what-is-code-splitting-and-how-do-you-implement-it-in-react",children:"7. What is code splitting and how do you implement it in React?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Code splitting breaks your app into smaller bundles for faster load times."}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"React.lazy"})," and ",(0,s.jsx)(n.code,{children:"Suspense"})," for dynamic imports."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const LazyComponent = React.lazy(() => import("./LazyComponent"));\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"8-how-do-you-optimize-performance-in-react-apps",children:"8. How do you optimize performance in React apps?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use memoization (",(0,s.jsx)(n.code,{children:"React.memo"}),", ",(0,s.jsx)(n.code,{children:"useMemo"}),", ",(0,s.jsx)(n.code,{children:"useCallback"}),")"]}),"\n",(0,s.jsx)(n.li,{children:"Avoid unnecessary re-renders"}),"\n",(0,s.jsx)(n.li,{children:"Use virtualization for large lists"}),"\n",(0,s.jsx)(n.li,{children:"Code splitting and lazy loading"}),"\n",(0,s.jsx)(n.li,{children:"Minimize state in high-frequency components"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"9-what-is-an-error-boundary-how-do-you-use-it",children:"9. What is an Error Boundary? How do you use it?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A React component that catches JS errors in its child tree and displays a fallback UI."}),"\n",(0,s.jsxs)(n.li,{children:["Implement with a class component using ",(0,s.jsx)(n.code,{children:"componentDidCatch"})," and ",(0,s.jsx)(n.code,{children:"getDerivedStateFromError"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"10-how-does-react-handle-events-how-is-it-different-from-the-dom",children:"10. How does React handle events? How is it different from the DOM?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"React uses a synthetic event system for cross-browser compatibility."}),"\n",(0,s.jsx)(n.li,{children:"Events are wrapped and pooled for performance."}),"\n",(0,s.jsxs)(n.li,{children:["Event handlers are camelCase (",(0,s.jsx)(n.code,{children:"onClick"}),"), not lowercase (",(0,s.jsx)(n.code,{children:"onclick"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"11-what-is-the-difference-between-controlled-and-uncontrolled-components",children:"11. What is the difference between controlled and uncontrolled components?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Controlled: Form data managed by React state."}),"\n",(0,s.jsx)(n.li,{children:"Uncontrolled: Form data managed by the DOM (useRef)."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"12-how-do-you-test-react-components",children:"12. How do you test React components?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use Jest and React Testing Library."}),"\n",(0,s.jsx)(n.li,{children:"Test rendering, user interactions, and output."}),"\n",(0,s.jsx)(n.li,{children:"Mock APIs and context as needed."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"13-how-do-you-handle-side-effects-in-react",children:"13. How do you handle side effects in React?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"useEffect"})," for data fetching, subscriptions, manual DOM changes."]}),"\n",(0,s.jsx)(n.li,{children:"Clean up effects to avoid memory leaks."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"14-what-is-prop-drilling-and-how-do-you-avoid-it",children:"14. What is prop drilling and how do you avoid it?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Prop drilling: Passing props through many layers."}),"\n",(0,s.jsx)(n.li,{children:"Avoid with Context API or state management libraries."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"15-explain-reacts-rendering-lifecycle-function-and-class-components",children:"15. Explain React's rendering lifecycle (function and class components)."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Function: Render -> commit -> effects (",(0,s.jsx)(n.code,{children:"useEffect"})," runs after paint)"]}),"\n",(0,s.jsx)(n.li,{children:"Class: constructor -> render -> componentDidMount -> updates -> componentWillUnmount"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Use these questions, diagrams, and explanations to prepare for all levels of React interviews. Practice drawing diagrams and explaining concepts out loud!"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(6540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);