"use strict";(self.webpackChunkfrontend_interview_guide=self.webpackChunkfrontend_interview_guide||[]).push([[443],{1080:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"frontend/fundamentals/event-loop-deep-dive","title":"JavaScript Event Loop: Complete Deep Dive","description":"Table of Contents","source":"@site/docs/frontend/fundamentals/event-loop-deep-dive.md","sourceDirName":"frontend/fundamentals","slug":"/frontend/fundamentals/event-loop-deep-dive","permalink":"/interview/docs/frontend/fundamentals/event-loop-deep-dive","draft":false,"unlisted":false,"editUrl":"https://github.com/Nhi4912/interview/tree/main/docs/frontend/fundamentals/event-loop-deep-dive.md","tags":[],"version":"current","frontMatter":{},"sidebar":"frontendSidebar","previous":{"title":"DOM Manipulation: Complete Deep Dive","permalink":"/interview/docs/frontend/fundamentals/dom-manipulation-deep-dive"},"next":{"title":"React Core: Definitions, Interview Questions & Answers","permalink":"/interview/docs/frontend/react/core"}}');var i=s(4848),o=s(8453);const r={},l="JavaScript Event Loop: Complete Deep Dive",c={},a=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Understanding the Event Loop",id:"understanding-the-event-loop",level:2},{value:"What is the Event Loop?",id:"what-is-the-event-loop",level:3},{value:"Key Concepts:",id:"key-concepts",level:4},{value:"The Big Picture Architecture",id:"the-big-picture-architecture",level:3},{value:"Call Stack Fundamentals",id:"call-stack-fundamentals",level:2},{value:"How the Call Stack Works",id:"how-the-call-stack-works",level:3},{value:"Stack Operations:",id:"stack-operations",level:4},{value:"Stack Overflow",id:"stack-overflow",level:3},{value:"Web APIs and Browser Environment",id:"web-apis-and-browser-environment",level:2},{value:"What are Web APIs?",id:"what-are-web-apis",level:3},{value:"Common Web APIs:",id:"common-web-apis",level:4},{value:"How Web APIs Work",id:"how-web-apis-work",level:3},{value:"Task Queue vs Microtask Queue",id:"task-queue-vs-microtask-queue",level:2},{value:"Understanding Queues",id:"understanding-queues",level:3},{value:"1. Macrotask Queue (Task Queue)",id:"1-macrotask-queue-task-queue",level:4},{value:"2. Microtask Queue",id:"2-microtask-queue",level:4},{value:"Priority System",id:"priority-system",level:3},{value:"Visual Representation",id:"visual-representation",level:3},{value:"Detailed Example",id:"detailed-example",level:3},{value:"Event Loop Phases",id:"event-loop-phases",level:2},{value:"Detailed Event Loop Algorithm",id:"detailed-event-loop-algorithm",level:3},{value:"Browser Event Loop vs Node.js",id:"browser-event-loop-vs-nodejs",level:3},{value:"Visual Diagrams",id:"visual-diagrams",level:2},{value:"Complete Event Loop Flow",id:"complete-event-loop-flow",level:3},{value:"Promise vs setTimeout Timing",id:"promise-vs-settimeout-timing",level:3},{value:"Common Misconceptions",id:"common-misconceptions",level:2},{value:"Misconception 1: &quot;setTimeout(fn, 0) executes immediately&quot;",id:"misconception-1-settimeoutfn-0-executes-immediately",level:3},{value:"Misconception 2: &quot;Promises are synchronous&quot;",id:"misconception-2-promises-are-synchronous",level:3},{value:"Misconception 3: &quot;All async operations are the same priority&quot;",id:"misconception-3-all-async-operations-are-the-same-priority",level:3},{value:"Performance Implications",id:"performance-implications",level:2},{value:"Blocking the Event Loop",id:"blocking-the-event-loop",level:3},{value:"Microtask Queue Starvation",id:"microtask-queue-starvation",level:3},{value:"Interview Questions &amp; Answers",id:"interview-questions--answers",level:2},{value:"Q1: What will this code output and why?",id:"q1-what-will-this-code-output-and-why",level:3},{value:"Q2: Explain the difference between microtasks and macrotasks.",id:"q2-explain-the-difference-between-microtasks-and-macrotasks",level:3},{value:"Q3: How would you prevent blocking the main thread during heavy computation?",id:"q3-how-would-you-prevent-blocking-the-main-thread-during-heavy-computation",level:3},{value:"Q4: What&#39;s the difference between setTimeout(fn, 0) and queueMicrotask(fn)?",id:"q4-whats-the-difference-between-settimeoutfn-0-and-queuemicrotaskfn",level:3},{value:"Practical Examples",id:"practical-examples",level:2},{value:"Example 1: Building a Non-Blocking Renderer",id:"example-1-building-a-non-blocking-renderer",level:3},{value:"Example 2: Promise Queue with Concurrency Control",id:"example-2-promise-queue-with-concurrency-control",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"javascript-event-loop-complete-deep-dive",children:"JavaScript Event Loop: Complete Deep Dive"})}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#understanding-the-event-loop",children:"Understanding the Event Loop"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#call-stack-fundamentals",children:"Call Stack Fundamentals"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#web-apis-and-browser-environment",children:"Web APIs and Browser Environment"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#task-queue-vs-microtask-queue",children:"Task Queue vs Microtask Queue"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#event-loop-phases",children:"Event Loop Phases"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#visual-diagrams",children:"Visual Diagrams"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#common-misconceptions",children:"Common Misconceptions"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#performance-implications",children:"Performance Implications"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#interview-questions--answers",children:"Interview Questions & Answers"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#practical-examples",children:"Practical Examples"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"understanding-the-event-loop",children:"Understanding the Event Loop"}),"\n",(0,i.jsx)(n.h3,{id:"what-is-the-event-loop",children:"What is the Event Loop?"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Event Loop"})," is the fundamental mechanism that allows JavaScript to perform asynchronous operations despite being a single-threaded language. It's the coordination system between the JavaScript engine and the browser's Web APIs."]}),"\n",(0,i.jsx)(n.h4,{id:"key-concepts",children:"Key Concepts:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Single-Threaded Nature"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["JavaScript has only ",(0,i.jsx)(n.strong,{children:"one call stack"})]}),"\n",(0,i.jsxs)(n.li,{children:["Only ",(0,i.jsx)(n.strong,{children:"one thing can happen at a time"})]}),"\n",(0,i.jsxs)(n.li,{children:["But it can handle ",(0,i.jsx)(n.strong,{children:"asynchronous operations"})," through the event loop"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Non-Blocking I/O"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Long-running operations don't freeze the UI"}),"\n",(0,i.jsx)(n.li,{children:"Callbacks are scheduled for later execution"}),"\n",(0,i.jsx)(n.li,{children:"Maintains responsive user interfaces"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Concurrency Model"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"JavaScript achieves concurrency through the event loop"}),"\n",(0,i.jsxs)(n.li,{children:["Multiple operations can be ",(0,i.jsx)(n.strong,{children:"initiated"})," simultaneously"]}),"\n",(0,i.jsxs)(n.li,{children:["But they're ",(0,i.jsx)(n.strong,{children:"executed"})," one at a time"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"the-big-picture-architecture",children:"The Big Picture Architecture"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 BROWSER ENVIRONMENT                 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  JavaScript Engine (V8, SpiderMonkey, etc.)        \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                  \u2502\n\u2502  \u2502    Heap     \u2502  \u2502 Call Stack  \u2502                  \u2502\n\u2502  \u2502   Memory    \u2502  \u2502             \u2502                  \u2502\n\u2502  \u2502 Allocation  \u2502  \u2502 Execution   \u2502                  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502 Context     \u2502                  \u2502\n\u2502                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                  WEB APIs                           \u2502\n\u2502  DOM APIs \u2502 HTTP \u2502 Timers \u2502 Geolocation \u2502 etc.     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502              TASK QUEUES                            \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                  \u2502\n\u2502  \u2502  Callback   \u2502  \u2502 Microtask   \u2502                  \u2502\n\u2502  \u2502   Queue     \u2502  \u2502   Queue     \u2502                  \u2502\n\u2502  \u2502(Macrotasks) \u2502  \u2502(Promises)   \u2502                  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2191\n        EVENT LOOP\n"})}),"\n",(0,i.jsx)(n.h2,{id:"call-stack-fundamentals",children:"Call Stack Fundamentals"}),"\n",(0,i.jsx)(n.h3,{id:"how-the-call-stack-works",children:"How the Call Stack Works"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Call Stack"})," is a LIFO (Last In, First Out) data structure that keeps track of function calls."]}),"\n",(0,i.jsx)(n.h4,{id:"stack-operations",children:"Stack Operations:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Function Call (Push)"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function first() {\n    console.log('First function');\n    second();\n}\n\nfunction second() {\n    console.log('Second function');\n    third();\n}\n\nfunction third() {\n    console.log('Third function');\n}\n\nfirst();\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Call Stack Visualization:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Step 1: first() called\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   first()   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nStep 2: second() called from first()\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  second()   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   first()   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nStep 3: third() called from second()\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   third()   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  second()   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   first()   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nStep 4: third() completes (Pop)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  second()   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   first()   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nStep 5: second() completes (Pop)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   first()   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nStep 6: first() completes (Pop)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Empty    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h3,{id:"stack-overflow",children:"Stack Overflow"}),"\n",(0,i.jsx)(n.p,{children:"When the call stack exceeds its limit:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function recursiveFunction() {\n    recursiveFunction(); // Infinite recursion\n}\n\nrecursiveFunction(); // RangeError: Maximum call stack size exceeded\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Prevention Strategies:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use iterative solutions when possible"}),"\n",(0,i.jsx)(n.li,{children:"Implement proper base cases in recursion"}),"\n",(0,i.jsx)(n.li,{children:"Use setTimeout for deep recursion to break stack"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"web-apis-and-browser-environment",children:"Web APIs and Browser Environment"}),"\n",(0,i.jsx)(n.h3,{id:"what-are-web-apis",children:"What are Web APIs?"}),"\n",(0,i.jsx)(n.p,{children:"Web APIs are browser-provided interfaces that allow JavaScript to interact with browser features asynchronously."}),"\n",(0,i.jsx)(n.h4,{id:"common-web-apis",children:"Common Web APIs:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Timer APIs"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// setTimeout - executes after delay\nsetTimeout(() => console.log('Timer callback'), 1000);\n\n// setInterval - executes repeatedly\nsetInterval(() => console.log('Interval callback'), 1000);\n\n// setImmediate (Node.js)\nsetImmediate(() => console.log('Immediate callback'));\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. DOM APIs"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Event listeners\ndocument.addEventListener('click', () => {\n    console.log('Click handled');\n});\n\n// DOM manipulation\ndocument.getElementById('button').onclick = () => {\n    console.log('Button clicked');\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Network APIs"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Fetch API\nfetch('/api/data')\n    .then(response => response.json())\n    .then(data => console.log(data));\n\n// XMLHttpRequest\nconst xhr = new XMLHttpRequest();\nxhr.open('GET', '/api/data');\nxhr.onload = () => console.log(xhr.responseText);\nxhr.send();\n"})}),"\n",(0,i.jsx)(n.h3,{id:"how-web-apis-work",children:"How Web APIs Work"}),"\n",(0,i.jsx)(n.p,{children:"When you call a Web API:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Delegation"}),": JavaScript delegates the operation to the browser"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Continuation"}),": JavaScript continues executing other code"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Completion"}),": Browser completes the operation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Callback"}),": Browser places callback in appropriate queue"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"console.log('Start');\n\nsetTimeout(() => {\n    console.log('Timer callback');\n}, 0);\n\nconsole.log('End');\n\n// Output:\n// Start\n// End\n// Timer callback\n"})}),"\n",(0,i.jsx)(n.h2,{id:"task-queue-vs-microtask-queue",children:"Task Queue vs Microtask Queue"}),"\n",(0,i.jsx)(n.h3,{id:"understanding-queues",children:"Understanding Queues"}),"\n",(0,i.jsx)(n.p,{children:"The Event Loop manages two main types of queues with different priorities:"}),"\n",(0,i.jsx)(n.h4,{id:"1-macrotask-queue-task-queue",children:"1. Macrotask Queue (Task Queue)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Lower priority"})}),"\n",(0,i.jsxs)(n.li,{children:["Processed ",(0,i.jsx)(n.strong,{children:"after"})," microtasks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Sources"}),": setTimeout, setInterval, I/O operations, UI events"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"2-microtask-queue",children:"2. Microtask Queue"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Higher priority"})}),"\n",(0,i.jsxs)(n.li,{children:["Processed ",(0,i.jsx)(n.strong,{children:"before"})," macrotasks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Sources"}),": Promises, queueMicrotask, MutationObserver"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"priority-system",children:"Priority System"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Event Loop Priority (High to Low):\n1. Call Stack (currently executing)\n2. Microtask Queue (Promises, queueMicrotask)\n3. Macrotask Queue (setTimeout, DOM events)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"visual-representation",children:"Visual Representation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                EVENT LOOP CYCLE                     \u2502\n\u2502                                                     \u2502\n\u2502  1. Execute Call Stack to completion                \u2502\n\u2502  2. Process ALL Microtasks                          \u2502\n\u2502  3. Process ONE Macrotask                           \u2502\n\u2502  4. Process ALL Microtasks (again)                  \u2502\n\u2502  5. Render (if needed)                              \u2502\n\u2502  6. Repeat                                          \u2502\n\u2502                                                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h3,{id:"detailed-example",children:"Detailed Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"console.log('1: Start');\n\nsetTimeout(() => console.log('2: setTimeout'), 0);\n\nPromise.resolve()\n    .then(() => console.log('3: Promise 1'))\n    .then(() => console.log('4: Promise 2'));\n\nqueueMicrotask(() => console.log('5: queueMicrotask'));\n\nsetTimeout(() => console.log('6: setTimeout 2'), 0);\n\nconsole.log('7: End');\n\n// Execution Order:\n// 1: Start\n// 7: End\n// 3: Promise 1\n// 5: queueMicrotask\n// 4: Promise 2\n// 2: setTimeout\n// 6: setTimeout 2\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Step-by-Step Breakdown:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Initial State:\nCall Stack: [main()]\nMicrotask Queue: []\nMacrotask Queue: []\n\nAfter console.log(\'1: Start\'):\nCall Stack: [main()]\nMicrotask Queue: []\nMacrotask Queue: []\nOutput: "1: Start"\n\nAfter setTimeout:\nCall Stack: [main()]\nMicrotask Queue: []\nMacrotask Queue: [setTimeout callback]\n\nAfter Promise.resolve():\nCall Stack: [main()]\nMicrotask Queue: [Promise callback]\nMacrotask Queue: [setTimeout callback]\n\nAfter queueMicrotask:\nCall Stack: [main()]\nMicrotask Queue: [Promise callback, queueMicrotask callback]\nMacrotask Queue: [setTimeout callback]\n\nAfter second setTimeout:\nCall Stack: [main()]\nMicrotask Queue: [Promise callback, queueMicrotask callback]\nMacrotask Queue: [setTimeout callback, setTimeout callback 2]\n\nAfter console.log(\'7: End\'):\nCall Stack: [main()]\nMicrotask Queue: [Promise callback, queueMicrotask callback]\nMacrotask Queue: [setTimeout callback, setTimeout callback 2]\nOutput: "1: Start", "7: End"\n\nMain function completes - Call Stack empty\nProcess Microtasks:\n- Execute Promise callback \u2192 "3: Promise 1"\n- Execute queueMicrotask callback \u2192 "5: queueMicrotask"\n- Promise.then adds new microtask\n- Execute Promise 2 callback \u2192 "4: Promise 2"\n\nAll Microtasks processed, process ONE Macrotask:\n- Execute first setTimeout \u2192 "2: setTimeout"\n\nCheck for Microtasks (none), process next Macrotask:\n- Execute second setTimeout \u2192 "6: setTimeout 2"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"event-loop-phases",children:"Event Loop Phases"}),"\n",(0,i.jsx)(n.h3,{id:"detailed-event-loop-algorithm",children:"Detailed Event Loop Algorithm"}),"\n",(0,i.jsx)(n.p,{children:"The Event Loop operates in phases:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u250c\u2500>\u2502           timers          \u2502  \u2190 setTimeout, setInterval callbacks\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  \u2502     pending callbacks     \u2502  \u2190 I/O callbacks (except close, timers, setImmediate)\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  \u2502       idle, prepare       \u2502  \u2190 Internal use only\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  \u2502           poll            \u2502  \u2190 Fetch new I/O events; execute I/O callbacks\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  \u2502           check           \u2502  \u2190 setImmediate callbacks\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2514\u2500\u2500\u2524      close callbacks      \u2502  \u2190 close event callbacks\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h3,{id:"browser-event-loop-vs-nodejs",children:"Browser Event Loop vs Node.js"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Browser Event Loop:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Simpler model"}),"\n",(0,i.jsx)(n.li,{children:"Focuses on user interaction"}),"\n",(0,i.jsx)(n.li,{children:"Microtasks processed after each macrotask"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Node.js Event Loop:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"More complex with phases"}),"\n",(0,i.jsx)(n.li,{children:"Handles I/O efficiently"}),"\n",(0,i.jsx)(n.li,{children:"Different microtask timing"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"visual-diagrams",children:"Visual Diagrams"}),"\n",(0,i.jsx)(n.h3,{id:"complete-event-loop-flow",children:"Complete Event Loop Flow"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                        JAVASCRIPT RUNTIME                       \u2502\n\u2502                                                                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502    HEAP     \u2502    \u2502             CALL STACK                 \u2502 \u2502\n\u2502  \u2502             \u2502    \u2502                                        \u2502 \u2502\n\u2502  \u2502   Objects   \u2502    \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502 \u2502\n\u2502  \u2502  Memory     \u2502    \u2502  \u2502        function()               \u2502   \u2502 \u2502\n\u2502  \u2502             \u2502    \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502 \u2502\n\u2502  \u2502             \u2502    \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502 \u2502\n\u2502  \u2502             \u2502    \u2502  \u2502        function()               \u2502   \u2502 \u2502\n\u2502  \u2502             \u2502    \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502 \u2502\n\u2502  \u2502             \u2502    \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502 \u2502\n\u2502  \u2502             \u2502    \u2502  \u2502         main()                  \u2502   \u2502 \u2502\n\u2502  \u2502             \u2502    \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502                                                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                   \u2502\n                                   \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                          WEB APIs                               \u2502\n\u2502                                                                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502    DOM      \u2502  \u2502   Network   \u2502  \u2502        Timers           \u2502  \u2502\n\u2502  \u2502   Events    \u2502  \u2502    APIs     \u2502  \u2502    setTimeout()         \u2502  \u2502\n\u2502  \u2502             \u2502  \u2502   fetch()   \u2502  \u2502    setInterval()        \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                   \u2502\n                                   \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                        TASK QUEUES                             \u2502\n\u2502                                                                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502      MICROTASK QUEUE        \u2502  \u2502     MACROTASK QUEUE     \u2502   \u2502\n\u2502  \u2502      (High Priority)        \u2502  \u2502     (Low Priority)      \u2502   \u2502\n\u2502  \u2502                             \u2502  \u2502                         \u2502   \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502   \u2502\n\u2502  \u2502  \u2502 Promise.then()      \u2502    \u2502  \u2502  \u2502 setTimeout()    \u2502    \u2502   \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502   \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502   \u2502\n\u2502  \u2502  \u2502 queueMicrotask()    \u2502    \u2502  \u2502  \u2502 DOM Events      \u2502    \u2502   \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502   \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502   \u2502\n\u2502  \u2502  \u2502 async/await         \u2502    \u2502  \u2502  \u2502 I/O Operations  \u2502    \u2502   \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                   \u25b2\n                                   \u2502\n                         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                         \u2502   EVENT LOOP    \u2502\n                         \u2502                 \u2502\n                         \u2502  1. Check Stack \u2502\n                         \u2502  2. Microtasks  \u2502\n                         \u2502  3. Macrotasks  \u2502\n                         \u2502  4. Render      \u2502\n                         \u2502  5. Repeat      \u2502\n                         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h3,{id:"promise-vs-settimeout-timing",children:"Promise vs setTimeout Timing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Timeline: Promise vs setTimeout Execution\n\nTime: 0ms\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 console.log(\'start\')                                        \u2502\n\u2502 setTimeout(() => console.log(\'timeout\'), 0)                \u2502\n\u2502 Promise.resolve().then(() => console.log(\'promise\'))       \u2502\n\u2502 console.log(\'end\')                                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nCall Stack:     [main]\nMicrotasks:     []\nMacrotasks:     []\nOutput:         "start"\n\nTime: 1ms\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 setTimeout callback queued                                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nCall Stack:     [main]\nMicrotasks:     []\nMacrotasks:     [setTimeout callback]\nOutput:         "start"\n\nTime: 2ms\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Promise callback queued                                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nCall Stack:     [main]\nMicrotasks:     [Promise callback]\nMacrotasks:     [setTimeout callback]\nOutput:         "start"\n\nTime: 3ms\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 console.log(\'end\') executed                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nCall Stack:     [main]\nMicrotasks:     [Promise callback]\nMacrotasks:     [setTimeout callback]\nOutput:         "start", "end"\n\nTime: 4ms - main() completes\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Call stack empty - Process microtasks first                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nCall Stack:     []\nMicrotasks:     [Promise callback] \u2192 Execute\nMacrotasks:     [setTimeout callback]\nOutput:         "start", "end", "promise"\n\nTime: 5ms\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 All microtasks done - Process one macrotask                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nCall Stack:     []\nMicrotasks:     []\nMacrotasks:     [setTimeout callback] \u2192 Execute\nOutput:         "start", "end", "promise", "timeout"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"common-misconceptions",children:"Common Misconceptions"}),"\n",(0,i.jsx)(n.h3,{id:"misconception-1-settimeoutfn-0-executes-immediately",children:'Misconception 1: "setTimeout(fn, 0) executes immediately"'}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Reality"}),": setTimeout(fn, 0) schedules execution for the next event loop cycle."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"console.log('1');\nsetTimeout(() => console.log('2'), 0);\nconsole.log('3');\n\n// Output: 1, 3, 2 (not 1, 2, 3)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"misconception-2-promises-are-synchronous",children:'Misconception 2: "Promises are synchronous"'}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Reality"}),": Promise callbacks are asynchronous microtasks."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"console.log('1');\nPromise.resolve().then(() => console.log('2'));\nconsole.log('3');\n\n// Output: 1, 3, 2\n"})}),"\n",(0,i.jsx)(n.h3,{id:"misconception-3-all-async-operations-are-the-same-priority",children:'Misconception 3: "All async operations are the same priority"'}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Reality"}),": Microtasks have higher priority than macrotasks."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"setTimeout(() => console.log('setTimeout'), 0);\nPromise.resolve().then(() => console.log('Promise'));\nqueueMicrotask(() => console.log('queueMicrotask'));\n\n// Output: Promise, queueMicrotask, setTimeout\n"})}),"\n",(0,i.jsx)(n.h2,{id:"performance-implications",children:"Performance Implications"}),"\n",(0,i.jsx)(n.h3,{id:"blocking-the-event-loop",children:"Blocking the Event Loop"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Long-running synchronous operations block everything:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// BAD: Blocks event loop\nfunction heavyComputation() {\n    let result = 0;\n    for (let i = 0; i < 1000000000; i++) {\n        result += i;\n    }\n    return result;\n}\n\nconsole.log('Start');\nheavyComputation(); // Blocks everything\nconsole.log('End');\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution: Break work into chunks:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// GOOD: Non-blocking approach\nfunction heavyComputationAsync(start, end, chunkSize = 1000000) {\n    return new Promise((resolve) => {\n        let result = 0;\n        let current = start;\n        \n        function processChunk() {\n            const chunkEnd = Math.min(current + chunkSize, end);\n            \n            for (let i = current; i < chunkEnd; i++) {\n                result += i;\n            }\n            \n            current = chunkEnd;\n            \n            if (current < end) {\n                setTimeout(processChunk, 0); // Yield control\n            } else {\n                resolve(result);\n            }\n        }\n        \n        processChunk();\n    });\n}\n\nconsole.log('Start');\nheavyComputationAsync(0, 1000000000)\n    .then(result => console.log('Result:', result));\nconsole.log('End');\n// Output: Start, End, Result: [number]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"microtask-queue-starvation",children:"Microtask Queue Starvation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Too many microtasks can starve macrotasks:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// BAD: Infinite microtask loop\nfunction recursiveMicrotask() {\n    Promise.resolve().then(recursiveMicrotask);\n}\n\nrecursiveMicrotask(); // Blocks all macrotasks!\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Use macrotasks for long-running operations:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// GOOD: Mix microtasks and macrotasks\nfunction balancedRecursion(count = 0) {\n    if (count % 100 === 0) {\n        // Use macrotask every 100 iterations\n        setTimeout(() => balancedRecursion(count + 1), 0);\n    } else {\n        // Use microtask for most iterations\n        Promise.resolve().then(() => balancedRecursion(count + 1));\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"interview-questions--answers",children:"Interview Questions & Answers"}),"\n",(0,i.jsx)(n.h3,{id:"q1-what-will-this-code-output-and-why",children:"Q1: What will this code output and why?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"console.log('A');\n\nsetTimeout(() => console.log('B'), 0);\n\nPromise.resolve().then(() => {\n    console.log('C');\n    setTimeout(() => console.log('D'), 0);\n});\n\nPromise.resolve().then(() => console.log('E'));\n\nconsole.log('F');\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Answer"}),": A, F, C, E, B, D"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Explanation"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"A"})," - Synchronous console.log"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"F"})," - Synchronous console.log"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"C"})," - First Promise microtask (higher priority)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"E"})," - Second Promise microtask"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"B"})," - First setTimeout macrotask"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"D"})," - Second setTimeout macrotask (queued from within Promise)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"q2-explain-the-difference-between-microtasks-and-macrotasks",children:"Q2: Explain the difference between microtasks and macrotasks."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Answer"}),":"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Microtasks"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Higher priority in event loop"}),"\n",(0,i.jsx)(n.li,{children:"Processed completely before any macrotask"}),"\n",(0,i.jsx)(n.li,{children:"Sources: Promises, queueMicrotask, MutationObserver"}),"\n",(0,i.jsx)(n.li,{children:"Can starve macrotasks if not careful"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Macrotasks"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Lower priority in event loop"}),"\n",(0,i.jsx)(n.li,{children:"Only one processed per event loop cycle"}),"\n",(0,i.jsx)(n.li,{children:"Sources: setTimeout, setInterval, I/O, UI events"}),"\n",(0,i.jsx)(n.li,{children:"Allow other operations between executions"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"q3-how-would-you-prevent-blocking-the-main-thread-during-heavy-computation",children:"Q3: How would you prevent blocking the main thread during heavy computation?"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Answer"}),":"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"1. Web Workers"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// main.js\nconst worker = new Worker('computation-worker.js');\nworker.postMessage({data: largeDataset});\nworker.onmessage = (e) => console.log('Result:', e.data);\n\n// computation-worker.js\nself.onmessage = function(e) {\n    const result = heavyComputation(e.data);\n    self.postMessage(result);\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"2. Time-slicing"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"async function processLargeArray(array, processor) {\n    const CHUNK_SIZE = 1000;\n    \n    for (let i = 0; i < array.length; i += CHUNK_SIZE) {\n        const chunk = array.slice(i, i + CHUNK_SIZE);\n        chunk.forEach(processor);\n        \n        // Yield control every chunk\n        await new Promise(resolve => setTimeout(resolve, 0));\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"3. RequestIdleCallback"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function processWhenIdle(tasks) {\n    function processTasks(deadline) {\n        while (deadline.timeRemaining() > 0 && tasks.length > 0) {\n            const task = tasks.shift();\n            task();\n        }\n        \n        if (tasks.length > 0) {\n            requestIdleCallback(processTasks);\n        }\n    }\n    \n    requestIdleCallback(processTasks);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"q4-whats-the-difference-between-settimeoutfn-0-and-queuemicrotaskfn",children:"Q4: What's the difference between setTimeout(fn, 0) and queueMicrotask(fn)?"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Answer"}),":"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"setTimeout(fn, 0)"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Macrotask - lower priority"}),"\n",(0,i.jsx)(n.li,{children:"Minimum delay of 4ms in browsers"}),"\n",(0,i.jsx)(n.li,{children:"Processed after current microtasks"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"queueMicrotask(fn)"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Microtask - higher priority"}),"\n",(0,i.jsx)(n.li,{children:"No artificial delay"}),"\n",(0,i.jsx)(n.li,{children:"Processed before any macrotasks"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"queueMicrotask(() => console.log('microtask'));\nsetTimeout(() => console.log('macrotask'), 0);\n// Output: microtask, macrotask\n"})}),"\n",(0,i.jsx)(n.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,i.jsx)(n.h3,{id:"example-1-building-a-non-blocking-renderer",children:"Example 1: Building a Non-Blocking Renderer"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class NonBlockingRenderer {\n    constructor() {\n        this.renderQueue = [];\n        this.isRendering = false;\n    }\n    \n    async render(items) {\n        this.renderQueue.push(...items);\n        \n        if (!this.isRendering) {\n            this.isRendering = true;\n            await this.processRenderQueue();\n            this.isRendering = false;\n        }\n    }\n    \n    async processRenderQueue() {\n        const CHUNK_SIZE = 50;\n        \n        while (this.renderQueue.length > 0) {\n            const chunk = this.renderQueue.splice(0, CHUNK_SIZE);\n            \n            // Render chunk synchronously\n            chunk.forEach(item => this.renderItem(item));\n            \n            // Yield control to prevent blocking\n            await this.yieldControl();\n        }\n    }\n    \n    yieldControl() {\n        return new Promise(resolve => {\n            if (this.shouldYield()) {\n                setTimeout(resolve, 0); // Macrotask\n            } else {\n                queueMicrotask(resolve); // Microtask\n            }\n        });\n    }\n    \n    shouldYield() {\n        // Yield if we've been running for too long\n        return performance.now() % 16 > 5; // ~5ms threshold\n    }\n    \n    renderItem(item) {\n        const element = document.createElement('div');\n        element.textContent = item.text;\n        document.body.appendChild(element);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"example-2-promise-queue-with-concurrency-control",children:"Example 2: Promise Queue with Concurrency Control"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class PromiseQueue {\n    constructor(concurrency = 1) {\n        this.concurrency = concurrency;\n        this.running = 0;\n        this.queue = [];\n    }\n    \n    add(promiseFactory) {\n        return new Promise((resolve, reject) => {\n            this.queue.push({\n                promiseFactory,\n                resolve,\n                reject\n            });\n            \n            this.process();\n        });\n    }\n    \n    async process() {\n        if (this.running >= this.concurrency || this.queue.length === 0) {\n            return;\n        }\n        \n        this.running++;\n        const { promiseFactory, resolve, reject } = this.queue.shift();\n        \n        try {\n            const result = await promiseFactory();\n            resolve(result);\n        } catch (error) {\n            reject(error);\n        } finally {\n            this.running--;\n            // Process next item in next microtask\n            queueMicrotask(() => this.process());\n        }\n    }\n}\n\n// Usage\nconst queue = new PromiseQueue(3); // Max 3 concurrent operations\n\n// Add multiple async operations\nfor (let i = 0; i < 10; i++) {\n    queue.add(() => fetch(`/api/data/${i}`))\n        .then(response => console.log(`Completed ${i}`));\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"This comprehensive deep-dive covers the Event Loop from fundamental concepts to advanced implementation patterns, providing the theoretical knowledge and practical understanding needed for senior frontend engineering interviews."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var t=s(6540);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);