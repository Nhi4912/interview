"use strict";(self.webpackChunkfrontend_interview_guide=self.webpackChunkfrontend_interview_guide||[]).push([[3919],{3872:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var s=t(4848),i=t(8453);const r={},o="Accessibility Interview Preparation",l={id:"frontend/accessibility/README",title:"Accessibility Interview Preparation",description:"Core Concepts",source:"@site/docs/frontend/accessibility/README.md",sourceDirName:"frontend/accessibility",slug:"/frontend/accessibility/",permalink:"/interview/docs/frontend/accessibility/",draft:!1,unlisted:!1,editUrl:"https://github.com/Nhi4912/interview/tree/main/docs/frontend/accessibility/README.md",tags:[],version:"current",frontMatter:{},sidebar:"frontendSidebar",previous:{title:"Problem: Preventing XSS and CSRF",permalink:"/interview/docs/frontend/security/xss-csrf"},next:{title:"Internationalization (i18n) Interview Preparation",permalink:"/interview/docs/frontend/internationalization/"}},a={},c=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"Accessibility Fundamentals",id:"accessibility-fundamentals",level:3},{value:"WCAG Principles",id:"wcag-principles",level:3},{value:"Advanced Topics",id:"advanced-topics",level:2},{value:"Modern Accessibility Features",id:"modern-accessibility-features",level:3},{value:"Accessibility Testing",id:"accessibility-testing",level:3},{value:"Common Interview Questions &amp; Answers",id:"common-interview-questions--answers",level:2},{value:"Accessibility Questions",id:"accessibility-questions",level:3},{value:"Advanced Interview Questions",id:"advanced-interview-questions",level:2},{value:"React Accessibility Fundamentals",id:"react-accessibility-fundamentals",level:2},{value:"JavaScript Accessibility Patterns",id:"javascript-accessibility-patterns",level:2},{value:"HTML Accessibility Best Practices",id:"html-accessibility-best-practices",level:2},{value:"Networking &amp; Accessibility",id:"networking--accessibility",level:2},{value:"Problem 1: Accessible Custom Dropdown (React)",id:"problem-1-accessible-custom-dropdown-react",level:2},{value:"Problem 2: Accessible Error Handling in Forms",id:"problem-2-accessible-error-handling-in-forms",level:2},{value:"JavaScript: Core Interview Problems &amp; Diagrams",id:"javascript-core-interview-problems--diagrams",level:2},{value:"Problem: Debounce vs Throttle",id:"problem-debounce-vs-throttle",level:3},{value:"React: Key Interview Problem",id:"react-key-interview-problem",level:2},{value:"Problem: Controlled vs Uncontrolled Components",id:"problem-controlled-vs-uncontrolled-components",level:3},{value:"HTML: Semantic Structure &amp; Accessibility",id:"html-semantic-structure--accessibility",level:2},{value:"Problem: Accessible Navigation",id:"problem-accessible-navigation",level:3},{value:"Networking: CORS, Preflight, and Security",id:"networking-cors-preflight-and-security",level:2},{value:"Problem: Explain CORS and Preflight",id:"problem-explain-cors-and-preflight",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"accessibility-interview-preparation",children:"Accessibility Interview Preparation"}),"\n",(0,s.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,s.jsx)(n.h3,{id:"accessibility-fundamentals",children:"Accessibility Fundamentals"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"WCAG 2.1 Guidelines"}),": Web Content Accessibility Guidelines"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ARIA (Accessible Rich Internet Applications)"}),": Attributes for screen readers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Semantic HTML"}),": Meaningful HTML structure for assistive technologies"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Keyboard Navigation"}),": Full functionality without mouse"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Screen Reader Support"}),": Text-to-speech compatibility"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"wcag-principles",children:"WCAG Principles"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Perceivable"}),": Information must be presentable to users in ways they can perceive"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Operable"}),": User interface components and navigation must be operable"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Understandable"}),": Information and operation of user interface must be understandable"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Robust"}),": Content must be robust enough to be interpreted by assistive technologies"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"advanced-topics",children:"Advanced Topics"}),"\n",(0,s.jsx)(n.h3,{id:"modern-accessibility-features",children:"Modern Accessibility Features"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Focus Management"}),": Programmatic focus control"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Live Regions"}),": Dynamic content announcements"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Skip Links"}),": Keyboard navigation shortcuts"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"High Contrast Mode"}),": Visual accessibility support"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reduced Motion"}),": Respect user motion preferences"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"accessibility-testing",children:"Accessibility Testing"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Automated Testing"}),": Tools for accessibility validation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Manual Testing"}),": Human verification of accessibility"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Screen Reader Testing"}),": Testing with assistive technologies"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Keyboard Testing"}),": Full keyboard navigation verification"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Color Contrast Testing"}),": Visual accessibility validation"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"common-interview-questions--answers",children:"Common Interview Questions & Answers"}),"\n",(0,s.jsx)(n.h3,{id:"accessibility-questions",children:"Accessibility Questions"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Q: What are the main WCAG 2.1 guidelines and how do you implement them?"}),"\nA: WCAG 2.1 has three levels: A, AA, and AAA. Key guidelines include:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Level A (Basic):"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Non-text content has text alternatives"}),"\n",(0,s.jsx)(n.li,{children:"Keyboard accessible"}),"\n",(0,s.jsx)(n.li,{children:"No keyboard traps"}),"\n",(0,s.jsx)(n.li,{children:"Color is not the only way to convey information"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Level AA (Standard):"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Sufficient color contrast (4.5:1 for normal text)"}),"\n",(0,s.jsx)(n.li,{children:"Resizable text up to 200%"}),"\n",(0,s.jsx)(n.li,{children:"Focus visible"}),"\n",(0,s.jsx)(n.li,{children:"Multiple ways to navigate"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Implementation Examples:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// 1. Semantic HTML structure\nfunction AccessibleNavigation() {\n  return (\n    <nav aria-label="Main navigation">\n      <ul role="menubar">\n        <li role="none">\n          <a href="/home" role="menuitem" aria-current="page">\n            Home\n          </a>\n        </li>\n        <li role="none">\n          <a href="/about" role="menuitem">\n            About\n          </a>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\n// 2. Proper form labeling\nfunction AccessibleForm() {\n  return (\n    <form>\n      <label htmlFor="username">Username:</label>\n      <input\n        id="username"\n        type="text"\n        aria-describedby="username-help"\n        aria-required="true"\n      />\n      <div id="username-help">Enter your username</div>\n\n      <label htmlFor="password">Password:</label>\n      <input\n        id="password"\n        type="password"\n        aria-describedby="password-requirements"\n        aria-required="true"\n      />\n      <div id="password-requirements">\n        Password must be at least 8 characters\n      </div>\n    </form>\n  );\n}\n\n// 3. ARIA live regions for dynamic content\nfunction LiveRegion() {\n  const [message, setMessage] = useState("");\n\n  return (\n    <div>\n      <button onClick={() => setMessage("Action completed!")}>\n        Perform Action\n      </button>\n      <div aria-live="polite" aria-atomic="true" className="sr-only">\n        {message}\n      </div>\n    </div>\n  );\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Q: How do you implement keyboard navigation for custom components?"}),"\nA: Comprehensive keyboard navigation implementation:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'class KeyboardNavigation {\n  constructor(container) {\n    this.container = container;\n    this.focusableElements = [];\n    this.currentIndex = 0;\n    this.setupKeyboardNavigation();\n  }\n\n  setupKeyboardNavigation() {\n    // Find all focusable elements\n    this.focusableElements = Array.from(\n      this.container.querySelectorAll(\n        \'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])\'\n      )\n    );\n\n    // Add keyboard event listeners\n    this.container.addEventListener("keydown", this.handleKeyDown.bind(this));\n\n    // Add focus management\n    this.container.addEventListener("focusin", this.handleFocusIn.bind(this));\n  }\n\n  handleKeyDown(event) {\n    switch (event.key) {\n      case "ArrowDown":\n      case "ArrowRight":\n        event.preventDefault();\n        this.moveFocus(1);\n        break;\n\n      case "ArrowUp":\n      case "ArrowLeft":\n        event.preventDefault();\n        this.moveFocus(-1);\n        break;\n\n      case "Home":\n        event.preventDefault();\n        this.moveToFirst();\n        break;\n\n      case "End":\n        event.preventDefault();\n        this.moveToLast();\n        break;\n\n      case "Enter":\n      case " ":\n        event.preventDefault();\n        this.activateCurrent();\n        break;\n\n      case "Escape":\n        this.handleEscape();\n        break;\n    }\n  }\n\n  moveFocus(direction) {\n    const newIndex = this.currentIndex + direction;\n\n    if (newIndex >= 0 && newIndex < this.focusableElements.length) {\n      this.currentIndex = newIndex;\n      this.focusableElements[this.currentIndex].focus();\n    }\n  }\n\n  moveToFirst() {\n    this.currentIndex = 0;\n    this.focusableElements[0].focus();\n  }\n\n  moveToLast() {\n    this.currentIndex = this.focusableElements.length - 1;\n    this.focusableElements[this.currentIndex].focus();\n  }\n\n  activateCurrent() {\n    const currentElement = this.focusableElements[this.currentIndex];\n\n    if (currentElement.tagName === "BUTTON") {\n      currentElement.click();\n    } else if (currentElement.tagName === "A") {\n      currentElement.click();\n    }\n  }\n\n  handleFocusIn(event) {\n    const index = this.focusableElements.indexOf(event.target);\n    if (index !== -1) {\n      this.currentIndex = index;\n    }\n  }\n\n  handleEscape() {\n    // Close modal, dropdown, etc.\n    this.container.dispatchEvent(new CustomEvent("escape"));\n  }\n}\n\n// Custom dropdown with keyboard navigation\nclass AccessibleDropdown {\n  constructor(trigger, menu) {\n    this.trigger = trigger;\n    this.menu = menu;\n    this.isOpen = false;\n    this.menuItems = [];\n    this.currentIndex = -1;\n\n    this.setupDropdown();\n  }\n\n  setupDropdown() {\n    // Set ARIA attributes\n    this.trigger.setAttribute("aria-haspopup", "true");\n    this.trigger.setAttribute("aria-expanded", "false");\n    this.menu.setAttribute("role", "menu");\n    this.menu.setAttribute("aria-hidden", "true");\n\n    // Get menu items\n    this.menuItems = Array.from(\n      this.menu.querySelectorAll(\'[role="menuitem"]\')\n    );\n\n    // Add event listeners\n    this.trigger.addEventListener("click", this.toggle.bind(this));\n    this.trigger.addEventListener(\n      "keydown",\n      this.handleTriggerKeyDown.bind(this)\n    );\n    this.menu.addEventListener("keydown", this.handleMenuKeyDown.bind(this));\n\n    // Close on outside click\n    document.addEventListener("click", this.handleOutsideClick.bind(this));\n  }\n\n  toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  open() {\n    this.isOpen = true;\n    this.trigger.setAttribute("aria-expanded", "true");\n    this.menu.setAttribute("aria-hidden", "false");\n    this.menu.style.display = "block";\n\n    // Focus first menu item\n    if (this.menuItems.length > 0) {\n      this.currentIndex = 0;\n      this.menuItems[0].focus();\n    }\n  }\n\n  close() {\n    this.isOpen = false;\n    this.trigger.setAttribute("aria-expanded", "false");\n    this.menu.setAttribute("aria-hidden", "true");\n    this.menu.style.display = "none";\n    this.currentIndex = -1;\n\n    // Return focus to trigger\n    this.trigger.focus();\n  }\n\n  handleTriggerKeyDown(event) {\n    switch (event.key) {\n      case "Enter":\n      case " ":\n        event.preventDefault();\n        this.toggle();\n        break;\n\n      case "ArrowDown":\n        event.preventDefault();\n        this.open();\n        break;\n    }\n  }\n\n  handleMenuKeyDown(event) {\n    switch (event.key) {\n      case "ArrowDown":\n        event.preventDefault();\n        this.moveFocus(1);\n        break;\n\n      case "ArrowUp":\n        event.preventDefault();\n        this.moveFocus(-1);\n        break;\n\n      case "Home":\n        event.preventDefault();\n        this.moveToFirst();\n        break;\n\n      case "End":\n        event.preventDefault();\n        this.moveToLast();\n        break;\n\n      case "Escape":\n        event.preventDefault();\n        this.close();\n        break;\n\n      case "Enter":\n        event.preventDefault();\n        this.activateCurrent();\n        break;\n    }\n  }\n\n  moveFocus(direction) {\n    const newIndex = this.currentIndex + direction;\n\n    if (newIndex >= 0 && newIndex < this.menuItems.length) {\n      this.currentIndex = newIndex;\n      this.menuItems[this.currentIndex].focus();\n    }\n  }\n\n  moveToFirst() {\n    this.currentIndex = 0;\n    this.menuItems[0].focus();\n  }\n\n  moveToLast() {\n    this.currentIndex = this.menuItems.length - 1;\n    this.menuItems[this.currentIndex].focus();\n  }\n\n  activateCurrent() {\n    if (this.currentIndex >= 0) {\n      this.menuItems[this.currentIndex].click();\n      this.close();\n    }\n  }\n\n  handleOutsideClick(event) {\n    if (\n      !this.trigger.contains(event.target) &&\n      !this.menu.contains(event.target)\n    ) {\n      this.close();\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-interview-questions",children:"Advanced Interview Questions"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Q: How would you implement a fully accessible modal dialog?"}),"\nA: Complete accessible modal implementation:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'class AccessibleModal {\n  constructor(modal, trigger) {\n    this.modal = modal;\n    this.trigger = trigger;\n    this.previousFocus = null;\n    this.focusableElements = [];\n\n    this.setupModal();\n  }\n\n  setupModal() {\n    // Set ARIA attributes\n    this.modal.setAttribute("role", "dialog");\n    this.modal.setAttribute("aria-modal", "true");\n    this.modal.setAttribute("aria-hidden", "true");\n\n    // Add close button if not present\n    if (!this.modal.querySelector("[data-modal-close]")) {\n      this.addCloseButton();\n    }\n\n    // Get focusable elements\n    this.focusableElements = Array.from(\n      this.modal.querySelectorAll(\n        \'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])\'\n      )\n    );\n\n    // Add event listeners\n    this.trigger.addEventListener("click", this.open.bind(this));\n    this.modal.addEventListener("keydown", this.handleKeyDown.bind(this));\n\n    // Close button events\n    const closeButtons = this.modal.querySelectorAll("[data-modal-close]");\n    closeButtons.forEach((button) => {\n      button.addEventListener("click", this.close.bind(this));\n    });\n\n    // Backdrop click\n    this.modal.addEventListener("click", this.handleBackdropClick.bind(this));\n  }\n\n  open() {\n    // Store current focus\n    this.previousFocus = document.activeElement;\n\n    // Show modal\n    this.modal.style.display = "block";\n    this.modal.setAttribute("aria-hidden", "false");\n\n    // Focus management\n    this.trapFocus();\n\n    // Announce to screen readers\n    this.announce("Modal opened");\n\n    // Prevent body scroll\n    document.body.style.overflow = "hidden";\n  }\n\n  close() {\n    // Hide modal\n    this.modal.style.display = "none";\n    this.modal.setAttribute("aria-hidden", "true");\n\n    // Restore focus\n    if (this.previousFocus) {\n      this.previousFocus.focus();\n    }\n\n    // Announce to screen readers\n    this.announce("Modal closed");\n\n    // Restore body scroll\n    document.body.style.overflow = "";\n  }\n\n  trapFocus() {\n    // Focus first focusable element\n    if (this.focusableElements.length > 0) {\n      this.focusableElements[0].focus();\n    }\n  }\n\n  handleKeyDown(event) {\n    switch (event.key) {\n      case "Escape":\n        event.preventDefault();\n        this.close();\n        break;\n\n      case "Tab":\n        this.handleTabKey(event);\n        break;\n    }\n  }\n\n  handleTabKey(event) {\n    const firstElement = this.focusableElements[0];\n    const lastElement =\n      this.focusableElements[this.focusableElements.length - 1];\n\n    if (event.shiftKey) {\n      // Shift + Tab\n      if (document.activeElement === firstElement) {\n        event.preventDefault();\n        lastElement.focus();\n      }\n    } else {\n      // Tab\n      if (document.activeElement === lastElement) {\n        event.preventDefault();\n        firstElement.focus();\n      }\n    }\n  }\n\n  handleBackdropClick(event) {\n    if (event.target === this.modal) {\n      this.close();\n    }\n  }\n\n  addCloseButton() {\n    const closeButton = document.createElement("button");\n    closeButton.setAttribute("data-modal-close", "");\n    closeButton.setAttribute("aria-label", "Close modal");\n    closeButton.innerHTML = "&times;";\n    closeButton.className = "modal-close";\n\n    this.modal.appendChild(closeButton);\n  }\n\n  announce(message) {\n    // Create live region for announcements\n    let liveRegion = document.getElementById("aria-live-region");\n    if (!liveRegion) {\n      liveRegion = document.createElement("div");\n      liveRegion.id = "aria-live-region";\n      liveRegion.setAttribute("aria-live", "polite");\n      liveRegion.setAttribute("aria-atomic", "true");\n      liveRegion.className = "sr-only";\n      document.body.appendChild(liveRegion);\n    }\n\n    liveRegion.textContent = message;\n  }\n}\n\n// Usage\nconst modal = document.getElementById("my-modal");\nconst trigger = document.getElementById("modal-trigger");\nconst accessibleModal = new AccessibleModal(modal, trigger);\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Q: How do you implement accessible data tables?"}),"\nA: Accessible table implementation with sorting and filtering:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'class AccessibleDataTable {\n  constructor(table) {\n    this.table = table;\n    this.data = [];\n    this.currentSort = { column: null, direction: "asc" };\n    this.currentFilter = "";\n\n    this.setupTable();\n  }\n\n  setupTable() {\n    // Set table attributes\n    this.table.setAttribute("role", "table");\n    this.table.setAttribute("aria-label", "Data table");\n\n    // Add sorting and filtering controls\n    this.addControls();\n\n    // Setup headers\n    this.setupHeaders();\n\n    // Add keyboard navigation\n    this.setupKeyboardNavigation();\n  }\n\n  addControls() {\n    const controls = document.createElement("div");\n    controls.className = "table-controls";\n    controls.setAttribute("role", "toolbar");\n    controls.setAttribute("aria-label", "Table controls");\n\n    // Search input\n    const searchInput = document.createElement("input");\n    searchInput.type = "search";\n    searchInput.setAttribute("aria-label", "Filter table data");\n    searchInput.placeholder = "Search...";\n    searchInput.addEventListener("input", (e) => {\n      this.filterData(e.target.value);\n    });\n\n    controls.appendChild(searchInput);\n    this.table.parentNode.insertBefore(controls, this.table);\n  }\n\n  setupHeaders() {\n    const headers = this.table.querySelectorAll("th");\n\n    headers.forEach((header, index) => {\n      // Set header attributes\n      header.setAttribute("scope", "col");\n      header.setAttribute("role", "columnheader");\n\n      // Add sorting functionality\n      if (header.dataset.sortable !== "false") {\n        header.setAttribute("tabindex", "0");\n        header.setAttribute("aria-sort", "none");\n\n        header.addEventListener("click", () => {\n          this.sortByColumn(index);\n        });\n\n        header.addEventListener("keydown", (e) => {\n          if (e.key === "Enter" || e.key === " ") {\n            e.preventDefault();\n            this.sortByColumn(index);\n          }\n        });\n      }\n    });\n  }\n\n  setupKeyboardNavigation() {\n    const rows = this.table.querySelectorAll("tbody tr");\n\n    rows.forEach((row) => {\n      row.setAttribute("role", "row");\n      row.setAttribute("tabindex", "0");\n\n      const cells = row.querySelectorAll("td");\n      cells.forEach((cell) => {\n        cell.setAttribute("role", "cell");\n      });\n\n      // Add keyboard navigation\n      row.addEventListener("keydown", (e) => {\n        this.handleRowKeyDown(e, row);\n      });\n    });\n  }\n\n  handleRowKeyDown(event, row) {\n    const rows = Array.from(this.table.querySelectorAll("tbody tr"));\n    const currentIndex = rows.indexOf(row);\n\n    switch (event.key) {\n      case "ArrowDown":\n        event.preventDefault();\n        if (currentIndex < rows.length - 1) {\n          rows[currentIndex + 1].focus();\n        }\n        break;\n\n      case "ArrowUp":\n        event.preventDefault();\n        if (currentIndex > 0) {\n          rows[currentIndex - 1].focus();\n        }\n        break;\n\n      case "Enter":\n        event.preventDefault();\n        this.handleRowActivation(row);\n        break;\n    }\n  }\n\n  sortByColumn(columnIndex) {\n    const headers = this.table.querySelectorAll("th");\n    const header = headers[columnIndex];\n\n    // Update sort direction\n    if (this.currentSort.column === columnIndex) {\n      this.currentSort.direction =\n        this.currentSort.direction === "asc" ? "desc" : "asc";\n    } else {\n      this.currentSort.column = columnIndex;\n      this.currentSort.direction = "asc";\n    }\n\n    // Update header attributes\n    headers.forEach((h, i) => {\n      if (i === columnIndex) {\n        h.setAttribute("aria-sort", this.currentSort.direction);\n      } else {\n        h.setAttribute("aria-sort", "none");\n      }\n    });\n\n    // Sort data\n    this.sortData();\n\n    // Announce sort change\n    const columnName = header.textContent;\n    this.announce(\n      `Table sorted by ${columnName}, ${this.currentSort.direction}ending`\n    );\n  }\n\n  sortData() {\n    const tbody = this.table.querySelector("tbody");\n    const rows = Array.from(tbody.querySelectorAll("tr"));\n\n    rows.sort((a, b) => {\n      const aValue = a.cells[this.currentSort.column].textContent;\n      const bValue = b.cells[this.currentSort.column].textContent;\n\n      if (this.currentSort.direction === "asc") {\n        return aValue.localeCompare(bValue);\n      } else {\n        return bValue.localeCompare(aValue);\n      }\n    });\n\n    // Reorder DOM\n    rows.forEach((row) => tbody.appendChild(row));\n  }\n\n  filterData(query) {\n    this.currentFilter = query.toLowerCase();\n    const rows = this.table.querySelectorAll("tbody tr");\n    let visibleCount = 0;\n\n    rows.forEach((row) => {\n      const text = row.textContent.toLowerCase();\n      const isVisible = text.includes(this.currentFilter);\n\n      row.style.display = isVisible ? "" : "none";\n      row.setAttribute("aria-hidden", !isVisible);\n\n      if (isVisible) visibleCount++;\n    });\n\n    // Update table summary\n    this.updateTableSummary(visibleCount, rows.length);\n  }\n\n  updateTableSummary(visible, total) {\n    let summary = this.table.querySelector("[data-table-summary]");\n    if (!summary) {\n      summary = document.createElement("div");\n      summary.setAttribute("data-table-summary", "");\n      summary.setAttribute("aria-live", "polite");\n      this.table.parentNode.insertBefore(summary, this.table);\n    }\n\n    summary.textContent = `Showing ${visible} of ${total} rows`;\n  }\n\n  handleRowActivation(row) {\n    // Handle row click/activation\n    const event = new CustomEvent("rowActivate", {\n      detail: { row, data: this.getRowData(row) },\n    });\n    this.table.dispatchEvent(event);\n  }\n\n  getRowData(row) {\n    const cells = row.querySelectorAll("td");\n    return Array.from(cells).map((cell) => cell.textContent);\n  }\n\n  announce(message) {\n    // Create or use existing live region\n    let liveRegion = document.getElementById("table-live-region");\n    if (!liveRegion) {\n      liveRegion = document.createElement("div");\n      liveRegion.id = "table-live-region";\n      liveRegion.setAttribute("aria-live", "polite");\n      liveRegion.setAttribute("aria-atomic", "true");\n      liveRegion.className = "sr-only";\n      document.body.appendChild(liveRegion);\n    }\n\n    liveRegion.textContent = message;\n  }\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h1,{id:"deep-dive-accessibility-in-react-js-html-and-networking",children:"Deep Dive: Accessibility in React, JS, HTML, and Networking"}),"\n",(0,s.jsx)(n.h2,{id:"react-accessibility-fundamentals",children:"React Accessibility Fundamentals"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Accessible Components"}),": Use semantic elements (",(0,s.jsx)(n.code,{children:"<button>"}),", ",(0,s.jsx)(n.code,{children:"<nav>"}),", ",(0,s.jsx)(n.code,{children:"<form>"}),") and ARIA roles only when necessary."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Focus Management"}),": Use ",(0,s.jsx)(n.code,{children:"useRef"})," and ",(0,s.jsx)(n.code,{children:"useEffect"})," to manage focus for modals, dialogs, and dynamic content."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Keyboard Navigation"}),": Ensure all interactive elements are keyboard accessible (tab, arrow keys, Enter, Space)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Error Announcements"}),": Use ARIA live regions for form validation and dynamic updates."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example: Accessible Modal in React"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'import { useRef, useEffect } from "react";\n\nfunction AccessibleModal({ isOpen, onClose, children }) {\n  const modalRef = useRef();\n\n  useEffect(() => {\n    if (isOpen) {\n      modalRef.current.focus();\n    }\n  }, [isOpen]);\n\n  return (\n    <div\n      ref={modalRef}\n      role="dialog"\n      aria-modal="true"\n      tabIndex="-1"\n      style={{ display: isOpen ? "block" : "none" }}\n    >\n      <button onClick={onClose} aria-label="Close modal">\n        &times;\n      </button>\n      {children}\n    </div>\n  );\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"javascript-accessibility-patterns",children:"JavaScript Accessibility Patterns"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Event Delegation"}),": Use event delegation for dynamic lists and menus to ensure keyboard and screen reader support."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ARIA Attributes"}),": Dynamically update ARIA attributes for stateful components (e.g., ",(0,s.jsx)(n.code,{children:"aria-expanded"}),", ",(0,s.jsx)(n.code,{children:"aria-selected"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Live Regions"}),": Use ARIA live regions for notifications and status updates."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example: Announcing Dynamic Updates"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'function announce(message) {\n  let liveRegion = document.getElementById("live-region");\n  if (!liveRegion) {\n    liveRegion = document.createElement("div");\n    liveRegion.id = "live-region";\n    liveRegion.setAttribute("aria-live", "polite");\n    liveRegion.className = "sr-only";\n    document.body.appendChild(liveRegion);\n  }\n  liveRegion.textContent = message;\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"html-accessibility-best-practices",children:"HTML Accessibility Best Practices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Landmarks"}),": Use ",(0,s.jsx)(n.code,{children:"<header>"}),", ",(0,s.jsx)(n.code,{children:"<nav>"}),", ",(0,s.jsx)(n.code,{children:"<main>"}),", ",(0,s.jsx)(n.code,{children:"<footer>"})," for page structure."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Form Labels"}),": Always associate ",(0,s.jsx)(n.code,{children:"<label>"})," with ",(0,s.jsx)(n.code,{children:"<input>"})," using ",(0,s.jsx)(n.code,{children:"for"})," and ",(0,s.jsx)(n.code,{children:"id"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Table Accessibility"}),": Use ",(0,s.jsx)(n.code,{children:'<th scope="col">'})," and ",(0,s.jsx)(n.code,{children:"<caption>"})," for data tables."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Diagram: Semantic HTML Structure"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"graph TD;\n  A[<header>] --\x3e B[<nav>];\n  A --\x3e C[<main>];\n  C --\x3e D[<section>];\n  C --\x3e E[<article>];\n  C --\x3e F[<aside>];\n  A --\x3e G[<footer>];\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"networking--accessibility",children:"Networking & Accessibility"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Error Handling"}),": Show accessible error messages for failed network requests."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Loading States"}),": Use ARIA live regions to announce loading and completion."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Progress Indicators"}),": Use ",(0,s.jsx)(n.code,{children:'role="progressbar"'})," and update ",(0,s.jsx)(n.code,{children:"aria-valuenow"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example: Accessible Fetch with Error Announcement"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'async function fetchData(url) {\n  try {\n    announce("Loading data...");\n    const response = await fetch(url);\n    if (!response.ok) throw new Error("Network error");\n    announce("Data loaded successfully");\n    return await response.json();\n  } catch (error) {\n    announce("Error loading data: " + error.message);\n    throw error;\n  }\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h1,{id:"practice-problems--deep-dive-answers",children:"Practice Problems & Deep Dive Answers"}),"\n",(0,s.jsx)(n.h2,{id:"problem-1-accessible-custom-dropdown-react",children:"Problem 1: Accessible Custom Dropdown (React)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Challenge:"})," Build a dropdown that is fully accessible (keyboard, ARIA, focus management)."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Solution Outline:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:'role="button"'})," for the trigger, ",(0,s.jsx)(n.code,{children:"aria-haspopup"}),", ",(0,s.jsx)(n.code,{children:"aria-expanded"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:'role="menu"'})," and ",(0,s.jsx)(n.code,{children:'role="menuitem"'})," for the dropdown and items."]}),"\n",(0,s.jsx)(n.li,{children:"Manage focus with refs and keyboard events."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Sample Implementation:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'function AccessibleDropdown({ options, onSelect }) {\n  const [open, setOpen] = useState(false);\n  const [focused, setFocused] = useState(0);\n  const triggerRef = useRef();\n  const menuRef = useRef();\n\n  useEffect(() => {\n    if (open && menuRef.current) {\n      menuRef.current.children[focused]?.focus();\n    }\n  }, [open, focused]);\n\n  return (\n    <div>\n      <button\n        ref={triggerRef}\n        aria-haspopup="true"\n        aria-expanded={open}\n        onClick={() => setOpen((v) => !v)}\n        onKeyDown={(e) => {\n          if (e.key === "ArrowDown") {\n            setOpen(true);\n            setFocused(0);\n          }\n        }}\n      >\n        Select option\n      </button>\n      {open && (\n        <ul\n          ref={menuRef}\n          role="menu"\n          tabIndex="-1"\n          style={{ border: "1px solid #ccc", padding: 0 }}\n        >\n          {options.map((opt, i) => (\n            <li\n              key={opt}\n              role="menuitem"\n              tabIndex={-1}\n              onClick={() => {\n                onSelect(opt);\n                setOpen(false);\n              }}\n              onKeyDown={(e) => {\n                if (e.key === "ArrowDown")\n                  setFocused((f) => (f + 1) % options.length);\n                if (e.key === "ArrowUp")\n                  setFocused((f) => (f - 1 + options.length) % options.length);\n                if (e.key === "Enter") {\n                  onSelect(opt);\n                  setOpen(false);\n                }\n                if (e.key === "Escape") setOpen(false);\n              }}\n            >\n              {opt}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"problem-2-accessible-error-handling-in-forms",children:"Problem 2: Accessible Error Handling in Forms"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Challenge:"})," Announce errors and focus the first invalid field."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use ARIA live regions for error messages."}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"aria-invalid"})," and ",(0,s.jsx)(n.code,{children:"aria-describedby"})," on invalid fields."]}),"\n",(0,s.jsx)(n.li,{children:"Focus the first invalid field on submit."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Sample Implementation:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'function AccessibleForm() {\n  const [errors, setErrors] = useState({});\n  const liveRef = useRef();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    const form = e.target;\n    const username = form.username.value.trim();\n    const password = form.password.value.trim();\n    const newErrors = {};\n    if (!username) newErrors.username = "Username required";\n    if (!password) newErrors.password = "Password required";\n    setErrors(newErrors);\n    if (Object.keys(newErrors).length > 0) {\n      liveRef.current.textContent = Object.values(newErrors).join(". ");\n      const firstError = form.querySelector(\'[aria-invalid="true"]\');\n      if (firstError) firstError.focus();\n    } else {\n      liveRef.current.textContent = "Form submitted successfully!";\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor="username">Username:</label>\n      <input\n        id="username"\n        name="username"\n        aria-invalid={!!errors.username}\n        aria-describedby={errors.username ? "username-error" : undefined}\n      />\n      {errors.username && (\n        <div id="username-error" role="alert">\n          {errors.username}\n        </div>\n      )}\n      <label htmlFor="password">Password:</label>\n      <input\n        id="password"\n        name="password"\n        type="password"\n        aria-invalid={!!errors.password}\n        aria-describedby={errors.password ? "password-error" : undefined}\n      />\n      {errors.password && (\n        <div id="password-error" role="alert">\n          {errors.password}\n        </div>\n      )}\n      <button type="submit">Submit</button>\n      <div ref={liveRef} aria-live="polite" className="sr-only" />\n    </form>\n  );\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h1,{id:"deep-dive-javascript-react-html-and-networking-interview-problems",children:"Deep Dive: JavaScript, React, HTML, and Networking Interview Problems"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"javascript-core-interview-problems--diagrams",children:"JavaScript: Core Interview Problems & Diagrams"}),"\n",(0,s.jsx)(n.h3,{id:"problem-debounce-vs-throttle",children:"Problem: Debounce vs Throttle"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Question:"})," Explain debounce and throttle. Implement both in JavaScript. When would you use each?"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Debounce:"})," Ensures a function is only called after a certain period of inactivity. Useful for search input, window resize."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Throttle:"})," Ensures a function is called at most once every X ms. Useful for scroll, mousemove events."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// Debounce\nfunction debounce(fn, delay) {\n  let timer;\n  return function (...args) {\n    clearTimeout(timer);\n    timer = setTimeout(() => fn.apply(this, args), delay);\n  };\n}\n\n// Throttle\nfunction throttle(fn, limit) {\n  let inThrottle;\n  return function (...args) {\n    if (!inThrottle) {\n      fn.apply(this, args);\n      inThrottle = true;\n      setTimeout(() => (inThrottle = false), limit);\n    }\n  };\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Diagram:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"gantt\ntitle Debounce vs Throttle Timeline\nsection Debounce\nUser Input :a1, 2025-07-05, 1d\nWait :a2, after a1, 1d\nFunction Fires :a3, after a2, 1d\nsection Throttle\nUser Input :b1, 2025-07-05, 1d\nFunction Fires :b2, after b1, 1d\nWait :b3, after b2, 1d\nFunction Fires :b4, after b3, 1d\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"react-key-interview-problem",children:"React: Key Interview Problem"}),"\n",(0,s.jsx)(n.h3,{id:"problem-controlled-vs-uncontrolled-components",children:"Problem: Controlled vs Uncontrolled Components"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Question:"})," What is the difference between controlled and uncontrolled components in React? Give examples."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Controlled:"})," Form data is handled by React state. Example: ",(0,s.jsx)(n.code,{children:"<input value={value} onChange={setValue} />"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Uncontrolled:"})," Form data is handled by the DOM. Example: ",(0,s.jsx)(n.code,{children:"<input ref={inputRef} />"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Diagram:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"flowchart TD\n  A[User Input] --\x3e|onChange| B[React State]\n  B --\x3e|value| C[Input Value]\n  D[Uncontrolled: Input Value] --\x3e E[DOM]\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"html-semantic-structure--accessibility",children:"HTML: Semantic Structure & Accessibility"}),"\n",(0,s.jsx)(n.h3,{id:"problem-accessible-navigation",children:"Problem: Accessible Navigation"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Question:"})," How do you create a navigation bar that is accessible to screen readers and keyboard users?"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:'<nav aria-label="Main navigation">'}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:'<ul role="menubar">'})," and ",(0,s.jsx)(n.code,{children:'<li role="none">'}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Each link: ",(0,s.jsx)(n.code,{children:'role="menuitem"'}),", ",(0,s.jsx)(n.code,{children:"aria-current"})," for active."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'<nav aria-label="Main navigation">\n  <ul role="menubar">\n    <li role="none">\n      <a href="/home" role="menuitem" aria-current="page">\n        Home\n      </a>\n    </li>\n    <li role="none">\n      <a href="/about" role="menuitem">\n        About\n      </a>\n    </li>\n  </ul>\n</nav>\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"networking-cors-preflight-and-security",children:"Networking: CORS, Preflight, and Security"}),"\n",(0,s.jsx)(n.h3,{id:"problem-explain-cors-and-preflight",children:"Problem: Explain CORS and Preflight"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Question:"})," What is CORS? What is a preflight request? How do you handle CORS in frontend apps?"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CORS (Cross-Origin Resource Sharing):"})," A browser security feature that restricts cross-origin HTTP requests."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Preflight:"})," An OPTIONS request sent before certain requests (e.g., with custom headers or methods) to check if the server allows it."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Handling:"})," Set appropriate headers on the server (",(0,s.jsx)(n.code,{children:"Access-Control-Allow-Origin"}),", etc.). On frontend, handle errors and show user-friendly messages."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Diagram:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"sequenceDiagram\n  participant Browser\n  participant Server\n  Browser->>Server: OPTIONS /api/data (preflight)\n  Server--\x3e>Browser: 200 OK + CORS headers\n  Browser->>Server: GET /api/data\n  Server--\x3e>Browser: 200 OK + data\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h1,{id:"more-practice--resources",children:"More Practice & Resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://frontendinterviewhandbook.com/",children:"Frontend Interview Handbook"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://react.dev/learn/accessibility",children:"React Docs: Accessibility"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop",children:"MDN: JavaScript Event Loop"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS",children:"What is CORS? (MDN)"})}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Use these deep dives, diagrams, and problems to master core frontend interview topics. Practice explaining and drawing diagrams in interviews!"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);