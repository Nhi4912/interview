"use strict";(self.webpackChunkfrontend_interview_guide=self.webpackChunkfrontend_interview_guide||[]).push([[9106],{2860:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var i=r(4848),s=r(8453);const l={},t="Tree & Graph Problems - LeetCode Collection",o={id:"leetcode/tree-graph/README",title:"Tree & Graph Problems - LeetCode Collection",description:"B\u1ed9 s\u01b0u t\u1eadp b\xe0i t\u1eadp Tree & Graph t\u1eeb LeetCode cho ph\u1ecfng v\u1ea5n Big Tech",source:"@site/docs/leetcode/tree-graph/README.md",sourceDirName:"leetcode/tree-graph",slug:"/leetcode/tree-graph/",permalink:"/interview/docs/leetcode/tree-graph/",draft:!1,unlisted:!1,editUrl:"https://github.com/Nhi4912/interview/tree/main/docs/leetcode/tree-graph/README.md",tags:[],version:"current",frontMatter:{},sidebar:"leetcodeSidebar",previous:{title:"Linked List Problems - LeetCode Collection",permalink:"/interview/docs/leetcode/linked-list/"},next:{title:"Dynamic Programming Problems - LeetCode Collection",permalink:"/interview/docs/leetcode/dp/"}},c={},d=[{value:"\ud83d\udccb Problem List / Danh s\xe1ch b\xe0i t\u1eadp",id:"-problem-list--danh-s\xe1ch-b\xe0i-t\u1eadp",level:2},{value:"Easy Level / M\u1ee9c \u0111\u1ed9 d\u1ec5",id:"easy-level--m\u1ee9c-\u0111\u1ed9-d\u1ec5",level:3},{value:"1. Maximum Depth of Binary Tree",id:"1-maximum-depth-of-binary-tree",level:4},{value:"2. Validate Binary Search Tree",id:"2-validate-binary-search-tree",level:4},{value:"3. Symmetric Tree",id:"3-symmetric-tree",level:4},{value:"4. Binary Tree Level Order Traversal",id:"4-binary-tree-level-order-traversal",level:4},{value:"5. Convert Sorted Array to Binary Search Tree",id:"5-convert-sorted-array-to-binary-search-tree",level:4},{value:"Medium Level / M\u1ee9c \u0111\u1ed9 trung b\xecnh",id:"medium-level--m\u1ee9c-\u0111\u1ed9-trung-b\xecnh",level:3},{value:"6. Binary Tree Inorder Traversal",id:"6-binary-tree-inorder-traversal",level:4},{value:"7. Binary Tree Zigzag Level Order Traversal",id:"7-binary-tree-zigzag-level-order-traversal",level:4},{value:"8. Construct Binary Tree from Preorder and Inorder Traversal",id:"8-construct-binary-tree-from-preorder-and-inorder-traversal",level:4},{value:"9. Populating Next Right Pointers in Each Node",id:"9-populating-next-right-pointers-in-each-node",level:4},{value:"10. Kth Smallest Element in a BST",id:"10-kth-smallest-element-in-a-bst",level:4},{value:"11. Inorder Successor in BST",id:"11-inorder-successor-in-bst",level:4},{value:"12. Number of Islands",id:"12-number-of-islands",level:4},{value:"\ud83c\udfaf Study Tips / M\u1eb9o h\u1ecdc t\u1eadp",id:"-study-tips--m\u1eb9o-h\u1ecdc-t\u1eadp",level:2},{value:"Common Patterns / C\xe1c m\u1eabu th\u01b0\u1eddng g\u1eb7p:",id:"common-patterns--c\xe1c-m\u1eabu-th\u01b0\u1eddng-g\u1eb7p",level:3},{value:"Time Complexity Targets / M\u1ee5c ti\xeau \u0111\u1ed9 ph\u1ee9c t\u1ea1p:",id:"time-complexity-targets--m\u1ee5c-ti\xeau-\u0111\u1ed9-ph\u1ee9c-t\u1ea1p",level:3},{value:"Common Mistakes / L\u1ed7i th\u01b0\u1eddng g\u1eb7p:",id:"common-mistakes--l\u1ed7i-th\u01b0\u1eddng-g\u1eb7p",level:3},{value:"\ud83d\udcca Practice Strategy / Chi\u1ebfn l\u01b0\u1ee3c luy\u1ec7n t\u1eadp",id:"-practice-strategy--chi\u1ebfn-l\u01b0\u1ee3c-luy\u1ec7n-t\u1eadp",level:2},{value:"Week 1: Foundation",id:"week-1-foundation",level:3},{value:"Week 2: Intermediate",id:"week-2-intermediate",level:3},{value:"Week 3: Advanced",id:"week-3-advanced",level:3},{value:"\ud83d\udd17 Related Topics / Ch\u1ee7 \u0111\u1ec1 li\xean quan",id:"-related-topics--ch\u1ee7-\u0111\u1ec1-li\xean-quan",level:2},{value:"\ud83d\udca1 Key Algorithms / Thu\u1eadt to\xe1n quan tr\u1ecdng",id:"-key-algorithms--thu\u1eadt-to\xe1n-quan-tr\u1ecdng",level:2},{value:"1. Tree Traversals",id:"1-tree-traversals",level:3},{value:"2. DFS Implementation",id:"2-dfs-implementation",level:3},{value:"3. BFS Implementation",id:"3-bfs-implementation",level:3},{value:"\ud83c\udfaf Common Interview Questions / C\xe2u h\u1ecfi ph\u1ecfng v\u1ea5n th\u01b0\u1eddng g\u1eb7p",id:"-common-interview-questions--c\xe2u-h\u1ecfi-ph\u1ecfng-v\u1ea5n-th\u01b0\u1eddng-g\u1eb7p",level:2},{value:"Basic Tree Operations:",id:"basic-tree-operations",level:3},{value:"BST Operations:",id:"bst-operations",level:3},{value:"Graph Operations:",id:"graph-operations",level:3},{value:"\ud83d\udcdd Code Templates / M\u1eabu code",id:"-code-templates--m\u1eabu-code",level:2},{value:"Binary Tree Node:",id:"binary-tree-node",level:3},{value:"DFS Template:",id:"dfs-template",level:3},{value:"BFS Template:",id:"bfs-template",level:3}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"tree--graph-problems---leetcode-collection",children:"Tree & Graph Problems - LeetCode Collection"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"B\u1ed9 s\u01b0u t\u1eadp b\xe0i t\u1eadp Tree & Graph t\u1eeb LeetCode cho ph\u1ecfng v\u1ea5n Big Tech"})}),"\n",(0,i.jsx)(n.h2,{id:"-problem-list--danh-s\xe1ch-b\xe0i-t\u1eadp",children:"\ud83d\udccb Problem List / Danh s\xe1ch b\xe0i t\u1eadp"}),"\n",(0,i.jsx)(n.h3,{id:"easy-level--m\u1ee9c-\u0111\u1ed9-d\u1ec5",children:"Easy Level / M\u1ee9c \u0111\u1ed9 d\u1ec5"}),"\n",(0,i.jsx)(n.h4,{id:"1-maximum-depth-of-binary-tree",children:"1. Maximum Depth of Binary Tree"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Difficulty"}),": Easy"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LeetCode Link"}),": ",(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/maximum-depth-of-binary-tree/",children:"https://leetcode.com/problems/maximum-depth-of-binary-tree/"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Category"}),": Tree, DFS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Companies"}),": Google, Amazon, Microsoft, Facebook"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Key Concepts"}),": Recursive DFS, tree traversal"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"2-validate-binary-search-tree",children:"2. Validate Binary Search Tree"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Difficulty"}),": Medium"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LeetCode Link"}),": ",(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/validate-binary-search-tree/",children:"https://leetcode.com/problems/validate-binary-search-tree/"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Category"}),": Tree, DFS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Companies"}),": Amazon, Google, Microsoft, Facebook"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Key Concepts"}),": BST properties, inorder traversal"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"3-symmetric-tree",children:"3. Symmetric Tree"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Difficulty"}),": Easy"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LeetCode Link"}),": ",(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/symmetric-tree/",children:"https://leetcode.com/problems/symmetric-tree/"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Category"}),": Tree, DFS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Companies"}),": Amazon, Google, Microsoft"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Key Concepts"}),": Mirror comparison, recursive approach"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"4-binary-tree-level-order-traversal",children:"4. Binary Tree Level Order Traversal"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Difficulty"}),": Medium"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LeetCode Link"}),": ",(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/binary-tree-level-order-traversal/",children:"https://leetcode.com/problems/binary-tree-level-order-traversal/"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Category"}),": Tree, BFS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Companies"}),": Amazon, Google, Microsoft, Facebook"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Key Concepts"}),": Level-order traversal, queue"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"5-convert-sorted-array-to-binary-search-tree",children:"5. Convert Sorted Array to Binary Search Tree"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Difficulty"}),": Easy"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LeetCode Link"}),": ",(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/",children:"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Category"}),": Tree, DFS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Companies"}),": Amazon, Google, Microsoft"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Key Concepts"}),": Balanced BST construction, divide and conquer"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"medium-level--m\u1ee9c-\u0111\u1ed9-trung-b\xecnh",children:"Medium Level / M\u1ee9c \u0111\u1ed9 trung b\xecnh"}),"\n",(0,i.jsx)(n.h4,{id:"6-binary-tree-inorder-traversal",children:"6. Binary Tree Inorder Traversal"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Difficulty"}),": Easy"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LeetCode Link"}),": ",(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/binary-tree-inorder-traversal/",children:"https://leetcode.com/problems/binary-tree-inorder-traversal/"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Category"}),": Tree, DFS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Companies"}),": Amazon, Google, Microsoft, Facebook"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Key Concepts"}),": Inorder traversal, iterative approach"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"7-binary-tree-zigzag-level-order-traversal",children:"7. Binary Tree Zigzag Level Order Traversal"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Difficulty"}),": Medium"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LeetCode Link"}),": ",(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/",children:"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Category"}),": Tree, BFS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Companies"}),": Amazon, Google, Microsoft"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Key Concepts"}),": Level-order with direction change"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"8-construct-binary-tree-from-preorder-and-inorder-traversal",children:"8. Construct Binary Tree from Preorder and Inorder Traversal"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Difficulty"}),": Medium"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LeetCode Link"}),": ",(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/",children:"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Category"}),": Tree, DFS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Companies"}),": Amazon, Google, Microsoft, Facebook"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Key Concepts"}),": Tree reconstruction, hash map"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"9-populating-next-right-pointers-in-each-node",children:"9. Populating Next Right Pointers in Each Node"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Difficulty"}),": Medium"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LeetCode Link"}),": ",(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/populating-next-right-pointers-in-each-node/",children:"https://leetcode.com/problems/populating-next-right-pointers-in-each-node/"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Category"}),": Tree, BFS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Companies"}),": Amazon, Google, Microsoft, Facebook"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Key Concepts"}),": Level-order traversal, pointer manipulation"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"10-kth-smallest-element-in-a-bst",children:"10. Kth Smallest Element in a BST"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Difficulty"}),": Medium"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LeetCode Link"}),": ",(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/kth-smallest-element-in-a-bst/",children:"https://leetcode.com/problems/kth-smallest-element-in-a-bst/"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Category"}),": Tree, DFS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Companies"}),": Amazon, Google, Microsoft"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Key Concepts"}),": Inorder traversal, kth element"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"11-inorder-successor-in-bst",children:"11. Inorder Successor in BST"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Difficulty"}),": Medium"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LeetCode Link"}),": ",(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/inorder-successor-in-bst/",children:"https://leetcode.com/problems/inorder-successor-in-bst/"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Category"}),": Tree, DFS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Companies"}),": Amazon, Google, Microsoft"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Key Concepts"}),": BST properties, successor finding"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"12-number-of-islands",children:"12. Number of Islands"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Difficulty"}),": Medium"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LeetCode Link"}),": ",(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/number-of-islands/",children:"https://leetcode.com/problems/number-of-islands/"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Category"}),": Graph, DFS/BFS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Companies"}),": Amazon, Google, Microsoft, Facebook"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Key Concepts"}),": Connected components, flood fill"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-study-tips--m\u1eb9o-h\u1ecdc-t\u1eadp",children:"\ud83c\udfaf Study Tips / M\u1eb9o h\u1ecdc t\u1eadp"}),"\n",(0,i.jsx)(n.h3,{id:"common-patterns--c\xe1c-m\u1eabu-th\u01b0\u1eddng-g\u1eb7p",children:"Common Patterns / C\xe1c m\u1eabu th\u01b0\u1eddng g\u1eb7p:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"DFS (Depth-First Search)"}),": Preorder, inorder, postorder traversals"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"BFS (Breadth-First Search)"}),": Level-order traversal"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Recursive Approach"}),": Natural for tree problems"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Iterative Approach"}),": Using stack/queue"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"BST Properties"}),": Left < Root < Right"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"time-complexity-targets--m\u1ee5c-ti\xeau-\u0111\u1ed9-ph\u1ee9c-t\u1ea1p",children:"Time Complexity Targets / M\u1ee5c ti\xeau \u0111\u1ed9 ph\u1ee9c t\u1ea1p:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Easy"}),": O(n) time, O(h) space (h = height)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Medium"}),": O(n) time, O(n) space"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"common-mistakes--l\u1ed7i-th\u01b0\u1eddng-g\u1eb7p",children:"Common Mistakes / L\u1ed7i th\u01b0\u1eddng g\u1eb7p:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Not handling null nodes"}),"\n",(0,i.jsx)(n.li,{children:"Forgetting BST properties"}),"\n",(0,i.jsx)(n.li,{children:"Infinite recursion"}),"\n",(0,i.jsx)(n.li,{children:"Not considering space complexity"}),"\n",(0,i.jsx)(n.li,{children:"Missing edge cases (empty tree, single node)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-practice-strategy--chi\u1ebfn-l\u01b0\u1ee3c-luy\u1ec7n-t\u1eadp",children:"\ud83d\udcca Practice Strategy / Chi\u1ebfn l\u01b0\u1ee3c luy\u1ec7n t\u1eadp"}),"\n",(0,i.jsx)(n.h3,{id:"week-1-foundation",children:"Week 1: Foundation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Complete all Easy problems (1-5)"}),"\n",(0,i.jsx)(n.li,{children:"Focus on basic tree traversals"}),"\n",(0,i.jsx)(n.li,{children:"Practice recursive thinking"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"week-2-intermediate",children:"Week 2: Intermediate"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Complete Medium problems (6-12)"}),"\n",(0,i.jsx)(n.li,{children:"Practice iterative approaches"}),"\n",(0,i.jsx)(n.li,{children:"Work on BST problems"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"week-3-advanced",children:"Week 3: Advanced"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Revisit problems with different approaches"}),"\n",(0,i.jsx)(n.li,{children:"Practice optimization techniques"}),"\n",(0,i.jsx)(n.li,{children:"Focus on graph problems"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-related-topics--ch\u1ee7-\u0111\u1ec1-li\xean-quan",children:"\ud83d\udd17 Related Topics / Ch\u1ee7 \u0111\u1ec1 li\xean quan"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/interview/docs/leetcode/array/",children:"Array Problems"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-key-algorithms--thu\u1eadt-to\xe1n-quan-tr\u1ecdng",children:"\ud83d\udca1 Key Algorithms / Thu\u1eadt to\xe1n quan tr\u1ecdng"}),"\n",(0,i.jsx)(n.h3,{id:"1-tree-traversals",children:"1. Tree Traversals"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Preorder"}),": Root \u2192 Left \u2192 Right"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inorder"}),": Left \u2192 Root \u2192 Right"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Postorder"}),": Left \u2192 Right \u2192 Root"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Level-order"}),": BFS approach"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-dfs-implementation",children:"2. DFS Implementation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function dfs(root) {\n  if (!root) return;\n\n  // Process current node\n  console.log(root.val);\n\n  // Recursive calls\n  dfs(root.left);\n  dfs(root.right);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-bfs-implementation",children:"3. BFS Implementation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function bfs(root) {\n  if (!root) return;\n\n  const queue = [root];\n\n  while (queue.length > 0) {\n    const node = queue.shift();\n    console.log(node.val);\n\n    if (node.left) queue.push(node.left);\n    if (node.right) queue.push(node.right);\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-common-interview-questions--c\xe2u-h\u1ecfi-ph\u1ecfng-v\u1ea5n-th\u01b0\u1eddng-g\u1eb7p",children:"\ud83c\udfaf Common Interview Questions / C\xe2u h\u1ecfi ph\u1ecfng v\u1ea5n th\u01b0\u1eddng g\u1eb7p"}),"\n",(0,i.jsx)(n.h3,{id:"basic-tree-operations",children:"Basic Tree Operations:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"How to traverse a binary tree?"}),"\n",(0,i.jsx)(n.li,{children:"How to find the height of a tree?"}),"\n",(0,i.jsx)(n.li,{children:"How to check if a tree is balanced?"}),"\n",(0,i.jsx)(n.li,{children:"How to find the lowest common ancestor?"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"bst-operations",children:"BST Operations:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"How to validate a BST?"}),"\n",(0,i.jsx)(n.li,{children:"How to find kth smallest element?"}),"\n",(0,i.jsx)(n.li,{children:"How to insert/delete in BST?"}),"\n",(0,i.jsx)(n.li,{children:"How to convert sorted array to BST?"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"graph-operations",children:"Graph Operations:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"How to find connected components?"}),"\n",(0,i.jsx)(n.li,{children:"How to detect cycles in a graph?"}),"\n",(0,i.jsx)(n.li,{children:"How to find shortest path?"}),"\n",(0,i.jsx)(n.li,{children:"How to implement topological sort?"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-code-templates--m\u1eabu-code",children:"\ud83d\udcdd Code Templates / M\u1eabu code"}),"\n",(0,i.jsx)(n.h3,{id:"binary-tree-node",children:"Binary Tree Node:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class TreeNode {\n  constructor(val = 0, left = null, right = null) {\n    this.val = val;\n    this.left = left;\n    this.right = right;\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"dfs-template",children:"DFS Template:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function dfsTemplate(root) {\n  if (!root) return;\n\n  // Process current node\n  processNode(root);\n\n  // Recursive calls\n  dfsTemplate(root.left);\n  dfsTemplate(root.right);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"bfs-template",children:"BFS Template:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function bfsTemplate(root) {\n  if (!root) return;\n\n  const queue = [root];\n\n  while (queue.length > 0) {\n    const levelSize = queue.length;\n\n    for (let i = 0; i < levelSize; i++) {\n      const node = queue.shift();\n      processNode(node);\n\n      if (node.left) queue.push(node.left);\n      if (node.right) queue.push(node.right);\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Next: ",(0,i.jsx)(n.a,{href:"/interview/docs/leetcode/dp/",children:"Dynamic Programming Problems"})]})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>o});var i=r(6540);const s={},l=i.createContext(s);function t(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);