"use strict";(self.webpackChunkfrontend_interview_guide=self.webpackChunkfrontend_interview_guide||[]).push([[3550],{4702:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"frontend/fundamentals/closure-scope-deep-dive","title":"JavaScript Closures & Scope: Complete Deep Dive","description":"Table of Contents","source":"@site/docs/frontend/fundamentals/closure-scope-deep-dive.md","sourceDirName":"frontend/fundamentals","slug":"/frontend/fundamentals/closure-scope-deep-dive","permalink":"/interview/docs/frontend/fundamentals/closure-scope-deep-dive","draft":false,"unlisted":false,"editUrl":"https://github.com/Nhi4912/interview/tree/main/docs/frontend/fundamentals/closure-scope-deep-dive.md","tags":[],"version":"current","frontMatter":{},"sidebar":"frontendSidebar","previous":{"title":"JavaScript Fundamentals: Definitions, Interview Questions & Answers","permalink":"/interview/docs/frontend/javascript/fundamentals"},"next":{"title":"DOM Manipulation: Complete Deep Dive","permalink":"/interview/docs/frontend/fundamentals/dom-manipulation-deep-dive"}}');var t=r(4848),c=r(8453);const s={},o="JavaScript Closures & Scope: Complete Deep Dive",l={},a=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Understanding Scope",id:"understanding-scope",level:2},{value:"What is Scope?",id:"what-is-scope",level:3},{value:"Types of Scope in JavaScript:",id:"types-of-scope-in-javascript",level:4},{value:"Scope Chain",id:"scope-chain",level:3},{value:"Detailed Scope Example",id:"detailed-scope-example",level:3},{value:"Lexical Scoping",id:"lexical-scoping",level:2},{value:"What is Lexical Scoping?",id:"what-is-lexical-scoping",level:3},{value:"Key Principles:",id:"key-principles",level:4},{value:"Lexical Scoping Example",id:"lexical-scoping-example",level:3},{value:"What are Closures?",id:"what-are-closures",level:2},{value:"Definition",id:"definition",level:3},{value:"Three Key Characteristics:",id:"three-key-characteristics",level:4},{value:"Simple Closure Example",id:"simple-closure-example",level:3},{value:"Closure Creation Process",id:"closure-creation-process",level:3},{value:"How Closures Work",id:"how-closures-work",level:2},{value:"Behind the Scenes: Lexical Environment",id:"behind-the-scenes-lexical-environment",level:3},{value:"Variable Capture vs Reference",id:"variable-capture-vs-reference",level:3},{value:"Closure Use Cases",id:"closure-use-cases",level:2},{value:"1. Module Pattern",id:"1-module-pattern",level:3},{value:"2. Factory Functions",id:"2-factory-functions",level:3},{value:"3. Event Handlers with State",id:"3-event-handlers-with-state",level:3},{value:"4. Memoization (Caching)",id:"4-memoization-caching",level:3},{value:"5. Partial Application &amp; Currying",id:"5-partial-application--currying",level:3},{value:"Memory Management",id:"memory-management",level:2},{value:"Closure Memory Considerations",id:"closure-memory-considerations",level:3},{value:"Memory Leak Prevention",id:"memory-leak-prevention",level:3},{value:"Visual Diagrams",id:"visual-diagrams",level:2},{value:"Closure Memory Structure",id:"closure-memory-structure",level:3},{value:"Scope Chain Resolution",id:"scope-chain-resolution",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Closure Performance Impact",id:"closure-performance-impact",level:3},{value:"Interview Questions &amp; Answers",id:"interview-questions--answers",level:2},{value:"Q1: What will this code output and why?",id:"q1-what-will-this-code-output-and-why",level:3},{value:"Q2: Explain how this module pattern works:",id:"q2-explain-how-this-module-pattern-works",level:3},{value:"Q3: What&#39;s the difference between these two approaches?",id:"q3-whats-the-difference-between-these-two-approaches",level:3},{value:"Q4: How do you create private methods in JavaScript?",id:"q4-how-do-you-create-private-methods-in-javascript",level:3},{value:"Q5: Explain memory leaks with closures and how to prevent them.",id:"q5-explain-memory-leaks-with-closures-and-how-to-prevent-them",level:3}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"javascript-closures--scope-complete-deep-dive",children:"JavaScript Closures & Scope: Complete Deep Dive"})}),"\n",(0,t.jsx)(e.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#understanding-scope",children:"Understanding Scope"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#lexical-scoping",children:"Lexical Scoping"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#what-are-closures",children:"What are Closures?"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#how-closures-work",children:"How Closures Work"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#closure-use-cases",children:"Closure Use Cases"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#memory-management",children:"Memory Management"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#visual-diagrams",children:"Visual Diagrams"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#common-patterns",children:"Common Patterns"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#performance-considerations",children:"Performance Considerations"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#interview-questions--answers",children:"Interview Questions & Answers"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#advanced-examples",children:"Advanced Examples"})}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"understanding-scope",children:"Understanding Scope"}),"\n",(0,t.jsx)(e.h3,{id:"what-is-scope",children:"What is Scope?"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Scope"})," determines the accessibility of variables, functions, and objects in different parts of your code. It defines the ",(0,t.jsx)(e.strong,{children:"context"})," in which variables exist and can be accessed."]}),"\n",(0,t.jsx)(e.h4,{id:"types-of-scope-in-javascript",children:"Types of Scope in JavaScript:"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"1. Global Scope"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Variables accessible from anywhere in the program"}),"\n",(0,t.jsx)(e.li,{children:"Properties of the global object (window in browsers)"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"2. Function Scope"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Variables accessible only within the function"}),"\n",(0,t.jsx)(e.li,{children:"Created when function is invoked"}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"3. Block Scope"})," (ES6+)"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Variables accessible only within the block "}),"\n",(0,t.jsxs)(e.li,{children:["Applies to ",(0,t.jsx)(e.code,{children:"let"})," and ",(0,t.jsx)(e.code,{children:"const"})," declarations"]}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"4. Module Scope"})," (ES6+)"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Variables accessible only within the module"}),"\n",(0,t.jsx)(e.li,{children:"Top-level scope of a module"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"scope-chain",children:"Scope Chain"}),"\n",(0,t.jsxs)(e.p,{children:["JavaScript uses a ",(0,t.jsx)(e.strong,{children:"scope chain"})," to resolve variable access:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502            SCOPE CHAIN                  \u2502\n\u2502                                         \u2502\n\u2502  Inner Scope                            \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502  Look for variable here first  \u2502    \u2502\n\u2502  \u2502  \u2193 Not found? Go up the chain  \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502                \u2502                        \u2502\n\u2502  Outer Scope   \u2193                        \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502  Look for variable here        \u2502    \u2502\n\u2502  \u2502  \u2193 Not found? Continue up      \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502                \u2502                        \u2502\n\u2502  Global Scope  \u2193                        \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502  Look for variable here        \u2502    \u2502\n\u2502  \u2502  \u2193 Not found? ReferenceError   \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(e.h3,{id:"detailed-scope-example",children:"Detailed Scope Example"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// Global Scope\nconst globalVar = 'I am global';\n\nfunction outerFunction() {\n    // Outer Function Scope\n    const outerVar = 'I am outer';\n    \n    function innerFunction() {\n        // Inner Function Scope\n        const innerVar = 'I am inner';\n        \n        console.log(innerVar);  // \u2705 Accessible - same scope\n        console.log(outerVar);  // \u2705 Accessible - outer scope\n        console.log(globalVar); // \u2705 Accessible - global scope\n    }\n    \n    innerFunction();\n    console.log(innerVar); // \u274c ReferenceError - not in scope\n}\n\nouterFunction();\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Scope Chain Resolution:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"innerFunction scope: { innerVar }\n        \u2193 (if not found)\nouterFunction scope: { outerVar }\n        \u2193 (if not found)\nGlobal scope: { globalVar }\n        \u2193 (if not found)\nReferenceError: variable is not defined\n"})}),"\n",(0,t.jsx)(e.h2,{id:"lexical-scoping",children:"Lexical Scoping"}),"\n",(0,t.jsx)(e.h3,{id:"what-is-lexical-scoping",children:"What is Lexical Scoping?"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Lexical Scoping"})," means that the scope of variables is determined by where they are declared in the code, not where they are called from."]}),"\n",(0,t.jsx)(e.h4,{id:"key-principles",children:"Key Principles:"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"1. Static Scope"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Scope is determined at ",(0,t.jsx)(e.strong,{children:"compile time"})]}),"\n",(0,t.jsxs)(e.li,{children:["Based on ",(0,t.jsx)(e.strong,{children:"where"})," variables and functions are declared"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Not"})," where they are called"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"2. Nested Function Access"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Inner functions have access to outer function variables"}),"\n",(0,t.jsxs)(e.li,{children:["Outer functions ",(0,t.jsx)(e.strong,{children:"cannot"})," access inner function variables"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"lexical-scoping-example",children:"Lexical Scoping Example"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"const name = 'Global John';\n\nfunction createGreeting() {\n    const name = 'Function John';\n    \n    return function greet() {\n        console.log(`Hello, ${name}!`);\n    };\n}\n\nconst greeting = createGreeting();\ngreeting(); // \"Hello, Function John!\"\n\n// Even though we call greeting() in global scope,\n// it still uses the 'name' from where it was defined\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Visual Representation:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         LEXICAL ENVIRONMENT            \u2502\n\u2502                                         \u2502\n\u2502  Global: { name: 'Global John' }        \u2502\n\u2502  \u2502                                      \u2502\n\u2502  \u2514\u2500 createGreeting(): {                 \u2502\n\u2502       name: 'Function John',            \u2502\n\u2502       greet: function() {...}           \u2502\n\u2502     }                                   \u2502\n\u2502                                         \u2502\n\u2502  greet() function \"remembers\"           \u2502\n\u2502  the scope where it was created         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(e.h2,{id:"what-are-closures",children:"What are Closures?"}),"\n",(0,t.jsx)(e.h3,{id:"definition",children:"Definition"}),"\n",(0,t.jsxs)(e.p,{children:["A ",(0,t.jsx)(e.strong,{children:"Closure"})," is a feature where an inner function has access to variables from its outer (enclosing) scope even after the outer function has finished executing."]}),"\n",(0,t.jsx)(e.h4,{id:"three-key-characteristics",children:"Three Key Characteristics:"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"1. Access to Outer Variables"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Inner function can access outer function's variables"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"2. Persistent Scope"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Outer function's variables remain accessible even after it returns"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"3. Data Privacy"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Variables in the closure are private to that specific instance"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"simple-closure-example",children:"Simple Closure Example"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'function outerFunction(x) {\n    // This variable is "captured" by the closure\n    const outerVariable = x;\n    \n    function innerFunction(y) {\n        console.log(outerVariable + y);\n    }\n    \n    return innerFunction;\n}\n\nconst myClosure = outerFunction(10);\nmyClosure(5); // Outputs: 15\n\n// outerFunction has finished executing,\n// but innerFunction still has access to outerVariable\n'})}),"\n",(0,t.jsx)(e.h3,{id:"closure-creation-process",children:"Closure Creation Process"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Step 1: outerFunction(10) is called\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 outerFunction Execution Context     \u2502\n\u2502 Variables: { x: 10, outerVariable: 10 } \u2502\n\u2502 Functions: { innerFunction }        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nStep 2: innerFunction is created and returned\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Closure Created                     \u2502\n\u2502 Contains: { outerVariable: 10 }     \u2502\n\u2502 Function: innerFunction             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nStep 3: outerFunction execution context is destroyed\nBut the closure preserves outerVariable!\n\nStep 4: myClosure(5) is called\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 innerFunction Execution Context     \u2502\n\u2502 Has access to: { y: 5 }            \u2502\n\u2502 Plus closure: { outerVariable: 10 } \u2502\n\u2502 Result: 10 + 5 = 15                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(e.h2,{id:"how-closures-work",children:"How Closures Work"}),"\n",(0,t.jsx)(e.h3,{id:"behind-the-scenes-lexical-environment",children:"Behind the Scenes: Lexical Environment"}),"\n",(0,t.jsxs)(e.p,{children:["Every function in JavaScript maintains a reference to its ",(0,t.jsx)(e.strong,{children:"Lexical Environment"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function makeCounter() {\n    let count = 0; // This is in the Lexical Environment\n    \n    return function() {\n        count++; // Accesses the captured variable\n        return count;\n    };\n}\n\nconst counter1 = makeCounter();\nconst counter2 = makeCounter();\n\nconsole.log(counter1()); // 1\nconsole.log(counter1()); // 2\nconsole.log(counter2()); // 1 (independent closure)\nconsole.log(counter1()); // 3\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Memory Structure:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           MEMORY HEAP                   \u2502\n\u2502                                         \u2502\n\u2502  counter1 Closure:                      \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502 Lexical Environment:            \u2502    \u2502\n\u2502  \u2502 { count: 3 }                    \u2502    \u2502\n\u2502  \u2502 Function: [anonymous function]  \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502                                         \u2502\n\u2502  counter2 Closure:                      \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502 Lexical Environment:            \u2502    \u2502\n\u2502  \u2502 { count: 1 }                    \u2502    \u2502\n\u2502  \u2502 Function: [anonymous function]  \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(e.h3,{id:"variable-capture-vs-reference",children:"Variable Capture vs Reference"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Important"}),": Closures capture variables by ",(0,t.jsx)(e.strong,{children:"reference"}),", not by value:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function createFunctions() {\n    const functions = [];\n    \n    // Common mistake\n    for (var i = 0; i < 3; i++) {\n        functions.push(function() {\n            console.log(i); // Captures reference to 'i'\n        });\n    }\n    \n    return functions;\n}\n\nconst funcs = createFunctions();\nfuncs[0](); // 3 (not 0!)\nfuncs[1](); // 3 (not 1!)\nfuncs[2](); // 3 (not 2!)\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Why this happens:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"All three functions share the same lexical environment\nthat contains the variable 'i'.\n\nWhen the loop finishes, i = 3.\nAll functions reference the same 'i' variable.\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Solutions:"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsxs)(e.strong,{children:["1. Use ",(0,t.jsx)(e.code,{children:"let"})," (block scope):"]})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function createFunctions() {\n    const functions = [];\n    \n    for (let i = 0; i < 3; i++) { // 'let' creates new scope each iteration\n        functions.push(function() {\n            console.log(i);\n        });\n    }\n    \n    return functions;\n}\n\nconst funcs = createFunctions();\nfuncs[0](); // 0\nfuncs[1](); // 1\nfuncs[2](); // 2\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"2. Use IIFE (Immediately Invoked Function Expression):"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function createFunctions() {\n    const functions = [];\n    \n    for (var i = 0; i < 3; i++) {\n        functions.push((function(index) {\n            return function() {\n                console.log(index);\n            };\n        })(i)); // IIFE creates new scope with 'index'\n    }\n    \n    return functions;\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"closure-use-cases",children:"Closure Use Cases"}),"\n",(0,t.jsx)(e.h3,{id:"1-module-pattern",children:"1. Module Pattern"}),"\n",(0,t.jsx)(e.p,{children:"Create private variables and methods:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"const Calculator = (function() {\n    // Private variables\n    let history = [];\n    let currentValue = 0;\n    \n    // Private methods\n    function addToHistory(operation, value) {\n        history.push(`${operation}: ${value}`);\n    }\n    \n    function validateNumber(num) {\n        if (typeof num !== 'number' || isNaN(num)) {\n            throw new Error('Invalid number');\n        }\n    }\n    \n    // Public API\n    return {\n        add(num) {\n            validateNumber(num);\n            currentValue += num;\n            addToHistory('ADD', num);\n            return this; // Method chaining\n        },\n        \n        subtract(num) {\n            validateNumber(num);\n            currentValue -= num;\n            addToHistory('SUBTRACT', num);\n            return this;\n        },\n        \n        getValue() {\n            return currentValue;\n        },\n        \n        getHistory() {\n            return [...history]; // Return copy, not reference\n        },\n        \n        clear() {\n            currentValue = 0;\n            history = [];\n            return this;\n        }\n    };\n})();\n\n// Usage\nCalculator\n    .add(10)\n    .subtract(3)\n    .add(5);\n\nconsole.log(Calculator.getValue()); // 12\nconsole.log(Calculator.getHistory()); // ['ADD: 10', 'SUBTRACT: 3', 'ADD: 5']\n\n// Private variables are not accessible\nconsole.log(Calculator.history); // undefined\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-factory-functions",children:"2. Factory Functions"}),"\n",(0,t.jsx)(e.p,{children:"Create objects with private state:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function createBankAccount(initialBalance = 0) {\n    let balance = initialBalance;\n    let transactionHistory = [];\n    \n    function recordTransaction(type, amount) {\n        transactionHistory.push({\n            type,\n            amount,\n            timestamp: new Date(),\n            balanceAfter: balance\n        });\n    }\n    \n    return {\n        deposit(amount) {\n            if (amount <= 0) {\n                throw new Error('Deposit amount must be positive');\n            }\n            balance += amount;\n            recordTransaction('DEPOSIT', amount);\n            return balance;\n        },\n        \n        withdraw(amount) {\n            if (amount <= 0) {\n                throw new Error('Withdrawal amount must be positive');\n            }\n            if (amount > balance) {\n                throw new Error('Insufficient funds');\n            }\n            balance -= amount;\n            recordTransaction('WITHDRAWAL', amount);\n            return balance;\n        },\n        \n        getBalance() {\n            return balance;\n        },\n        \n        getTransactionHistory() {\n            return transactionHistory.map(t => ({ ...t })); // Deep copy\n        }\n    };\n}\n\nconst account1 = createBankAccount(100);\nconst account2 = createBankAccount(50);\n\naccount1.deposit(25);\naccount2.withdraw(10);\n\nconsole.log(account1.getBalance()); // 125\nconsole.log(account2.getBalance()); // 40\n\n// Each account has its own private state\nconsole.log(account1.balance); // undefined (private)\n"})}),"\n",(0,t.jsx)(e.h3,{id:"3-event-handlers-with-state",children:"3. Event Handlers with State"}),"\n",(0,t.jsx)(e.p,{children:"Maintain state in event handlers:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function createButtonWithCounter(buttonId) {\n    let clickCount = 0;\n    let lastClickTime = null;\n    \n    const button = document.getElementById(buttonId);\n    \n    button.addEventListener('click', function(event) {\n        clickCount++;\n        const now = Date.now();\n        const timeSinceLastClick = lastClickTime ? now - lastClickTime : 0;\n        \n        console.log(`Button clicked ${clickCount} times`);\n        \n        if (timeSinceLastClick > 0) {\n            console.log(`Time since last click: ${timeSinceLastClick}ms`);\n        }\n        \n        lastClickTime = now;\n        \n        // Update button text with click count\n        button.textContent = `Clicked ${clickCount} times`;\n    });\n    \n    return {\n        getClickCount: () => clickCount,\n        reset: () => {\n            clickCount = 0;\n            lastClickTime = null;\n            button.textContent = 'Click me';\n        }\n    };\n}\n\nconst buttonCounter = createButtonWithCounter('myButton');\n"})}),"\n",(0,t.jsx)(e.h3,{id:"4-memoization-caching",children:"4. Memoization (Caching)"}),"\n",(0,t.jsx)(e.p,{children:"Cache expensive function results:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function memoize(fn) {\n    const cache = new Map();\n    \n    return function(...args) {\n        const key = JSON.stringify(args);\n        \n        if (cache.has(key)) {\n            console.log('Cache hit!');\n            return cache.get(key);\n        }\n        \n        console.log('Computing result...');\n        const result = fn.apply(this, args);\n        cache.set(key, result);\n        return result;\n    };\n}\n\n// Expensive function\nfunction fibonacci(n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nconst memoizedFibonacci = memoize(fibonacci);\n\nconsole.log(memoizedFibonacci(10)); // Computing result... 55\nconsole.log(memoizedFibonacci(10)); // Cache hit! 55\nconsole.log(memoizedFibonacci(11)); // Computing result... 89\n"})}),"\n",(0,t.jsx)(e.h3,{id:"5-partial-application--currying",children:"5. Partial Application & Currying"}),"\n",(0,t.jsx)(e.p,{children:"Create specialized functions:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// Partial Application\nfunction multiply(a, b, c) {\n    return a * b * c;\n}\n\nfunction partial(fn, ...fixedArgs) {\n    return function(...remainingArgs) {\n        return fn(...fixedArgs, ...remainingArgs);\n    };\n}\n\nconst multiplyByTwo = partial(multiply, 2);\nconst multiplyByTwoAndThree = partial(multiply, 2, 3);\n\nconsole.log(multiplyByTwo(3, 4)); // 2 * 3 * 4 = 24\nconsole.log(multiplyByTwoAndThree(5)); // 2 * 3 * 5 = 30\n\n// Currying\nfunction curry(fn) {\n    return function curried(...args) {\n        if (args.length >= fn.length) {\n            return fn.apply(this, args);\n        } else {\n            return function(...nextArgs) {\n                return curried.apply(this, args.concat(nextArgs));\n            };\n        }\n    };\n}\n\nconst curriedMultiply = curry(multiply);\n\nconsole.log(curriedMultiply(2)(3)(4)); // 24\nconsole.log(curriedMultiply(2, 3)(4)); // 24\nconsole.log(curriedMultiply(2)(3, 4)); // 24\n"})}),"\n",(0,t.jsx)(e.h2,{id:"memory-management",children:"Memory Management"}),"\n",(0,t.jsx)(e.h3,{id:"closure-memory-considerations",children:"Closure Memory Considerations"}),"\n",(0,t.jsx)(e.p,{children:"Closures can lead to memory leaks if not handled properly:"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Problem: Accidental Object Retention"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function attachListeners() {\n    const largeObject = new Array(1000000).fill('data');\n    \n    document.getElementById('button').addEventListener('click', function() {\n        // This closure keeps largeObject in memory\n        console.log('Button clicked');\n    });\n}\n\nattachListeners();\n// largeObject remains in memory even though it's not used!\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Solution: Explicit Cleanup"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function attachListeners() {\n    const largeObject = new Array(1000000).fill('data');\n    \n    function clickHandler() {\n        console.log('Button clicked');\n        // Don't reference largeObject here\n    }\n    \n    document.getElementById('button').addEventListener('click', clickHandler);\n    \n    // Cleanup function\n    return function cleanup() {\n        document.getElementById('button').removeEventListener('click', clickHandler);\n        // largeObject will be garbage collected\n    };\n}\n\nconst cleanup = attachListeners();\n// Later...\ncleanup();\n"})}),"\n",(0,t.jsx)(e.h3,{id:"memory-leak-prevention",children:"Memory Leak Prevention"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"1. Avoid Unnecessary Variable Capture"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// BAD: Captures unnecessary variables\nfunction createHandler(data) {\n    const largeArray = new Array(1000000);\n    const someOtherStuff = { /* ... */ };\n    \n    return function() {\n        console.log(data); // Only needs 'data', but captures everything\n    };\n}\n\n// GOOD: Only capture what you need\nfunction createHandler(data) {\n    const largeArray = new Array(1000000);\n    const someOtherStuff = { /* ... */ };\n    \n    // Extract only what you need\n    const neededData = data;\n    \n    return function() {\n        console.log(neededData);\n    };\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"2. Break Circular References"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function setupComponent() {\n    const element = document.getElementById('component');\n    \n    element.onclick = function() {\n        // Circular reference: element -> function -> element\n        element.style.color = 'red';\n    };\n    \n    // Break the cycle\n    return function cleanup() {\n        element.onclick = null;\n    };\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"visual-diagrams",children:"Visual Diagrams"}),"\n",(0,t.jsx)(e.h3,{id:"closure-memory-structure",children:"Closure Memory Structure"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    JAVASCRIPT MEMORY                        \u2502\n\u2502                                                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502                  CALL STACK                         \u2502    \u2502\n\u2502  \u2502                                                     \u2502    \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502    \u2502\n\u2502  \u2502  \u2502        Global Execution Context             \u2502    \u2502    \u2502\n\u2502  \u2502  \u2502                                             \u2502    \u2502    \u2502\n\u2502  \u2502  \u2502  Variables: { counter: [Function] }         \u2502    \u2502    \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502                                                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502                    HEAP MEMORY                      \u2502    \u2502\n\u2502  \u2502                                                     \u2502    \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502    \u2502\n\u2502  \u2502  \u2502           Closure Object                    \u2502    \u2502    \u2502\n\u2502  \u2502  \u2502                                             \u2502    \u2502    \u2502\n\u2502  \u2502  \u2502  Lexical Environment:                       \u2502    \u2502    \u2502\n\u2502  \u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502    \u2502    \u2502\n\u2502  \u2502  \u2502  \u2502  Variables: { count: 0 }            \u2502    \u2502    \u2502    \u2502\n\u2502  \u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502    \u2502    \u2502\n\u2502  \u2502  \u2502                                             \u2502    \u2502    \u2502\n\u2502  \u2502  \u2502  Function Code:                             \u2502    \u2502    \u2502\n\u2502  \u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502    \u2502    \u2502\n\u2502  \u2502  \u2502  \u2502  function() {                       \u2502    \u2502    \u2502    \u2502\n\u2502  \u2502  \u2502  \u2502    count++;                         \u2502    \u2502    \u2502    \u2502\n\u2502  \u2502  \u2502  \u2502    return count;                    \u2502    \u2502    \u2502    \u2502\n\u2502  \u2502  \u2502  \u2502  }                                  \u2502    \u2502    \u2502    \u2502\n\u2502  \u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502    \u2502    \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502                                                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502               REFERENCE CHAIN                       \u2502    \u2502\n\u2502  \u2502                                                     \u2502    \u2502\n\u2502  \u2502  counter variable \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192 Closure Object        \u2502    \u2502\n\u2502  \u2502                                    \u2502                \u2502    \u2502\n\u2502  \u2502                                    \u25bc                \u2502    \u2502\n\u2502  \u2502                           Lexical Environment       \u2502    \u2502\n\u2502  \u2502                                    \u2502                \u2502    \u2502\n\u2502  \u2502                                    \u25bc                \u2502    \u2502\n\u2502  \u2502                              { count: 0 }           \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(e.h3,{id:"scope-chain-resolution",children:"Scope Chain Resolution"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Function Call: innerFunction()\n\nStep 1: Look in Local Scope\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   innerFunction Scope           \u2502\n\u2502                                 \u2502\n\u2502   Looking for: variableName     \u2502\n\u2502   Found: [ ] Yes [ ] No         \u2502\n\u2502                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502\n                \u25bc (if not found)\nStep 2: Look in Outer Function Scope\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   outerFunction Scope           \u2502\n\u2502                                 \u2502\n\u2502   Looking for: variableName     \u2502\n\u2502   Found: [ ] Yes [ ] No         \u2502\n\u2502                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502\n                \u25bc (if not found)\nStep 3: Look in Global Scope\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Global Scope                  \u2502\n\u2502                                 \u2502\n\u2502   Looking for: variableName     \u2502\n\u2502   Found: [ ] Yes [ ] No         \u2502\n\u2502                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502\n                \u25bc (if not found)\n        ReferenceError!\n"})}),"\n",(0,t.jsx)(e.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsx)(e.h3,{id:"closure-performance-impact",children:"Closure Performance Impact"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"1. Memory Usage"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// Each closure instance maintains its own scope\nfunction createCounter() {\n    let count = 0;\n    const largeArray = new Array(1000000); // Each instance has this!\n    \n    return function() {\n        return ++count;\n    };\n}\n\n// Creates 1000 closures, each with its own largeArray\nconst counters = Array.from({ length: 1000 }, createCounter);\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"2. Garbage Collection"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// Closure prevents garbage collection\nlet globalRef;\n\nfunction createClosure() {\n    const largeData = new Array(1000000).fill('data');\n    \n    globalRef = function() {\n        return largeData.length; // Keeps largeData alive\n    };\n}\n\ncreateClosure();\n// largeData cannot be garbage collected while globalRef exists\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"3. Performance Optimization"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Bad: Recreating closures in render"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function MyComponent({ items }) {\n    return items.map(item => (\n        <button \n            key={item.id}\n            onClick={() => handleClick(item.id)} // New closure each render!\n        >\n            {item.name}\n        </button>\n    ));\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Good: Memoized or stable references"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function MyComponent({ items }) {\n    const handleClick = useCallback((id) => {\n        // Handle click\n    }, []);\n    \n    return items.map(item => (\n        <button \n            key={item.id}\n            onClick={() => handleClick(item.id)}\n        >\n            {item.name}\n        </button>\n    ));\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"interview-questions--answers",children:"Interview Questions & Answers"}),"\n",(0,t.jsx)(e.h3,{id:"q1-what-will-this-code-output-and-why",children:"Q1: What will this code output and why?"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"for (var i = 0; i < 3; i++) {\n    setTimeout(function() {\n        console.log(i);\n    }, 100);\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Answer"}),": It will output ",(0,t.jsx)(e.code,{children:"3"})," three times."]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Explanation"}),":"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["The ",(0,t.jsx)(e.code,{children:"setTimeout"})," callbacks are executed after the loop completes"]}),"\n",(0,t.jsxs)(e.li,{children:["All three closures capture a reference to the same variable ",(0,t.jsx)(e.code,{children:"i"})]}),"\n",(0,t.jsxs)(e.li,{children:["When the callbacks execute, ",(0,t.jsx)(e.code,{children:"i"})," has the value 3 (the final value after the loop)"]}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Solutions"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// Solution 1: Use let (block scope)\nfor (let i = 0; i < 3; i++) {\n    setTimeout(function() {\n        console.log(i); // 0, 1, 2\n    }, 100);\n}\n\n// Solution 2: IIFE\nfor (var i = 0; i < 3; i++) {\n    (function(j) {\n        setTimeout(function() {\n            console.log(j); // 0, 1, 2\n        }, 100);\n    })(i);\n}\n\n// Solution 3: bind\nfor (var i = 0; i < 3; i++) {\n    setTimeout(function(j) {\n        console.log(j); // 0, 1, 2\n    }.bind(null, i), 100);\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"q2-explain-how-this-module-pattern-works",children:"Q2: Explain how this module pattern works:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"const Module = (function() {\n    let privateVar = 0;\n    \n    function privateFunction() {\n        console.log('Private function called');\n    }\n    \n    return {\n        publicMethod() {\n            privateVar++;\n            privateFunction();\n            return privateVar;\n        },\n        \n        getPrivateVar() {\n            return privateVar;\n        }\n    };\n})();\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Answer"}),":\nThis is the ",(0,t.jsx)(e.strong,{children:"Module Pattern"})," using an IIFE (Immediately Invoked Function Expression):"]}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"IIFE"}),": Creates a private scope immediately"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Private variables"}),": ",(0,t.jsx)(e.code,{children:"privateVar"})," and ",(0,t.jsx)(e.code,{children:"privateFunction"})," are enclosed in the function scope"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Public API"}),": The returned object exposes only the methods we want to be public"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Closure"}),": The returned methods maintain access to the private variables"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Encapsulation"}),": Private variables cannot be accessed directly from outside"]}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Usage"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"console.log(Module.publicMethod()); // 1\nconsole.log(Module.getPrivateVar()); // 1\nconsole.log(Module.privateVar); // undefined (private)\n"})}),"\n",(0,t.jsx)(e.h3,{id:"q3-whats-the-difference-between-these-two-approaches",children:"Q3: What's the difference between these two approaches?"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// Approach 1\nfunction createMultiplier(x) {\n    return function(y) {\n        return x * y;\n    };\n}\n\n// Approach 2\nfunction multiply(x, y) {\n    return x * y;\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Answer"}),":"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Approach 1 (Closure)"}),":"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Creates a ",(0,t.jsx)(e.strong,{children:"specialized function"})," with ",(0,t.jsx)(e.code,{children:"x"}),' "baked in"']}),"\n",(0,t.jsxs)(e.li,{children:["Each call to ",(0,t.jsx)(e.code,{children:"createMultiplier"})," creates a new closure"]}),"\n",(0,t.jsxs)(e.li,{children:["Useful for ",(0,t.jsx)(e.strong,{children:"partial application"})," and ",(0,t.jsx)(e.strong,{children:"function specialization"})]}),"\n",(0,t.jsx)(e.li,{children:"More memory usage (maintains closure scope)"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"const double = createMultiplier(2);\nconst triple = createMultiplier(3);\n\nconsole.log(double(5)); // 10\nconsole.log(triple(5)); // 15\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Approach 2 (Regular function)"}),":"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Direct multiplication without closure"}),"\n",(0,t.jsxs)(e.li,{children:["More ",(0,t.jsx)(e.strong,{children:"memory efficient"})]}),"\n",(0,t.jsx)(e.li,{children:"Requires both parameters each time"}),"\n",(0,t.jsx)(e.li,{children:"No function specialization"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"console.log(multiply(2, 5)); // 10\nconsole.log(multiply(3, 5)); // 15\n"})}),"\n",(0,t.jsx)(e.h3,{id:"q4-how-do-you-create-private-methods-in-javascript",children:"Q4: How do you create private methods in JavaScript?"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Answer"}),":"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"1. Module Pattern with IIFE"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"const MyModule = (function() {\n    // Private variables and methods\n    let privateCounter = 0;\n    \n    function privateMethod() {\n        console.log('This is private');\n    }\n    \n    function incrementCounter() {\n        privateCounter++;\n        privateMethod();\n    }\n    \n    // Public API\n    return {\n        increment: incrementCounter,\n        getCount() {\n            return privateCounter;\n        }\n    };\n})();\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"2. Factory Function"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function createObject() {\n    let privateVar = 'secret';\n    \n    function privateMethod() {\n        return `Accessing ${privateVar}`;\n    }\n    \n    return {\n        publicMethod() {\n            return privateMethod();\n        }\n    };\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"3. WeakMap Pattern"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"const privateData = new WeakMap();\n\nclass MyClass {\n    constructor() {\n        privateData.set(this, {\n            secret: 'private value',\n            privateMethod() {\n                return 'This is private';\n            }\n        });\n    }\n    \n    publicMethod() {\n        const data = privateData.get(this);\n        return data.privateMethod();\n    }\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"4. Private Fields (ES2022)"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"class MyClass {\n    #privateField = 'secret';\n    \n    #privateMethod() {\n        return 'This is private';\n    }\n    \n    publicMethod() {\n        return this.#privateMethod();\n    }\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"q5-explain-memory-leaks-with-closures-and-how-to-prevent-them",children:"Q5: Explain memory leaks with closures and how to prevent them."}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Answer"}),":"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Common Memory Leak Scenarios"}),":"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"1. Event Listeners with Closures"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// PROBLEM: Memory leak\nfunction setupComponent() {\n    const largeData = new Array(1000000);\n    \n    document.getElementById('button').onclick = function() {\n        console.log('Clicked'); // Keeps largeData in memory\n    };\n}\n\n// SOLUTION: Explicit cleanup\nfunction setupComponent() {\n    const largeData = new Array(1000000);\n    \n    function clickHandler() {\n        console.log('Clicked');\n        // Don't reference largeData\n    }\n    \n    const button = document.getElementById('button');\n    button.onclick = clickHandler;\n    \n    return function cleanup() {\n        button.onclick = null;\n        // Now largeData can be garbage collected\n    };\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"2. Circular References"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// PROBLEM: Circular reference\nfunction createNode() {\n    const node = {\n        parent: null,\n        children: [],\n        cleanup: function() {\n            // This creates a circular reference\n            this.parent = null;\n            this.children = [];\n        }\n    };\n    \n    return node;\n}\n\n// SOLUTION: WeakMap or explicit cleanup\nconst nodeCleanup = new WeakMap();\n\nfunction createNode() {\n    const node = {\n        parent: null,\n        children: []\n    };\n    \n    nodeCleanup.set(node, function() {\n        node.parent = null;\n        node.children = [];\n    });\n    \n    return node;\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Prevention Strategies"}),":"]}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Remove event listeners"})," when no longer needed"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Avoid capturing unnecessary variables"})," in closures"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Use WeakMap"})," for private data"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Set references to null"})," when done"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Use tools"})," like Chrome DevTools Memory tab to detect leaks"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"This comprehensive guide covers closures and scope from fundamental concepts to advanced patterns, providing the deep understanding needed for senior frontend engineering interviews."})]})}function u(n={}){const{wrapper:e}={...(0,c.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>s,x:()=>o});var i=r(6540);const t={},c=i.createContext(t);function s(n){const e=i.useContext(c);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:s(n.components),i.createElement(c.Provider,{value:e},n.children)}}}]);