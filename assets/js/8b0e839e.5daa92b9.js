"use strict";(self.webpackChunkfrontend_interview_guide=self.webpackChunkfrontend_interview_guide||[]).push([[5725],{6074:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=t(4848),s=t(8453);const r={},l="DOM Manipulation: Complete Deep Dive",o={id:"frontend/fundamentals/dom-manipulation-deep-dive",title:"DOM Manipulation: Complete Deep Dive",description:"Table of Contents",source:"@site/docs/frontend/fundamentals/dom-manipulation-deep-dive.md",sourceDirName:"frontend/fundamentals",slug:"/frontend/fundamentals/dom-manipulation-deep-dive",permalink:"/interview/docs/frontend/fundamentals/dom-manipulation-deep-dive",draft:!1,unlisted:!1,editUrl:"https://github.com/Nhi4912/interview/tree/main/docs/frontend/fundamentals/dom-manipulation-deep-dive.md",tags:[],version:"current",frontMatter:{},sidebar:"frontendSidebar",previous:{title:"JavaScript Closures & Scope: Complete Deep Dive",permalink:"/interview/docs/frontend/fundamentals/closure-scope-deep-dive"},next:{title:"JavaScript Event Loop: Complete Deep Dive",permalink:"/interview/docs/frontend/fundamentals/event-loop-deep-dive"}},a={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Understanding the DOM",id:"understanding-the-dom",level:2},{value:"What is the DOM?",id:"what-is-the-dom",level:3},{value:"Key Concepts:",id:"key-concepts",level:4},{value:"DOM vs HTML",id:"dom-vs-html",level:3},{value:"DOM Tree Structure",id:"dom-tree-structure",level:2},{value:"Node Types and Hierarchy",id:"node-types-and-hierarchy",level:3},{value:"Node Types (Complete List)",id:"node-types-complete-list",level:3},{value:"Node Properties and Relationships",id:"node-properties-and-relationships",level:3},{value:"Detailed Tree Navigation Example",id:"detailed-tree-navigation-example",level:3},{value:"Element Selection Methods",id:"element-selection-methods",level:2},{value:"Performance Comparison of Selection Methods",id:"performance-comparison-of-selection-methods",level:3},{value:"Advanced Selector Strategies",id:"advanced-selector-strategies",level:3},{value:"Creating and Modifying Elements",id:"creating-and-modifying-elements",level:2},{value:"Element Creation Patterns",id:"element-creation-patterns",level:3},{value:"Document Fragments for Performance",id:"document-fragments-for-performance",level:3},{value:"Event System Deep Dive",id:"event-system-deep-dive",level:2},{value:"Event Flow: Capturing, Target, Bubbling",id:"event-flow-capturing-target-bubbling",level:3},{value:"Event Handling Patterns",id:"event-handling-patterns",level:3},{value:"Event Performance Optimization",id:"event-performance-optimization",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Reflow and Repaint Optimization",id:"reflow-and-repaint-optimization",level:3},{value:"Modern DOM APIs",id:"modern-dom-apis",level:2},{value:"Intersection Observer",id:"intersection-observer",level:3},{value:"ResizeObserver",id:"resizeobserver",level:3},{value:"MutationObserver",id:"mutationobserver",level:3},{value:"Interview Questions &amp; Answers",id:"interview-questions--answers",level:2},{value:"Q1: What&#39;s the difference between <code>innerHTML</code>, <code>textContent</code>, and <code>innerText</code>?",id:"q1-whats-the-difference-between-innerhtml-textcontent-and-innertext",level:3},{value:"Q2: Explain event bubbling and capturing with an example.",id:"q2-explain-event-bubbling-and-capturing-with-an-example",level:3},{value:"Q3: How would you implement efficient DOM manipulation for adding 1000 elements?",id:"q3-how-would-you-implement-efficient-dom-manipulation-for-adding-1000-elements",level:3},{value:"Q4: What are the performance implications of different DOM querying methods?",id:"q4-what-are-the-performance-implications-of-different-dom-querying-methods",level:3},{value:"Q5: How do you prevent memory leaks in DOM manipulation?",id:"q5-how-do-you-prevent-memory-leaks-in-dom-manipulation",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"dom-manipulation-complete-deep-dive",children:"DOM Manipulation: Complete Deep Dive"}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#understanding-the-dom",children:"Understanding the DOM"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#dom-tree-structure",children:"DOM Tree Structure"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#element-selection-methods",children:"Element Selection Methods"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#creating-and-modifying-elements",children:"Creating and Modifying Elements"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#event-system-deep-dive",children:"Event System Deep Dive"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#performance-optimization",children:"Performance Optimization"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#modern-dom-apis",children:"Modern DOM APIs"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#visual-diagrams",children:"Visual Diagrams"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#interview-questions--answers",children:"Interview Questions & Answers"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#advanced-techniques",children:"Advanced Techniques"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"understanding-the-dom",children:"Understanding the DOM"}),"\n",(0,i.jsx)(n.h3,{id:"what-is-the-dom",children:"What is the DOM?"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Document Object Model (DOM)"})," is a programming interface for HTML and XML documents. It represents the document as a tree of objects that can be modified with JavaScript."]}),"\n",(0,i.jsx)(n.h4,{id:"key-concepts",children:"Key Concepts:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Live Representation"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The DOM is a ",(0,i.jsx)(n.strong,{children:"live"}),", in-memory representation of the document"]}),"\n",(0,i.jsx)(n.li,{children:"Changes to the DOM immediately affect the rendered page"}),"\n",(0,i.jsx)(n.li,{children:"JavaScript can read and modify the DOM in real-time"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Object-Oriented Interface"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Every element, attribute, and piece of text is an ",(0,i.jsx)(n.strong,{children:"object"})]}),"\n",(0,i.jsx)(n.li,{children:"Objects have properties and methods for manipulation"}),"\n",(0,i.jsx)(n.li,{children:"Follows a hierarchical tree structure"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Language-Agnostic API"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"While commonly used with JavaScript, DOM APIs work with any language"}),"\n",(0,i.jsx)(n.li,{children:"Standardized by W3C and WHATWG"}),"\n",(0,i.jsx)(n.li,{children:"Consistent across different browsers (mostly)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"dom-vs-html",children:"DOM vs HTML"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:"\x3c!-- HTML Source Code --\x3e\n<html>\n<head>\n    <title>My Page</title>\n</head>\n<body>\n    <h1>Hello World</h1>\n    <p>Welcome to my page</p>\n</body>\n</html>\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"HTML"}),": Static markup language\n",(0,i.jsx)(n.strong,{children:"DOM"}),": Dynamic object representation"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// DOM Representation (simplified)\n{\n    nodeType: 9, // DOCUMENT_NODE\n    nodeName: "#document",\n    children: [\n        {\n            nodeType: 1, // ELEMENT_NODE\n            nodeName: "HTML",\n            children: [\n                {\n                    nodeType: 1,\n                    nodeName: "HEAD",\n                    children: [/* title element */]\n                },\n                {\n                    nodeType: 1,\n                    nodeName: "BODY",\n                    children: [/* h1 and p elements */]\n                }\n            ]\n        }\n    ]\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"dom-tree-structure",children:"DOM Tree Structure"}),"\n",(0,i.jsx)(n.h3,{id:"node-types-and-hierarchy",children:"Node Types and Hierarchy"}),"\n",(0,i.jsxs)(n.p,{children:["The DOM represents documents as a tree of ",(0,i.jsx)(n.strong,{children:"nodes"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'                    document (Document Node)\n                         \u2502\n                      html (Element Node)\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2510\n                 head          body (Element Nodes)\n                   \u2502             \u2502\n               title          \u250c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2510\n                 \u2502          h1        p (Element Nodes)\n           "My Page"         \u2502        \u2502\n           (Text Node)  "Hello World" "Welcome..." (Text Nodes)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"node-types-complete-list",children:"Node Types (Complete List)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Node types with their numeric constants\nconst NODE_TYPES = {\n    ELEMENT_NODE: 1,                // <div>, <span>, etc.\n    ATTRIBUTE_NODE: 2,              // class="example" (deprecated)\n    TEXT_NODE: 3,                   // Text content\n    CDATA_SECTION_NODE: 4,          // <![CDATA[...]]>\n    ENTITY_REFERENCE_NODE: 5,       // &amp; (deprecated)\n    ENTITY_NODE: 6,                 // (deprecated)\n    PROCESSING_INSTRUCTION_NODE: 7, // <?xml-stylesheet ... ?>\n    COMMENT_NODE: 8,                // \x3c!-- comment --\x3e\n    DOCUMENT_NODE: 9,               // document\n    DOCUMENT_TYPE_NODE: 10,         // <!DOCTYPE html>\n    DOCUMENT_FRAGMENT_NODE: 11,     // document.createDocumentFragment()\n    NOTATION_NODE: 12               // (deprecated)\n};\n\n// Example usage\nfunction analyzeNode(node) {\n    switch(node.nodeType) {\n        case Node.ELEMENT_NODE:\n            console.log(`Element: ${node.tagName}`);\n            break;\n        case Node.TEXT_NODE:\n            console.log(`Text: "${node.textContent}"`);\n            break;\n        case Node.COMMENT_NODE:\n            console.log(`Comment: ${node.textContent}`);\n            break;\n        default:\n            console.log(`Other node type: ${node.nodeType}`);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"node-properties-and-relationships",children:"Node Properties and Relationships"}),"\n",(0,i.jsx)(n.p,{children:"Every DOM node has properties that describe its relationships:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Node relationship properties\nconst element = document.getElementById('myElement');\n\n// Parent relationships\nelement.parentNode;        // Immediate parent (any node type)\nelement.parentElement;     // Parent element (null if parent isn't element)\n\n// Child relationships\nelement.childNodes;        // All child nodes (including text, comments)\nelement.children;          // Only child elements\nelement.firstChild;        // First child node\nelement.lastChild;         // Last child node\nelement.firstElementChild; // First child element\nelement.lastElementChild;  // Last child element\n\n// Sibling relationships\nelement.nextSibling;        // Next sibling node\nelement.previousSibling;    // Previous sibling node\nelement.nextElementSibling; // Next sibling element\nelement.previousElementSibling; // Previous sibling element\n\n// Document relationships\nelement.ownerDocument;      // Reference to document\nelement.getRootNode();      // Root node (document or shadow root)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"detailed-tree-navigation-example",children:"Detailed Tree Navigation Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<div id="container">\n    \x3c!-- This is a comment --\x3e\n    <h1>Title</h1>\n    Some text content\n    <p>Paragraph</p>\n    <span>Span element</span>\n</div>\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'const container = document.getElementById(\'container\');\n\n// Understanding childNodes vs children\nconsole.log(container.childNodes.length);    // 7 (includes text nodes and comment)\nconsole.log(container.children.length);      // 3 (only h1, p, span elements)\n\n// Iterating through all nodes\nfor (let node of container.childNodes) {\n    if (node.nodeType === Node.ELEMENT_NODE) {\n        console.log(`Element: ${node.tagName}`);\n    } else if (node.nodeType === Node.TEXT_NODE) {\n        const text = node.textContent.trim();\n        if (text) console.log(`Text: "${text}"`);\n    } else if (node.nodeType === Node.COMMENT_NODE) {\n        console.log(`Comment: ${node.textContent}`);\n    }\n}\n\n// Output:\n// Comment: This is a comment\n// Element: H1\n// Text: "Some text content"\n// Element: P\n// Element: SPAN\n'})}),"\n",(0,i.jsx)(n.h2,{id:"element-selection-methods",children:"Element Selection Methods"}),"\n",(0,i.jsx)(n.h3,{id:"performance-comparison-of-selection-methods",children:"Performance Comparison of Selection Methods"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Performance ranking (fastest to slowest)\n// 1. getElementById - O(1) hash lookup\nconst element = document.getElementById('myId');\n\n// 2. getElementsByTagName - optimized native implementation\nconst paragraphs = document.getElementsByTagName('p');\n\n// 3. getElementsByClassName - optimized for class selection\nconst highlighted = document.getElementsByClassName('highlight');\n\n// 4. querySelector - flexible but slower for simple selections\nconst firstParagraph = document.querySelector('p');\n\n// 5. querySelectorAll - most flexible but slowest\nconst allParagraphs = document.querySelectorAll('p');\n"})}),"\n",(0,i.jsx)(n.h3,{id:"advanced-selector-strategies",children:"Advanced Selector Strategies"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Context-Specific Selection"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Instead of searching entire document\nconst expensiveSearch = document.querySelectorAll('.item .title');\n\n// Search within a specific container\nconst container = document.getElementById('itemContainer');\nconst efficientSearch = container.querySelectorAll('.title');\n\n// Even better: use more specific selectors\nconst verySpecific = document.querySelectorAll('#itemContainer > .item > .title');\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Live vs Static Collections"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Live collections (automatically update)\nconst liveCollection = document.getElementsByClassName('dynamic');\nconsole.log(liveCollection.length); // 3\n\n// Add new element with class 'dynamic'\nconst newElement = document.createElement('div');\nnewElement.className = 'dynamic';\ndocument.body.appendChild(newElement);\n\nconsole.log(liveCollection.length); // 4 (automatically updated!)\n\n// Static collections (snapshot at query time)\nconst staticCollection = document.querySelectorAll('.dynamic');\nconsole.log(staticCollection.length); // 3 (doesn't change)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Custom Selection Utilities"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class DOMSelector {\n    // Enhanced getElementById with error handling\n    static byId(id, context = document) {\n        const element = context.getElementById(id);\n        if (!element) {\n            console.warn(`Element with id \"${id}\" not found`);\n        }\n        return element;\n    }\n    \n    // Get element with data attribute\n    static byData(attribute, value, context = document) {\n        return context.querySelector(`[data-${attribute}=\"${value}\"]`);\n    }\n    \n    // Get all elements matching multiple classes\n    static byClasses(classes, context = document) {\n        const selector = classes.map(cls => `.${cls}`).join('');\n        return context.querySelectorAll(selector);\n    }\n    \n    // Get closest ancestor matching selector\n    static closest(element, selector) {\n        return element.closest(selector);\n    }\n    \n    // Get all descendants matching selector\n    static descendants(element, selector) {\n        return element.querySelectorAll(selector);\n    }\n    \n    // Check if element matches selector\n    static matches(element, selector) {\n        return element.matches(selector);\n    }\n}\n\n// Usage examples\nconst header = DOMSelector.byId('header');\nconst dataElement = DOMSelector.byData('role', 'button');\nconst multiClass = DOMSelector.byClasses(['btn', 'primary']);\nconst parentSection = DOMSelector.closest(button, 'section');\n"})}),"\n",(0,i.jsx)(n.h2,{id:"creating-and-modifying-elements",children:"Creating and Modifying Elements"}),"\n",(0,i.jsx)(n.h3,{id:"element-creation-patterns",children:"Element Creation Patterns"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Basic Element Creation"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Create element\nconst div = document.createElement('div');\n\n// Set attributes\ndiv.id = 'myDiv';\ndiv.className = 'container highlight';\ndiv.setAttribute('data-role', 'content');\n\n// Set content\ndiv.textContent = 'Hello World';\ndiv.innerHTML = '<strong>Bold text</strong>';\n\n// Append to document\ndocument.body.appendChild(div);\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Advanced Element Factory"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class ElementFactory {\n    static create(tagName, options = {}) {\n        const element = document.createElement(tagName);\n        \n        // Set attributes\n        if (options.attributes) {\n            Object.entries(options.attributes).forEach(([key, value]) => {\n                element.setAttribute(key, value);\n            });\n        }\n        \n        // Set properties\n        if (options.properties) {\n            Object.assign(element, options.properties);\n        }\n        \n        // Set styles\n        if (options.styles) {\n            Object.assign(element.style, options.styles);\n        }\n        \n        // Set content\n        if (options.textContent) {\n            element.textContent = options.textContent;\n        } else if (options.innerHTML) {\n            element.innerHTML = options.innerHTML;\n        }\n        \n        // Add event listeners\n        if (options.events) {\n            Object.entries(options.events).forEach(([event, handler]) => {\n                element.addEventListener(event, handler);\n            });\n        }\n        \n        // Add children\n        if (options.children) {\n            options.children.forEach(child => {\n                if (typeof child === 'string') {\n                    element.appendChild(document.createTextNode(child));\n                } else {\n                    element.appendChild(child);\n                }\n            });\n        }\n        \n        return element;\n    }\n    \n    // Specialized creation methods\n    static button(text, onClick, className = 'btn') {\n        return this.create('button', {\n            textContent: text,\n            properties: { className },\n            events: { click: onClick }\n        });\n    }\n    \n    static input(type, placeholder, name) {\n        return this.create('input', {\n            attributes: { type, placeholder, name }\n        });\n    }\n    \n    static div(className, content) {\n        return this.create('div', {\n            properties: { className },\n            innerHTML: content\n        });\n    }\n}\n\n// Usage\nconst button = ElementFactory.button('Click me', () => alert('Clicked!'));\nconst input = ElementFactory.input('text', 'Enter name...', 'username');\nconst container = ElementFactory.div('form-container', '');\n\ncontainer.appendChild(input);\ncontainer.appendChild(button);\ndocument.body.appendChild(container);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"document-fragments-for-performance",children:"Document Fragments for Performance"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Problem: Multiple DOM Manipulations"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// SLOW: Each appendChild causes reflow\nconst container = document.getElementById('container');\nfor (let i = 0; i < 1000; i++) {\n    const div = document.createElement('div');\n    div.textContent = `Item ${i}`;\n    container.appendChild(div); // Reflow on each iteration!\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution: Document Fragment"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// FAST: Only one reflow at the end\nconst container = document.getElementById('container');\nconst fragment = document.createDocumentFragment();\n\nfor (let i = 0; i < 1000; i++) {\n    const div = document.createElement('div');\n    div.textContent = `Item ${i}`;\n    fragment.appendChild(div); // No reflow\n}\n\ncontainer.appendChild(fragment); // Single reflow\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Advanced Fragment Usage"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class DOMBatchProcessor {\n    constructor() {\n        this.fragment = document.createDocumentFragment();\n        this.operations = [];\n    }\n    \n    // Queue element creation\n    createElement(tagName, options = {}) {\n        const element = ElementFactory.create(tagName, options);\n        this.fragment.appendChild(element);\n        return element;\n    }\n    \n    // Queue existing element\n    addElement(element) {\n        this.fragment.appendChild(element);\n        return this;\n    }\n    \n    // Commit all changes at once\n    commitTo(container) {\n        container.appendChild(this.fragment);\n        this.fragment = document.createDocumentFragment(); // Reset\n        return this;\n    }\n    \n    // Create multiple similar elements\n    createMultiple(count, tagName, optionsGenerator) {\n        for (let i = 0; i < count; i++) {\n            const options = typeof optionsGenerator === 'function' \n                ? optionsGenerator(i) \n                : optionsGenerator;\n            this.createElement(tagName, options);\n        }\n        return this;\n    }\n}\n\n// Usage\nconst processor = new DOMBatchProcessor();\n\nprocessor\n    .createMultiple(100, 'div', (index) => ({\n        textContent: `Item ${index}`,\n        properties: { className: 'list-item' },\n        attributes: { 'data-index': index }\n    }))\n    .commitTo(document.getElementById('list'));\n"})}),"\n",(0,i.jsx)(n.h2,{id:"event-system-deep-dive",children:"Event System Deep Dive"}),"\n",(0,i.jsx)(n.h3,{id:"event-flow-capturing-target-bubbling",children:"Event Flow: Capturing, Target, Bubbling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Event Flow Phases:\n\nPhase 1: CAPTURING (top-down)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502            document                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502           html              \u2502 \u2190\u2500\u2500\u253c\u2500\u2500 Event travels down\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502    \u2502\n\u2502  \u2502  \u2502        body         \u2502 \u2190\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524\n\u2502  \u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502    \u2502    \u2502\n\u2502  \u2502  \u2502  \u2502    div      \u2502 \u2190\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524\n\u2502  \u2502  \u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2510    \u2502    \u2502    \u2502    \u2502\n\u2502  \u2502  \u2502  \u2502  \u2502 btn \u2502 \u2190\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2518\n\u2502  \u2502  \u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2518    \u2502    \u2502    \u2502\n\u2502  \u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502    \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nPhase 2: TARGET\nButton receives the event\n\nPhase 3: BUBBLING (bottom-up)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502            document                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502           html              \u2502 \u2190\u2500\u2500\u253c\u2500\u2500 Event bubbles up\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502    \u2502\n\u2502  \u2502  \u2502        body         \u2502 \u2190\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524\n\u2502  \u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502    \u2502    \u2502\n\u2502  \u2502  \u2502  \u2502    div      \u2502 \u2190\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524\n\u2502  \u2502  \u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2510    \u2502    \u2502    \u2502    \u2502\n\u2502  \u2502  \u2502  \u2502  \u2502 btn \u2502 \u2190\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2518\n\u2502  \u2502  \u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2518    \u2502    \u2502    \u2502\n\u2502  \u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502    \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h3,{id:"event-handling-patterns",children:"Event Handling Patterns"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Event Delegation"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Instead of adding listeners to many elements\ndocument.querySelectorAll('.button').forEach(button => {\n    button.addEventListener('click', handleButtonClick); // Many listeners\n});\n\n// Use event delegation on parent\ndocument.getElementById('container').addEventListener('click', function(e) {\n    if (e.target.matches('.button')) {\n        handleButtonClick(e);\n    }\n});\n\n// Advanced event delegation\nclass EventDelegator {\n    constructor(container) {\n        this.container = typeof container === 'string' \n            ? document.querySelector(container) \n            : container;\n        this.handlers = new Map();\n        \n        // Single listener for all events\n        this.container.addEventListener('click', this.handleClick.bind(this));\n        this.container.addEventListener('change', this.handleChange.bind(this));\n        this.container.addEventListener('input', this.handleInput.bind(this));\n    }\n    \n    // Register handler for specific selector\n    on(eventType, selector, handler) {\n        if (!this.handlers.has(eventType)) {\n            this.handlers.set(eventType, new Map());\n        }\n        this.handlers.get(eventType).set(selector, handler);\n        return this;\n    }\n    \n    // Handle delegated events\n    handleEvent(e) {\n        const eventHandlers = this.handlers.get(e.type);\n        if (!eventHandlers) return;\n        \n        // Check each selector\n        for (const [selector, handler] of eventHandlers) {\n            const target = e.target.closest(selector);\n            if (target && this.container.contains(target)) {\n                handler.call(target, e);\n                break; // Stop at first match\n            }\n        }\n    }\n    \n    handleClick(e) { this.handleEvent(e); }\n    handleChange(e) { this.handleEvent(e); }\n    handleInput(e) { this.handleEvent(e); }\n}\n\n// Usage\nconst delegator = new EventDelegator('#app');\n\ndelegator\n    .on('click', '.btn', function(e) {\n        console.log('Button clicked:', this.textContent);\n    })\n    .on('click', '.link', function(e) {\n        e.preventDefault();\n        console.log('Link clicked:', this.href);\n    })\n    .on('input', '.search', function(e) {\n        console.log('Search input:', this.value);\n    });\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Custom Event System"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class CustomEventEmitter {\n    constructor(element) {\n        this.element = element;\n        this.listeners = new Map();\n    }\n    \n    // Emit custom event\n    emit(eventType, detail = null) {\n        const event = new CustomEvent(eventType, {\n            detail,\n            bubbles: true,\n            cancelable: true\n        });\n        \n        this.element.dispatchEvent(event);\n        return event;\n    }\n    \n    // Listen for custom events\n    on(eventType, handler, options = {}) {\n        this.element.addEventListener(eventType, handler, options);\n        \n        // Store for cleanup\n        if (!this.listeners.has(eventType)) {\n            this.listeners.set(eventType, new Set());\n        }\n        this.listeners.get(eventType).add(handler);\n        \n        return this;\n    }\n    \n    // Remove specific listener\n    off(eventType, handler) {\n        this.element.removeEventListener(eventType, handler);\n        \n        if (this.listeners.has(eventType)) {\n            this.listeners.get(eventType).delete(handler);\n        }\n        \n        return this;\n    }\n    \n    // Remove all listeners for event type\n    offAll(eventType) {\n        if (this.listeners.has(eventType)) {\n            for (const handler of this.listeners.get(eventType)) {\n                this.element.removeEventListener(eventType, handler);\n            }\n            this.listeners.delete(eventType);\n        }\n        \n        return this;\n    }\n    \n    // Cleanup all listeners\n    destroy() {\n        for (const [eventType, handlers] of this.listeners) {\n            for (const handler of handlers) {\n                this.element.removeEventListener(eventType, handler);\n            }\n        }\n        this.listeners.clear();\n    }\n}\n\n// Usage\nconst emitter = new CustomEventEmitter(document.getElementById('myComponent'));\n\n// Listen for custom events\nemitter.on('dataLoaded', (e) => {\n    console.log('Data loaded:', e.detail);\n});\n\nemitter.on('statusChanged', (e) => {\n    console.log('Status changed:', e.detail.status);\n});\n\n// Emit custom events\nemitter.emit('dataLoaded', { data: [1, 2, 3] });\nemitter.emit('statusChanged', { status: 'ready' });\n"})}),"\n",(0,i.jsx)(n.h3,{id:"event-performance-optimization",children:"Event Performance Optimization"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Throttling and Debouncing Events"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class EventOptimizer {\n    static throttle(func, limit) {\n        let inThrottle;\n        return function() {\n            const args = arguments;\n            const context = this;\n            if (!inThrottle) {\n                func.apply(context, args);\n                inThrottle = true;\n                setTimeout(() => inThrottle = false, limit);\n            }\n        };\n    }\n    \n    static debounce(func, delay) {\n        let timeoutId;\n        return function() {\n            const args = arguments;\n            const context = this;\n            clearTimeout(timeoutId);\n            timeoutId = setTimeout(() => func.apply(context, args), delay);\n        };\n    }\n    \n    // Smart event optimization\n    static optimize(element, eventType, handler, options = {}) {\n        const { throttle, debounce, passive = true } = options;\n        \n        let optimizedHandler = handler;\n        \n        if (throttle) {\n            optimizedHandler = this.throttle(handler, throttle);\n        } else if (debounce) {\n            optimizedHandler = this.debounce(handler, debounce);\n        }\n        \n        element.addEventListener(eventType, optimizedHandler, { passive });\n        \n        return () => element.removeEventListener(eventType, optimizedHandler);\n    }\n}\n\n// Usage\nconst scrollHandler = EventOptimizer.optimize(\n    window, \n    'scroll', \n    () => console.log('Scrolled!'),\n    { throttle: 100, passive: true }\n);\n\nconst searchHandler = EventOptimizer.optimize(\n    document.getElementById('search'),\n    'input',\n    (e) => performSearch(e.target.value),\n    { debounce: 300 }\n);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,i.jsx)(n.h3,{id:"reflow-and-repaint-optimization",children:"Reflow and Repaint Optimization"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Understanding Browser Rendering Pipeline:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"1. Layout (Reflow) - Calculate positions and dimensions\n2. Paint - Fill in pixels for each element\n3. Composite - Combine layers for final image\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Properties that trigger reflows:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"width"}),", ",(0,i.jsx)(n.code,{children:"height"}),", ",(0,i.jsx)(n.code,{children:"margin"}),", ",(0,i.jsx)(n.code,{children:"padding"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"border"}),", ",(0,i.jsx)(n.code,{children:"position"}),", ",(0,i.jsx)(n.code,{children:"top"}),", ",(0,i.jsx)(n.code,{children:"left"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"font-size"}),", ",(0,i.jsx)(n.code,{children:"line-height"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"display"}),", ",(0,i.jsx)(n.code,{children:"float"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Properties that only trigger repaints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"color"}),", ",(0,i.jsx)(n.code,{children:"background-color"})]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"visibility"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"outline"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Properties that only trigger composite:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"transform"}),", ",(0,i.jsx)(n.code,{children:"opacity"})]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"filter"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimization Strategies:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Batch DOM Reads and Writes"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// BAD: Causes multiple reflows\nfunction badExample() {\n    const element = document.getElementById('myDiv');\n    \n    element.style.height = '100px';  // Write - triggers reflow\n    const height = element.offsetHeight; // Read - forces reflow\n    \n    element.style.width = '200px';   // Write - triggers reflow\n    const width = element.offsetWidth;   // Read - forces reflow\n}\n\n// GOOD: Batch reads and writes\nfunction goodExample() {\n    const element = document.getElementById('myDiv');\n    \n    // Batch all reads first\n    const currentHeight = element.offsetHeight;\n    const currentWidth = element.offsetWidth;\n    \n    // Then batch all writes\n    element.style.height = '100px';\n    element.style.width = '200px';\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Use CSS Classes Instead of Inline Styles"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// BAD: Multiple style changes\nelement.style.width = '200px';\nelement.style.height = '100px';\nelement.style.backgroundColor = 'red';\nelement.style.border = '1px solid black';\n\n// GOOD: Single class change\nelement.className = 'optimized-style';\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Virtualization for Large Lists"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class VirtualList {\n    constructor(container, items, itemHeight, visibleCount) {\n        this.container = container;\n        this.items = items;\n        this.itemHeight = itemHeight;\n        this.visibleCount = visibleCount;\n        this.scrollTop = 0;\n        \n        this.init();\n    }\n    \n    init() {\n        // Create container for all items (sets scroll height)\n        this.totalHeight = this.items.length * this.itemHeight;\n        this.container.style.height = `${this.visibleCount * this.itemHeight}px`;\n        this.container.style.overflow = 'auto';\n        \n        // Create viewport\n        this.viewport = document.createElement('div');\n        this.viewport.style.height = `${this.totalHeight}px`;\n        this.viewport.style.position = 'relative';\n        \n        // Create visible items container\n        this.visibleContainer = document.createElement('div');\n        this.visibleContainer.style.position = 'absolute';\n        this.visibleContainer.style.top = '0';\n        this.visibleContainer.style.width = '100%';\n        \n        this.viewport.appendChild(this.visibleContainer);\n        this.container.appendChild(this.viewport);\n        \n        // Handle scrolling\n        this.container.addEventListener('scroll', () => {\n            this.scrollTop = this.container.scrollTop;\n            this.render();\n        });\n        \n        this.render();\n    }\n    \n    render() {\n        const startIndex = Math.floor(this.scrollTop / this.itemHeight);\n        const endIndex = Math.min(\n            startIndex + this.visibleCount + 1,\n            this.items.length\n        );\n        \n        // Clear current items\n        this.visibleContainer.innerHTML = '';\n        \n        // Render visible items\n        for (let i = startIndex; i < endIndex; i++) {\n            const item = this.createItem(this.items[i], i);\n            item.style.position = 'absolute';\n            item.style.top = `${i * this.itemHeight}px`;\n            item.style.height = `${this.itemHeight}px`;\n            this.visibleContainer.appendChild(item);\n        }\n    }\n    \n    createItem(data, index) {\n        const item = document.createElement('div');\n        item.textContent = `Item ${index}: ${data}`;\n        item.style.border = '1px solid #ccc';\n        item.style.padding = '10px';\n        return item;\n    }\n}\n\n// Usage for 10,000 items (only renders visible ones)\nconst items = Array.from({ length: 10000 }, (_, i) => `Data ${i}`);\nconst virtualList = new VirtualList(\n    document.getElementById('list-container'),\n    items,\n    50, // item height\n    20  // visible count\n);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"modern-dom-apis",children:"Modern DOM APIs"}),"\n",(0,i.jsx)(n.h3,{id:"intersection-observer",children:"Intersection Observer"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Observing element visibility:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class VisibilityManager {\n    constructor() {\n        this.observers = new Map();\n    }\n    \n    observe(element, callback, options = {}) {\n        const defaultOptions = {\n            root: null,\n            rootMargin: '0px',\n            threshold: 0.1\n        };\n        \n        const finalOptions = { ...defaultOptions, ...options };\n        \n        const observer = new IntersectionObserver((entries) => {\n            entries.forEach(entry => {\n                callback(entry.target, entry.isIntersecting, entry);\n            });\n        }, finalOptions);\n        \n        observer.observe(element);\n        this.observers.set(element, observer);\n        \n        return () => this.unobserve(element);\n    }\n    \n    unobserve(element) {\n        const observer = this.observers.get(element);\n        if (observer) {\n            observer.unobserve(element);\n            this.observers.delete(element);\n        }\n    }\n    \n    disconnect() {\n        for (const observer of this.observers.values()) {\n            observer.disconnect();\n        }\n        this.observers.clear();\n    }\n}\n\n// Usage: Lazy loading images\nconst visibilityManager = new VisibilityManager();\n\ndocument.querySelectorAll('img[data-src]').forEach(img => {\n    visibilityManager.observe(img, (element, isVisible) => {\n        if (isVisible) {\n            element.src = element.dataset.src;\n            element.removeAttribute('data-src');\n            visibilityManager.unobserve(element);\n        }\n    });\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"resizeobserver",children:"ResizeObserver"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Responding to element size changes:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class ResponsiveComponent {\n    constructor(element) {\n        this.element = element;\n        this.breakpoints = {\n            small: 300,\n            medium: 600,\n            large: 900\n        };\n        \n        this.init();\n    }\n    \n    init() {\n        this.resizeObserver = new ResizeObserver(entries => {\n            for (const entry of entries) {\n                this.handleResize(entry);\n            }\n        });\n        \n        this.resizeObserver.observe(this.element);\n    }\n    \n    handleResize(entry) {\n        const { width } = entry.contentRect;\n        \n        // Remove all size classes\n        this.element.classList.remove('small', 'medium', 'large');\n        \n        // Add appropriate class based on width\n        if (width < this.breakpoints.small) {\n            this.element.classList.add('small');\n        } else if (width < this.breakpoints.medium) {\n            this.element.classList.add('medium');\n        } else {\n            this.element.classList.add('large');\n        }\n        \n        // Emit custom event\n        this.element.dispatchEvent(new CustomEvent('sizeChanged', {\n            detail: { width, height: entry.contentRect.height }\n        }));\n    }\n    \n    destroy() {\n        this.resizeObserver.disconnect();\n    }\n}\n\n// Usage\nconst responsiveComponent = new ResponsiveComponent(\n    document.getElementById('responsive-element')\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"mutationobserver",children:"MutationObserver"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Watching DOM changes:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class DOMWatcher {\n    constructor() {\n        this.observers = new Map();\n    }\n    \n    watch(target, callback, options = {}) {\n        const defaultOptions = {\n            childList: true,\n            subtree: false,\n            attributes: false,\n            attributeOldValue: false,\n            characterData: false,\n            characterDataOldValue: false\n        };\n        \n        const finalOptions = { ...defaultOptions, ...options };\n        \n        const observer = new MutationObserver((mutations) => {\n            callback(mutations, observer);\n        });\n        \n        observer.observe(target, finalOptions);\n        this.observers.set(target, observer);\n        \n        return () => this.unwatch(target);\n    }\n    \n    unwatch(target) {\n        const observer = this.observers.get(target);\n        if (observer) {\n            observer.disconnect();\n            this.observers.delete(target);\n        }\n    }\n    \n    disconnect() {\n        for (const observer of this.observers.values()) {\n            observer.disconnect();\n        }\n        this.observers.clear();\n    }\n}\n\n// Usage: Auto-save when content changes\nconst watcher = new DOMWatcher();\n\nwatcher.watch(\n    document.getElementById('editor'),\n    (mutations) => {\n        mutations.forEach(mutation => {\n            if (mutation.type === 'childList' || mutation.type === 'characterData') {\n                console.log('Content changed, auto-saving...');\n                autoSave();\n            }\n        });\n    },\n    {\n        childList: true,\n        subtree: true,\n        characterData: true\n    }\n);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"interview-questions--answers",children:"Interview Questions & Answers"}),"\n",(0,i.jsxs)(n.h3,{id:"q1-whats-the-difference-between-innerhtml-textcontent-and-innertext",children:["Q1: What's the difference between ",(0,i.jsx)(n.code,{children:"innerHTML"}),", ",(0,i.jsx)(n.code,{children:"textContent"}),", and ",(0,i.jsx)(n.code,{children:"innerText"}),"?"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"innerHTML"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Gets/sets HTML content including tags"}),"\n",(0,i.jsx)(n.li,{children:"Parses HTML and creates DOM nodes"}),"\n",(0,i.jsx)(n.li,{children:"Can execute scripts (security risk)"}),"\n",(0,i.jsx)(n.li,{children:"Triggers reflow and repaint"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"textContent"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Gets/sets only text content"}),"\n",(0,i.jsx)(n.li,{children:"Ignores HTML tags"}),"\n",(0,i.jsx)(n.li,{children:"Includes hidden elements"}),"\n",(0,i.jsx)(n.li,{children:"Faster than innerText"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"innerText"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Gets/sets visible text content"}),"\n",(0,i.jsx)(n.li,{children:"Respects styling (hidden elements ignored)"}),"\n",(0,i.jsx)(n.li,{children:"Triggers reflow to calculate visibility"}),"\n",(0,i.jsx)(n.li,{children:"Slower than textContent"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const div = document.createElement('div');\ndiv.innerHTML = '<span style=\"display:none\">Hidden</span><strong>Visible</strong>';\n\nconsole.log(div.innerHTML);    // '<span style=\"display:none\">Hidden</span><strong>Visible</strong>'\nconsole.log(div.textContent);  // 'HiddenVisible'\nconsole.log(div.innerText);    // 'Visible' (hidden span ignored)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"q2-explain-event-bubbling-and-capturing-with-an-example",children:"Q2: Explain event bubbling and capturing with an example."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,i.jsx)(n.p,{children:"Event propagation occurs in three phases:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Capturing phase"}),": Event travels from document to target"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Target phase"}),": Event reaches the target element"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Bubbling phase"}),": Event travels from target back to document"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<div id="outer">\n    <div id="inner">\n        <button id="button">Click me</button>\n    </div>\n</div>\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Capturing listeners (third parameter = true)\ndocument.getElementById('outer').addEventListener('click', () => {\n    console.log('Outer captured');\n}, true);\n\ndocument.getElementById('inner').addEventListener('click', () => {\n    console.log('Inner captured');\n}, true);\n\n// Bubbling listeners (default)\ndocument.getElementById('button').addEventListener('click', () => {\n    console.log('Button clicked');\n});\n\ndocument.getElementById('inner').addEventListener('click', () => {\n    console.log('Inner bubbled');\n});\n\ndocument.getElementById('outer').addEventListener('click', () => {\n    console.log('Outer bubbled');\n});\n\n// When button is clicked, output:\n// Outer captured\n// Inner captured\n// Button clicked\n// Inner bubbled\n// Outer bubbled\n"})}),"\n",(0,i.jsx)(n.h3,{id:"q3-how-would-you-implement-efficient-dom-manipulation-for-adding-1000-elements",children:"Q3: How would you implement efficient DOM manipulation for adding 1000 elements?"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bad approach (causes 1000 reflows):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const container = document.getElementById('container');\nfor (let i = 0; i < 1000; i++) {\n    const div = document.createElement('div');\n    div.textContent = `Item ${i}`;\n    container.appendChild(div); // Reflow on each append\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Good approaches:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Document Fragment:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const container = document.getElementById('container');\nconst fragment = document.createDocumentFragment();\n\nfor (let i = 0; i < 1000; i++) {\n    const div = document.createElement('div');\n    div.textContent = `Item ${i}`;\n    fragment.appendChild(div);\n}\n\ncontainer.appendChild(fragment); // Single reflow\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. innerHTML with array join:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const container = document.getElementById('container');\nconst html = [];\n\nfor (let i = 0; i < 1000; i++) {\n    html.push(`<div>Item ${i}</div>`);\n}\n\ncontainer.innerHTML = html.join(''); // Single reflow\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Template strings:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const container = document.getElementById('container');\nconst items = Array.from({ length: 1000 }, (_, i) => `<div>Item ${i}</div>`);\ncontainer.innerHTML = items.join('');\n"})}),"\n",(0,i.jsx)(n.h3,{id:"q4-what-are-the-performance-implications-of-different-dom-querying-methods",children:"Q4: What are the performance implications of different DOM querying methods?"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Performance ranking (fastest to slowest):"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"getElementById()"})," - O(1) hash lookup"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"document.getElementById('myId'); // Fastest\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"getElementsByTagName()"})," - Optimized native implementation"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"document.getElementsByTagName('div'); // Fast, returns live collection\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"getElementsByClassName()"})," - Optimized for classes"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"document.getElementsByClassName('myClass'); // Fast, returns live collection\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"querySelector()"})," - CSS selector engine (returns first match)"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"document.querySelector('.myClass'); // Slower, more flexible\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"5",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"querySelectorAll()"})," - CSS selector engine (returns all matches)"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"document.querySelectorAll('.myClass'); // Slowest, most flexible\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimization strategies:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Cache DOM references"}),"\n",(0,i.jsx)(n.li,{children:"Use specific selectors"}),"\n",(0,i.jsx)(n.li,{children:"Limit scope with context"}),"\n",(0,i.jsx)(n.li,{children:"Prefer native methods for simple selections"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"q5-how-do-you-prevent-memory-leaks-in-dom-manipulation",children:"Q5: How do you prevent memory leaks in DOM manipulation?"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Common causes and solutions:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Event listeners not removed:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// PROBLEM: Memory leak\nfunction attachHandler() {\n    const button = document.getElementById('button');\n    const data = new Array(1000000); // Large data\n    \n    button.addEventListener('click', function() {\n        console.log(data.length); // Keeps data in memory\n    });\n}\n\n// SOLUTION: Proper cleanup\nfunction attachHandler() {\n    const button = document.getElementById('button');\n    \n    function clickHandler() {\n        console.log('Clicked');\n    }\n    \n    button.addEventListener('click', clickHandler);\n    \n    // Return cleanup function\n    return () => {\n        button.removeEventListener('click', clickHandler);\n    };\n}\n\nconst cleanup = attachHandler();\n// Later: cleanup();\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Circular references:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// PROBLEM: Circular reference\nconst element = document.getElementById('myElement');\nelement.myProperty = {\n    element: element, // Circular reference\n    data: new Array(1000000)\n};\n\n// SOLUTION: Use WeakMap\nconst elementData = new WeakMap();\nelementData.set(element, {\n    data: new Array(1000000)\n});\n// When element is removed, data is automatically garbage collected\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Detached DOM nodes:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// PROBLEM: References to removed DOM nodes\nconst cache = [];\nfunction cacheElement() {\n    const element = document.querySelector('.temp');\n    cache.push(element); // Keeps element in memory even after removal\n}\n\n// SOLUTION: Clear references\nfunction clearCache() {\n    cache.length = 0;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"This comprehensive guide covers DOM manipulation from fundamental concepts to advanced optimization techniques, providing the deep understanding needed for senior frontend engineering interviews."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var i=t(6540);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);