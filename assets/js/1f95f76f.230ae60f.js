"use strict";(self.webpackChunkfrontend_interview_guide=self.webpackChunkfrontend_interview_guide||[]).push([[437],{5299:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"frontend/coding-problems/virtual-scrolling","title":"Problem 4: Virtual Scrolling Implementation","description":"Problem Description","source":"@site/docs/frontend/coding-problems/04-virtual-scrolling.md","sourceDirName":"frontend/coding-problems","slug":"/frontend/coding-problems/virtual-scrolling","permalink":"/interview/docs/frontend/coding-problems/virtual-scrolling","draft":false,"unlisted":false,"editUrl":"https://github.com/Nhi4912/interview/tree/main/docs/frontend/coding-problems/04-virtual-scrolling.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"frontendSidebar","previous":{"title":"React Form Validation with Custom Hooks","permalink":"/interview/docs/frontend/coding-problems/react-form-validation"},"next":{"title":"Problem 5: Simple State Management System","permalink":"/interview/docs/frontend/coding-problems/state-management"}}');var s=t(4848),r=t(8453);const l={},o="Problem 4: Virtual Scrolling Implementation",a={},h=[{value:"Problem Description",id:"problem-description",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Solution",id:"solution",level:2},{value:"CSS Styling",id:"css-styling",level:2},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Dynamic Height Support",id:"dynamic-height-support",level:3},{value:"Search and Filter Support",id:"search-and-filter-support",level:3},{value:"Performance Optimizations",id:"performance-optimizations",level:2},{value:"Memory Management",id:"memory-management",level:3},{value:"Key Features",id:"key-features",level:2},{value:"Usage Examples",id:"usage-examples",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"problem-4-virtual-scrolling-implementation",children:"Problem 4: Virtual Scrolling Implementation"})}),"\n",(0,s.jsx)(n.h2,{id:"problem-description",children:"Problem Description"}),"\n",(0,s.jsx)(n.p,{children:"Implement virtual scrolling for a large list of items to improve performance when dealing with thousands of records."}),"\n",(0,s.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Handle thousands of items efficiently"}),"\n",(0,s.jsx)(n.li,{children:"Maintain smooth scrolling"}),"\n",(0,s.jsx)(n.li,{children:"Support dynamic item heights"}),"\n",(0,s.jsx)(n.li,{children:"Implement proper recycling"}),"\n",(0,s.jsx)(n.li,{children:"Handle scroll events optimally"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'class VirtualScroller {\n  constructor(container, options = {}) {\n    this.container = container;\n    this.itemHeight = options.itemHeight || 50;\n    this.overscan = options.overscan || 5;\n    this.items = [];\n    this.visibleItems = new Map();\n    this.scrollTop = 0;\n    this.containerHeight = 0;\n    this.totalHeight = 0;\n\n    this.init();\n  }\n\n  init() {\n    this.setupContainer();\n    this.attachEventListeners();\n    this.updateDimensions();\n  }\n\n  setupContainer() {\n    this.container.innerHTML = `\n      <div class="virtual-scroller">\n        <div class="virtual-scroller-content"></div>\n        <div class="virtual-scroller-spacer"></div>\n      </div>\n    `;\n\n    this.content = this.container.querySelector(".virtual-scroller-content");\n    this.spacer = this.container.querySelector(".virtual-scroller-spacer");\n  }\n\n  attachEventListeners() {\n    let ticking = false;\n\n    this.container.addEventListener("scroll", () => {\n      if (!ticking) {\n        requestAnimationFrame(() => {\n          this.handleScroll();\n          ticking = false;\n        });\n        ticking = true;\n      }\n    });\n\n    window.addEventListener("resize", () => {\n      this.updateDimensions();\n      this.render();\n    });\n  }\n\n  handleScroll() {\n    const newScrollTop = this.container.scrollTop;\n    if (Math.abs(newScrollTop - this.scrollTop) > this.itemHeight / 2) {\n      this.scrollTop = newScrollTop;\n      this.render();\n    }\n  }\n\n  updateDimensions() {\n    this.containerHeight = this.container.clientHeight;\n    this.totalHeight = this.items.length * this.itemHeight;\n    this.spacer.style.height = `${this.totalHeight}px`;\n  }\n\n  setItems(items) {\n    this.items = items;\n    this.updateDimensions();\n    this.render();\n  }\n\n  render() {\n    const startIndex = Math.floor(this.scrollTop / this.itemHeight);\n    const endIndex = Math.min(\n      startIndex +\n        Math.ceil(this.containerHeight / this.itemHeight) +\n        this.overscan,\n      this.items.length\n    );\n\n    const startIndexWithOverscan = Math.max(0, startIndex - this.overscan);\n    const endIndexWithOverscan = Math.min(\n      this.items.length,\n      endIndex + this.overscan\n    );\n\n    // Remove items that are no longer visible\n    for (const [index, element] of this.visibleItems) {\n      if (index < startIndexWithOverscan || index >= endIndexWithOverscan) {\n        element.remove();\n        this.visibleItems.delete(index);\n      }\n    }\n\n    // Add new visible items\n    for (let i = startIndexWithOverscan; i < endIndexWithOverscan; i++) {\n      if (!this.visibleItems.has(i)) {\n        const element = this.renderItem(this.items[i], i);\n        element.style.position = "absolute";\n        element.style.top = `${i * this.itemHeight}px`;\n        element.style.width = "100%";\n        element.style.height = `${this.itemHeight}px`;\n\n        this.content.appendChild(element);\n        this.visibleItems.set(i, element);\n      }\n    }\n  }\n\n  renderItem(item, index) {\n    const element = document.createElement("div");\n    element.className = "virtual-item";\n    element.innerHTML = `\n      <div class="item-content">\n        <span class="item-index">${index + 1}</span>\n        <span class="item-text">${item.text}</span>\n      </div>\n    `;\n    return element;\n  }\n\n  scrollToIndex(index) {\n    const scrollTop = index * this.itemHeight;\n    this.container.scrollTop = scrollTop;\n  }\n\n  getVisibleRange() {\n    const startIndex = Math.floor(this.scrollTop / this.itemHeight);\n    const endIndex = Math.min(\n      startIndex + Math.ceil(this.containerHeight / this.itemHeight),\n      this.items.length\n    );\n    return { startIndex, endIndex };\n  }\n}\n\n// Usage\nconst container = document.getElementById("virtual-scroll-container");\nconst virtualScroller = new VirtualScroller(container, {\n  itemHeight: 60,\n  overscan: 10,\n});\n\n// Generate large dataset\nconst items = Array.from({ length: 10000 }, (_, i) => ({\n  id: i,\n  text: `Item ${\n    i + 1\n  } - Lorem ipsum dolor sit amet, consectetur adipiscing elit.`,\n}));\n\nvirtualScroller.setItems(items);\n'})}),"\n",(0,s.jsx)(n.h2,{id:"css-styling",children:"CSS Styling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".virtual-scroller {\n  position: relative;\n  height: 100%;\n  overflow: hidden;\n}\n\n.virtual-scroller-content {\n  position: relative;\n  width: 100%;\n}\n\n.virtual-scroller-spacer {\n  width: 100%;\n}\n\n.virtual-item {\n  border-bottom: 1px solid #eee;\n  background: white;\n  transition: background-color 0.2s;\n}\n\n.virtual-item:hover {\n  background-color: #f8f9fa;\n}\n\n.item-content {\n  padding: 16px;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.item-index {\n  font-weight: 600;\n  color: #007bff;\n  min-width: 40px;\n}\n\n.item-text {\n  color: #333;\n  line-height: 1.4;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,s.jsx)(n.h3,{id:"dynamic-height-support",children:"Dynamic Height Support"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'class DynamicVirtualScroller extends VirtualScroller {\n  constructor(container, options = {}) {\n    super(container, options);\n    this.itemHeights = new Map();\n    this.estimatedHeight = options.estimatedHeight || 50;\n  }\n\n  updateItemHeight(index, height) {\n    this.itemHeights.set(index, height);\n    this.updateTotalHeight();\n    this.render();\n  }\n\n  updateTotalHeight() {\n    this.totalHeight = Array.from(\n      { length: this.items.length },\n      (_, i) => this.itemHeights.get(i) || this.estimatedHeight\n    ).reduce((sum, height) => sum + height, 0);\n\n    this.spacer.style.height = `${this.totalHeight}px`;\n  }\n\n  getItemTop(index) {\n    let top = 0;\n    for (let i = 0; i < index; i++) {\n      top += this.itemHeights.get(i) || this.estimatedHeight;\n    }\n    return top;\n  }\n\n  render() {\n    const visibleRange = this.getVisibleRange();\n    const startIndex = Math.max(0, visibleRange.startIndex - this.overscan);\n    const endIndex = Math.min(\n      this.items.length,\n      visibleRange.endIndex + this.overscan\n    );\n\n    // Remove items that are no longer visible\n    for (const [index, element] of this.visibleItems) {\n      if (index < startIndex || index >= endIndex) {\n        element.remove();\n        this.visibleItems.delete(index);\n      }\n    }\n\n    // Add new visible items\n    for (let i = startIndex; i < endIndex; i++) {\n      if (!this.visibleItems.has(i)) {\n        const element = this.renderItem(this.items[i], i);\n        element.style.position = "absolute";\n        element.style.top = `${this.getItemTop(i)}px`;\n        element.style.width = "100%";\n\n        this.content.appendChild(element);\n        this.visibleItems.set(i, element);\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"search-and-filter-support",children:"Search and Filter Support"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'class SearchableVirtualScroller extends VirtualScroller {\n  constructor(container, options = {}) {\n    super(container, options);\n    this.filteredItems = [];\n    this.searchTerm = "";\n  }\n\n  search(term) {\n    this.searchTerm = term.toLowerCase();\n    this.filteredItems = this.items.filter((item) =>\n      item.text.toLowerCase().includes(this.searchTerm)\n    );\n    this.updateDimensions();\n    this.render();\n  }\n\n  updateDimensions() {\n    this.containerHeight = this.container.clientHeight;\n    this.totalHeight = this.filteredItems.length * this.itemHeight;\n    this.spacer.style.height = `${this.totalHeight}px`;\n  }\n\n  render() {\n    const startIndex = Math.floor(this.scrollTop / this.itemHeight);\n    const endIndex = Math.min(\n      startIndex +\n        Math.ceil(this.containerHeight / this.itemHeight) +\n        this.overscan,\n      this.filteredItems.length\n    );\n\n    const startIndexWithOverscan = Math.max(0, startIndex - this.overscan);\n    const endIndexWithOverscan = Math.min(\n      this.filteredItems.length,\n      endIndex + this.overscan\n    );\n\n    // Remove items that are no longer visible\n    for (const [index, element] of this.visibleItems) {\n      if (index < startIndexWithOverscan || index >= endIndexWithOverscan) {\n        element.remove();\n        this.visibleItems.delete(index);\n      }\n    }\n\n    // Add new visible items\n    for (let i = startIndexWithOverscan; i < endIndexWithOverscan; i++) {\n      if (!this.visibleItems.has(i)) {\n        const element = this.renderItem(this.filteredItems[i], i);\n        element.style.position = "absolute";\n        element.style.top = `${i * this.itemHeight}px`;\n        element.style.width = "100%";\n        element.style.height = `${this.itemHeight}px`;\n\n        this.content.appendChild(element);\n        this.visibleItems.set(i, element);\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"performance-optimizations",children:"Performance Optimizations"}),"\n",(0,s.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'class OptimizedVirtualScroller extends VirtualScroller {\n  constructor(container, options = {}) {\n    super(container, options);\n    this.elementPool = [];\n    this.maxPoolSize = options.maxPoolSize || 100;\n  }\n\n  getElementFromPool() {\n    if (this.elementPool.length > 0) {\n      return this.elementPool.pop();\n    }\n    return document.createElement("div");\n  }\n\n  returnElementToPool(element) {\n    if (this.elementPool.length < this.maxPoolSize) {\n      element.innerHTML = "";\n      element.className = "";\n      element.style.cssText = "";\n      this.elementPool.push(element);\n    }\n  }\n\n  render() {\n    // Implementation with element recycling\n    const visibleRange = this.getVisibleRange();\n\n    // Remove invisible items and return to pool\n    for (const [index, element] of this.visibleItems) {\n      if (\n        index < visibleRange.startIndex - this.overscan ||\n        index >= visibleRange.endIndex + this.overscan\n      ) {\n        this.returnElementToPool(element);\n        this.visibleItems.delete(index);\n      }\n    }\n\n    // Add visible items\n    for (\n      let i = visibleRange.startIndex - this.overscan;\n      i < visibleRange.endIndex + this.overscan;\n      i++\n    ) {\n      if (i >= 0 && i < this.items.length && !this.visibleItems.has(i)) {\n        const element = this.getElementFromPool();\n        this.renderItem(this.items[i], i, element);\n        element.style.position = "absolute";\n        element.style.top = `${i * this.itemHeight}px`;\n        element.style.width = "100%";\n        element.style.height = `${this.itemHeight}px`;\n\n        this.content.appendChild(element);\n        this.visibleItems.set(i, element);\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Efficient Rendering"}),": Only renders visible items plus overscan"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Smooth Scrolling"}),": Uses requestAnimationFrame for optimal performance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Memory Management"}),": Recycles DOM elements to reduce memory usage"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dynamic Heights"}),": Support for variable item heights"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Search Integration"}),": Filter items while maintaining performance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Responsive Design"}),": Adapts to container size changes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Accessibility"}),": Maintains proper focus management"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Error Handling"}),": Graceful handling of edge cases"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// Basic usage\nconst basicScroller = new VirtualScroller(container, {\n  itemHeight: 60,\n  overscan: 10,\n});\n\n// With search\nconst searchableScroller = new SearchableVirtualScroller(container, {\n  itemHeight: 60,\n  overscan: 10,\n});\n\nsearchableScroller.search("lorem");\n\n// With dynamic heights\nconst dynamicScroller = new DynamicVirtualScroller(container, {\n  estimatedHeight: 50,\n  overscan: 10,\n});\n\n// With optimization\nconst optimizedScroller = new OptimizedVirtualScroller(container, {\n  itemHeight: 60,\n  overscan: 10,\n  maxPoolSize: 100,\n});\n'})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var i=t(6540);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);