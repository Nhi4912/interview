"use strict";(self.webpackChunkfrontend_interview_guide=self.webpackChunkfrontend_interview_guide||[]).push([[283],{3613:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>a,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"frontend/tools/README","title":"Tools & Build Systems Interview Preparation","description":"Table of Contents","source":"@site/docs/frontend/tools/README.md","sourceDirName":"frontend/tools","slug":"/frontend/tools/","permalink":"/interview/docs/frontend/tools/","draft":false,"unlisted":false,"editUrl":"https://github.com/Nhi4912/interview/tree/main/docs/frontend/tools/README.md","tags":[],"version":"current","frontMatter":{},"sidebar":"frontendSidebar","previous":{"title":"Advanced Frontend Topics","permalink":"/interview/docs/frontend/advanced/"},"next":{"title":"Frontend Projects & Practice Guide","permalink":"/interview/docs/frontend/projects/"}}');var r=s(4848),t=s(8453);const o={},l="Tools & Build Systems Interview Preparation",a={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Core Concepts",id:"core-concepts",level:2},{value:"Build Tools Fundamentals",id:"build-tools-fundamentals",level:3},{value:"Modern Build Features",id:"modern-build-features",level:3},{value:"Advanced Topics",id:"advanced-topics",level:2},{value:"Build Performance",id:"build-performance",level:3},{value:"Development Experience",id:"development-experience",level:3},{value:"Common Interview Questions &amp; Answers",id:"common-interview-questions--answers",level:2},{value:"Build Tools Questions",id:"build-tools-questions",level:3},{value:"Advanced Questions",id:"advanced-questions",level:3},{value:"Practical Problems &amp; Solutions",id:"practical-problems--solutions",level:2},{value:"Problem 1: Create a Custom Webpack Loader",id:"problem-1-create-a-custom-webpack-loader",level:3},{value:"Problem 2: Implement a Build Pipeline with Gulp",id:"problem-2-implement-a-build-pipeline-with-gulp",level:3},{value:"Problem 3: Create a Custom Babel Plugin",id:"problem-3-create-a-custom-babel-plugin",level:3},{value:"Problem 4: Implement a Custom ESLint Rule",id:"problem-4-implement-a-custom-eslint-rule",level:3},{value:"Problem 5: Create a Build Performance Monitor",id:"problem-5-create-a-build-performance-monitor",level:3},{value:"Build Optimization Techniques",id:"build-optimization-techniques",level:2},{value:"Webpack Optimization",id:"webpack-optimization",level:3},{value:"Vite Configuration",id:"vite-configuration",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Performance",id:"performance",level:3},{value:"Development Experience",id:"development-experience-1",level:3},{value:"Production Optimization",id:"production-optimization",level:3},{value:"Resources",id:"resources",level:2},{value:"Documentation",id:"documentation",level:3},{value:"Tools",id:"tools",level:3},{value:"Practice Platforms",id:"practice-platforms",level:3}];function d(n){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"tools--build-systems-interview-preparation",children:"Tools & Build Systems Interview Preparation"})}),"\n",(0,r.jsx)(e.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#core-concepts",children:"Core Concepts"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#build-tools",children:"Build Tools"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#package-managers",children:"Package Managers"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#development-tools",children:"Development Tools"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#testing-tools",children:"Testing Tools"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#deployment-tools",children:"Deployment Tools"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#common-interview-questions",children:"Common Interview Questions"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#practice-problems",children:"Practice Problems"})}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,r.jsx)(e.h3,{id:"build-tools-fundamentals",children:"Build Tools Fundamentals"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Bundlers"}),": Webpack, Vite, Rollup, Parcel"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Transpilers"}),": Babel, TypeScript, SWC"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Package Managers"}),": npm, yarn, pnpm"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Task Runners"}),": npm scripts, Gulp, Grunt"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Development Servers"}),": Hot reload, HMR, proxy"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"modern-build-features",children:"Modern Build Features"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Tree Shaking"}),": Dead code elimination"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Code Splitting"}),": Dynamic imports, chunking"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Module Federation"}),": Micro-frontend architecture"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Source Maps"}),": Debugging support"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Asset Optimization"}),": Minification, compression"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"advanced-topics",children:"Advanced Topics"}),"\n",(0,r.jsx)(e.h3,{id:"build-performance",children:"Build Performance"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Incremental Builds"}),": Only rebuild changed files"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Parallel Processing"}),": Multi-threading builds"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Caching Strategies"}),": Persistent cache, build cache"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Lazy Loading"}),": On-demand module loading"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Bundle Analysis"}),": Size optimization"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"development-experience",children:"Development Experience"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Hot Module Replacement"}),": Instant updates"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Fast Refresh"}),": React component updates"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Error Overlay"}),": In-browser error display"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Source Maps"}),": Debug original code"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Environment Variables"}),": Configuration management"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"common-interview-questions--answers",children:"Common Interview Questions & Answers"}),"\n",(0,r.jsx)(e.h3,{id:"build-tools-questions",children:"Build Tools Questions"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Q: What's the difference between Webpack and Vite?"}),"\nA:\n",(0,r.jsx)(e.strong,{children:"Webpack"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Bundles everything at build time"}),"\n",(0,r.jsx)(e.li,{children:"Slower development startup"}),"\n",(0,r.jsx)(e.li,{children:"More configuration options"}),"\n",(0,r.jsx)(e.li,{children:"Better for complex applications"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Vite"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Uses native ES modules in development"}),"\n",(0,r.jsx)(e.li,{children:"Instant server startup"}),"\n",(0,r.jsx)(e.li,{children:"Faster hot reload"}),"\n",(0,r.jsx)(e.li,{children:"Simpler configuration"}),"\n",(0,r.jsx)(e.li,{children:"Better for modern applications"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Q: Explain tree shaking and how it works."}),"\nA: Tree shaking eliminates dead code by analyzing import/export statements:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// Only used exports are included in bundle\nimport { add, subtract } from \"./math\";\n\nconsole.log(add(1, 2)); // Only 'add' function is included\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Q: How does code splitting work in modern bundlers?"}),"\nA: Code splitting divides bundles into smaller chunks:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'// Dynamic import creates separate chunk\nconst LazyComponent = React.lazy(() => import("./LazyComponent"));\n\n// Route-based splitting\nconst HomePage = React.lazy(() => import("./pages/HomePage"));\n'})}),"\n",(0,r.jsx)(e.h3,{id:"advanced-questions",children:"Advanced Questions"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Q: How would you optimize a large webpack bundle?"}),"\nA: Multiple optimization strategies:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'// webpack.config.js\nmodule.exports = {\n  optimization: {\n    splitChunks: {\n      chunks: "all",\n      cacheGroups: {\n        vendor: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          name: "vendors",\n          chunks: "all",\n        },\n        common: {\n          name: "common",\n          minChunks: 2,\n          chunks: "all",\n        },\n      },\n    },\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        terserOptions: {\n          compress: {\n            drop_console: true,\n          },\n        },\n      }),\n    ],\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: "babel-loader",\n          options: {\n            presets: ["@babel/preset-env"],\n            plugins: ["@babel/plugin-transform-runtime"],\n          },\n        },\n      },\n    ],\n  },\n};\n'})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Q: How would you implement Module Federation?"}),"\nA: Module Federation allows sharing code between applications:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'// Host application (webpack.config.js)\nconst ModuleFederationPlugin = require("webpack/lib/container/ModuleFederationPlugin");\n\nmodule.exports = {\n  plugins: [\n    new ModuleFederationPlugin({\n      name: "host",\n      remotes: {\n        remote: "remote@http://localhost:3001/remoteEntry.js",\n      },\n      shared: {\n        react: { singleton: true },\n        "react-dom": { singleton: true },\n      },\n    }),\n  ],\n};\n\n// Remote application\nmodule.exports = {\n  plugins: [\n    new ModuleFederationPlugin({\n      name: "remote",\n      filename: "remoteEntry.js",\n      exposes: {\n        "./Button": "./src/components/Button",\n      },\n      shared: {\n        react: { singleton: true },\n        "react-dom": { singleton: true },\n      },\n    }),\n  ],\n};\n\n// Usage in host\nconst RemoteButton = React.lazy(() => import("remote/Button"));\n'})}),"\n",(0,r.jsx)(e.h2,{id:"practical-problems--solutions",children:"Practical Problems & Solutions"}),"\n",(0,r.jsx)(e.h3,{id:"problem-1-create-a-custom-webpack-loader",children:"Problem 1: Create a Custom Webpack Loader"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Challenge"}),": Build a webpack loader that processes custom file types."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'// custom-loader.js\nmodule.exports = function (source) {\n  const callback = this.async();\n\n  // Get options\n  const options = this.getOptions();\n\n  // Process the source\n  let processedSource = source;\n\n  // Example: Replace placeholders\n  if (options.replacements) {\n    Object.entries(options.replacements).forEach(([key, value]) => {\n      processedSource = processedSource.replace(\n        new RegExp(`\\\\{\\\\{${key}\\\\}\\\\}`, "g"),\n        value\n      );\n    });\n  }\n\n  // Example: Add metadata\n  if (options.addMetadata) {\n    processedSource = `/* Generated at ${new Date().toISOString()} */\\n${processedSource}`;\n  }\n\n  // Example: Transform content\n  if (options.transform) {\n    processedSource = options.transform(processedSource);\n  }\n\n  // Return processed source\n  callback(null, processedSource);\n};\n\n// webpack.config.js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.custom$/,\n        use: [\n          {\n            loader: path.resolve("./custom-loader.js"),\n            options: {\n              replacements: {\n                API_URL: "https://api.example.com",\n                VERSION: "1.0.0",\n              },\n              addMetadata: true,\n              transform: (source) => source.toUpperCase(),\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n'})}),"\n",(0,r.jsx)(e.h3,{id:"problem-2-implement-a-build-pipeline-with-gulp",children:"Problem 2: Implement a Build Pipeline with Gulp"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Challenge"}),": Create a Gulp build system for a modern web application."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'// gulpfile.js\nconst gulp = require("gulp");\nconst sass = require("gulp-sass")(require("sass"));\nconst autoprefixer = require("gulp-autoprefixer");\nconst uglify = require("gulp-uglify");\nconst imagemin = require("gulp-imagemin");\nconst browserSync = require("browser-sync").create();\nconst del = require("del");\nconst webpack = require("webpack-stream");\n\n// Clean build directory\nfunction clean() {\n  return del(["dist/**/*"]);\n}\n\n// Process SCSS\nfunction styles() {\n  return gulp\n    .src("src/styles/**/*.scss")\n    .pipe(sass({ outputStyle: "compressed" }).on("error", sass.logError))\n    .pipe(autoprefixer())\n    .pipe(gulp.dest("dist/css"))\n    .pipe(browserSync.stream());\n}\n\n// Process JavaScript with Webpack\nfunction scripts() {\n  return gulp\n    .src("src/js/index.js")\n    .pipe(\n      webpack({\n        mode: "production",\n        output: {\n          filename: "bundle.js",\n        },\n        module: {\n          rules: [\n            {\n              test: /\\.js$/,\n              exclude: /node_modules/,\n              use: {\n                loader: "babel-loader",\n                options: {\n                  presets: ["@babel/preset-env"],\n                },\n              },\n            },\n          ],\n        },\n      })\n    )\n    .pipe(gulp.dest("dist/js"))\n    .pipe(browserSync.stream());\n}\n\n// Optimize images\nfunction images() {\n  return gulp\n    .src("src/images/**/*")\n    .pipe(\n      imagemin([\n        imagemin.gifsicle({ interlaced: true }),\n        imagemin.mozjpeg({ quality: 75, progressive: true }),\n        imagemin.optipng({ optimizationLevel: 5 }),\n        imagemin.svgo({\n          plugins: [{ removeViewBox: true }, { cleanupIDs: false }],\n        }),\n      ])\n    )\n    .pipe(gulp.dest("dist/images"));\n}\n\n// Copy HTML files\nfunction html() {\n  return gulp\n    .src("src/**/*.html")\n    .pipe(gulp.dest("dist"))\n    .pipe(browserSync.stream());\n}\n\n// Watch for changes\nfunction watch() {\n  browserSync.init({\n    server: {\n      baseDir: "./dist",\n    },\n  });\n\n  gulp.watch("src/styles/**/*.scss", styles);\n  gulp.watch("src/js/**/*.js", scripts);\n  gulp.watch("src/images/**/*", images);\n  gulp.watch("src/**/*.html", html);\n}\n\n// Development build\nconst dev = gulp.series(\n  clean,\n  gulp.parallel(styles, scripts, images, html),\n  watch\n);\n\n// Production build\nconst build = gulp.series(clean, gulp.parallel(styles, scripts, images, html));\n\n// Export tasks\nexports.clean = clean;\nexports.styles = styles;\nexports.scripts = scripts;\nexports.images = images;\nexports.html = html;\nexports.watch = watch;\nexports.dev = dev;\nexports.build = build;\nexports.default = dev;\n'})}),"\n",(0,r.jsx)(e.h3,{id:"problem-3-create-a-custom-babel-plugin",children:"Problem 3: Create a Custom Babel Plugin"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Challenge"}),": Build a Babel plugin that transforms code for specific use cases."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// babel-plugin-transform-logger.js\nmodule.exports = function({ types: t }) {\n  return {\n    visitor: {\n      // Transform console.log calls\n      CallExpression(path) {\n        const { node } = path;\n\n        if (\n          t.isMemberExpression(node.callee) &&\n          t.isIdentifier(node.callee.object, { name: 'console' }) &&\n          t.isIdentifier(node.callee.property, { name: 'log' })\n        ) {\n          // Add timestamp and file information\n          const timestamp = t.stringLiteral(new Date().toISOString());\n          const filename = t.stringLiteral(this.file.opts.filename || 'unknown');\n\n          const newArgs = [\n            timestamp,\n            t.stringLiteral('[' + filename + ']'),\n            ...node.arguments\n          ];\n\n          path.replaceWith(\n            t.callExpression(\n              t.memberExpression(\n                t.identifier('console'),\n                t.identifier('log')\n              ),\n              newArgs\n            )\n          );\n        }\n      },\n\n      // Transform function declarations to add logging\n      FunctionDeclaration(path) {\n        const { node } = path;\n\n        if (node.id) {\n          // Add function entry logging\n          const logStatement = t.expressionStatement(\n            t.callExpression(\n              t.memberExpression(\n                t.identifier('console'),\n                t.identifier('log')\n              ),\n              [\n                t.stringLiteral(`Entering function: ${node.id.name}`),\n                ...node.params.map(param =>\n                  t.objectProperty(\n                    t.identifier(param.name),\n                    t.identifier(param.name)\n                  )\n                )\n              ]\n            )\n          );\n\n          if (node.body.type === 'BlockStatement') {\n            node.body.body.unshift(logStatement);\n          }\n        }\n      },\n\n      // Transform arrow functions\n      ArrowFunctionExpression(path) {\n        const { node } = path;\n\n        // Add performance measurement for arrow functions\n        if (path.parent.type === 'VariableDeclarator' && path.parent.id) {\n          const functionName = path.parent.id.name;\n\n          const performanceStart = t.expressionStatement(\n            t.assignmentExpression(\n              '=',\n              t.memberExpression(\n                t.identifier('performance'),\n                t.identifier('mark')\n              ),\n              t.callExpression(\n                t.memberExpression(\n                  t.identifier('performance'),\n                  t.identifier('mark')\n                ),\n                [t.stringLiteral(`${functionName}-start`)]\n              )\n            )\n          );\n\n          const performanceEnd = t.expressionStatement(\n            t.callExpression(\n              t.memberExpression(\n                t.identifier('performance'),\n                t.identifier('mark')\n              ),\n              [t.stringLiteral(`${functionName}-end`)]\n            )\n          );\n\n          if (node.body.type === 'BlockStatement') {\n            node.body.body.unshift(performanceStart);\n            node.body.body.push(performanceEnd);\n          }\n        }\n      }\n    }\n  };\n};\n\n// Usage in .babelrc\n{\n  \"plugins\": [\"./babel-plugin-transform-logger.js\"]\n}\n\n// Example transformation\n// Before:\nfunction add(a, b) {\n  return a + b;\n}\n\n// After:\nfunction add(a, b) {\n  console.log(\"Entering function: add\", { a, b });\n  return a + b;\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"problem-4-implement-a-custom-eslint-rule",children:"Problem 4: Implement a Custom ESLint Rule"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Challenge"}),": Create an ESLint rule for enforcing coding standards."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'// eslint-plugin-custom-rules.js\nmodule.exports = {\n  rules: {\n    "no-console-in-production": {\n      meta: {\n        type: "suggestion",\n        docs: {\n          description: "Disallow console statements in production code",\n          category: "Best Practices",\n          recommended: true,\n        },\n        fixable: null,\n        schema: [],\n      },\n      create(context) {\n        return {\n          CallExpression(node) {\n            if (\n              node.callee.type === "MemberExpression" &&\n              node.callee.object.name === "console"\n            ) {\n              context.report({\n                node,\n                message:\n                  "Console statements are not allowed in production code",\n              });\n            }\n          },\n        };\n      },\n    },\n\n    "prefer-const-over-let": {\n      meta: {\n        type: "suggestion",\n        docs: {\n          description: "Prefer const over let when variable is not reassigned",\n          category: "Best Practices",\n          recommended: true,\n        },\n        fixable: "code",\n        schema: [],\n      },\n      create(context) {\n        return {\n          VariableDeclaration(node) {\n            if (node.kind === "let") {\n              node.declarations.forEach((declarator) => {\n                if (declarator.id.type === "Identifier") {\n                  const variable = context\n                    .getScope()\n                    .variables.find((v) => v.name === declarator.id.name);\n\n                  if (\n                    variable &&\n                    !variable.references.some((ref) => ref.isWrite())\n                  ) {\n                    context.report({\n                      node,\n                      message:\n                        "Use const instead of let for variables that are not reassigned",\n                      fix(fixer) {\n                        return fixer.replaceText(\n                          node,\n                          node.sourceCode.getText(node).replace("let", "const")\n                        );\n                      },\n                    });\n                  }\n                }\n              });\n            }\n          },\n        };\n      },\n    },\n\n    "no-magic-numbers": {\n      meta: {\n        type: "suggestion",\n        docs: {\n          description: "Disallow magic numbers without named constants",\n          category: "Best Practices",\n          recommended: true,\n        },\n        fixable: null,\n        schema: [\n          {\n            type: "object",\n            properties: {\n              ignore: {\n                type: "array",\n                items: { type: "number" },\n              },\n            },\n          },\n        ],\n      },\n      create(context) {\n        const options = context.options[0] || {};\n        const ignore = options.ignore || [0, 1, -1];\n\n        return {\n          Literal(node) {\n            if (\n              typeof node.value === "number" &&\n              !ignore.includes(node.value) &&\n              node.parent.type !== "VariableDeclarator"\n            ) {\n              context.report({\n                node,\n                message: `Magic number ${node.value} should be defined as a named constant`,\n              });\n            }\n          },\n        };\n      },\n    },\n  },\n};\n\n// Usage in .eslintrc.js\nmodule.exports = {\n  plugins: ["custom-rules"],\n  rules: {\n    "custom-rules/no-console-in-production": "error",\n    "custom-rules/prefer-const-over-let": "warn",\n    "custom-rules/no-magic-numbers": ["error", { ignore: [0, 1, -1, 100] }],\n  },\n};\n'})}),"\n",(0,r.jsx)(e.h3,{id:"problem-5-create-a-build-performance-monitor",children:"Problem 5: Create a Build Performance Monitor"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Challenge"}),": Build a system to monitor and optimize build performance."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'// build-performance-monitor.js\nconst fs = require("fs");\nconst path = require("path");\nconst { performance } = require("perf_hooks");\n\nclass BuildPerformanceMonitor {\n  constructor(options = {}) {\n    this.options = {\n      outputFile: "build-metrics.json",\n      threshold: {\n        buildTime: 30000, // 30 seconds\n        bundleSize: 1024 * 1024, // 1MB\n        memoryUsage: 500 * 1024 * 1024, // 500MB\n      },\n      ...options,\n    };\n\n    this.metrics = {\n      startTime: null,\n      endTime: null,\n      duration: 0,\n      memoryUsage: [],\n      bundleSizes: {},\n      warnings: [],\n      errors: [],\n    };\n\n    this.startTime = null;\n  }\n\n  start() {\n    this.startTime = performance.now();\n    this.metrics.startTime = new Date().toISOString();\n    this.metrics.memoryUsage = [];\n\n    // Monitor memory usage\n    this.memoryInterval = setInterval(() => {\n      const usage = process.memoryUsage();\n      this.metrics.memoryUsage.push({\n        timestamp: Date.now(),\n        heapUsed: usage.heapUsed,\n        heapTotal: usage.heapTotal,\n        external: usage.external,\n      });\n    }, 1000);\n\n    console.log("\ud83d\ude80 Build performance monitoring started");\n  }\n\n  end() {\n    if (!this.startTime) return;\n\n    this.metrics.endTime = new Date().toISOString();\n    this.metrics.duration = performance.now() - this.startTime;\n\n    if (this.memoryInterval) {\n      clearInterval(this.memoryInterval);\n    }\n\n    this.analyzePerformance();\n    this.saveMetrics();\n    this.generateReport();\n  }\n\n  addBundleSize(name, size) {\n    this.metrics.bundleSizes[name] = size;\n  }\n\n  addWarning(warning) {\n    this.metrics.warnings.push({\n      message: warning,\n      timestamp: Date.now(),\n    });\n  }\n\n  addError(error) {\n    this.metrics.errors.push({\n      message: error,\n      timestamp: Date.now(),\n    });\n  }\n\n  analyzePerformance() {\n    const { duration, bundleSizes, memoryUsage } = this.metrics;\n    const { threshold } = this.options;\n\n    // Check build time\n    if (duration > threshold.buildTime) {\n      console.warn(\n        `\u26a0\ufe0f  Build time (${duration.toFixed(2)}ms) exceeds threshold (${\n          threshold.buildTime\n        }ms)`\n      );\n    }\n\n    // Check bundle sizes\n    Object.entries(bundleSizes).forEach(([name, size]) => {\n      if (size > threshold.bundleSize) {\n        console.warn(\n          `\u26a0\ufe0f  Bundle ${name} size (${(size / 1024 / 1024).toFixed(\n            2\n          )}MB) exceeds threshold (${threshold.bundleSize / 1024 / 1024}MB)`\n        );\n      }\n    });\n\n    // Check memory usage\n    const maxMemory = Math.max(...memoryUsage.map((m) => m.heapUsed));\n    if (maxMemory > threshold.memoryUsage) {\n      console.warn(\n        `\u26a0\ufe0f  Peak memory usage (${(maxMemory / 1024 / 1024).toFixed(\n          2\n        )}MB) exceeds threshold (${threshold.memoryUsage / 1024 / 1024}MB)`\n      );\n    }\n  }\n\n  saveMetrics() {\n    const outputPath = path.resolve(this.options.outputFile);\n    fs.writeFileSync(outputPath, JSON.stringify(this.metrics, null, 2));\n    console.log(`\ud83d\udcca Build metrics saved to ${outputPath}`);\n  }\n\n  generateReport() {\n    const { duration, bundleSizes, memoryUsage, warnings, errors } =\n      this.metrics;\n\n    console.log("\\n\ud83d\udcc8 Build Performance Report");\n    console.log("========================");\n    console.log(`\u23f1\ufe0f  Build Duration: ${duration.toFixed(2)}ms`);\n    console.log(`\ud83d\udce6 Bundle Sizes:`);\n\n    Object.entries(bundleSizes).forEach(([name, size]) => {\n      console.log(`   ${name}: ${(size / 1024).toFixed(2)}KB`);\n    });\n\n    if (memoryUsage.length > 0) {\n      const avgMemory =\n        memoryUsage.reduce((sum, m) => sum + m.heapUsed, 0) /\n        memoryUsage.length;\n      const maxMemory = Math.max(...memoryUsage.map((m) => m.heapUsed));\n\n      console.log(`\ud83d\udcbe Memory Usage:`);\n      console.log(`   Average: ${(avgMemory / 1024 / 1024).toFixed(2)}MB`);\n      console.log(`   Peak: ${(maxMemory / 1024 / 1024).toFixed(2)}MB`);\n    }\n\n    if (warnings.length > 0) {\n      console.log(`\u26a0\ufe0f  Warnings: ${warnings.length}`);\n    }\n\n    if (errors.length > 0) {\n      console.log(`\u274c Errors: ${errors.length}`);\n    }\n  }\n\n  getMetrics() {\n    return { ...this.metrics };\n  }\n}\n\n// Webpack plugin\nclass BuildPerformancePlugin {\n  constructor(options = {}) {\n    this.monitor = new BuildPerformanceMonitor(options);\n  }\n\n  apply(compiler) {\n    compiler.hooks.beforeRun.tap("BuildPerformancePlugin", () => {\n      this.monitor.start();\n    });\n\n    compiler.hooks.done.tap("BuildPerformancePlugin", (stats) => {\n      // Add bundle sizes\n      const assets = stats.compilation.assets;\n      Object.keys(assets).forEach((name) => {\n        if (name.endsWith(".js") || name.endsWith(".css")) {\n          this.monitor.addBundleSize(name, assets[name].size());\n        }\n      });\n\n      // Add warnings and errors\n      stats.compilation.warnings.forEach((warning) => {\n        this.monitor.addWarning(warning.message);\n      });\n\n      stats.compilation.errors.forEach((error) => {\n        this.monitor.addError(error.message);\n      });\n\n      this.monitor.end();\n    });\n  }\n}\n\n// Usage in webpack.config.js\nconst BuildPerformancePlugin = require("./build-performance-monitor");\n\nmodule.exports = {\n  // ... webpack config\n  plugins: [\n    new BuildPerformancePlugin({\n      threshold: {\n        buildTime: 20000,\n        bundleSize: 512 * 1024,\n        memoryUsage: 300 * 1024 * 1024,\n      },\n    }),\n  ],\n};\n'})}),"\n",(0,r.jsx)(e.h2,{id:"build-optimization-techniques",children:"Build Optimization Techniques"}),"\n",(0,r.jsx)(e.h3,{id:"webpack-optimization",children:"Webpack Optimization"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'// webpack.config.js\nmodule.exports = {\n  optimization: {\n    splitChunks: {\n      chunks: "all",\n      cacheGroups: {\n        vendor: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          name: "vendors",\n          chunks: "all",\n        },\n        common: {\n          name: "common",\n          minChunks: 2,\n          chunks: "all",\n        },\n      },\n    },\n    runtimeChunk: "single",\n    moduleIds: "deterministic",\n    chunkIds: "deterministic",\n  },\n  cache: {\n    type: "filesystem",\n    buildDependencies: {\n      config: [__filename],\n    },\n  },\n};\n'})}),"\n",(0,r.jsx)(e.h3,{id:"vite-configuration",children:"Vite Configuration"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'// vite.config.js\nimport { defineConfig } from "vite";\nimport react from "@vitejs/plugin-react";\n\nexport default defineConfig({\n  plugins: [react()],\n  build: {\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          vendor: ["react", "react-dom"],\n          utils: ["lodash", "axios"],\n        },\n      },\n    },\n    chunkSizeWarningLimit: 1000,\n  },\n  server: {\n    hmr: {\n      overlay: false,\n    },\n  },\n});\n'})}),"\n",(0,r.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(e.h3,{id:"performance",children:"Performance"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Use persistent caching"}),"\n",(0,r.jsx)(e.li,{children:"Implement incremental builds"}),"\n",(0,r.jsx)(e.li,{children:"Parallelize build tasks"}),"\n",(0,r.jsx)(e.li,{children:"Optimize bundle splitting"}),"\n",(0,r.jsx)(e.li,{children:"Monitor build metrics"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"development-experience-1",children:"Development Experience"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Fast hot reload"}),"\n",(0,r.jsx)(e.li,{children:"Clear error messages"}),"\n",(0,r.jsx)(e.li,{children:"Source maps for debugging"}),"\n",(0,r.jsx)(e.li,{children:"Environment-specific configs"}),"\n",(0,r.jsx)(e.li,{children:"Automated testing integration"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"production-optimization",children:"Production Optimization"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Tree shaking and dead code elimination"}),"\n",(0,r.jsx)(e.li,{children:"Asset compression and optimization"}),"\n",(0,r.jsx)(e.li,{children:"CDN integration"}),"\n",(0,r.jsx)(e.li,{children:"Cache busting strategies"}),"\n",(0,r.jsx)(e.li,{children:"Bundle analysis and monitoring"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"resources",children:"Resources"}),"\n",(0,r.jsx)(e.h3,{id:"documentation",children:"Documentation"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://webpack.js.org/",children:"Webpack Documentation"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://vitejs.dev/",children:"Vite Documentation"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://babeljs.io/",children:"Babel Documentation"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://eslint.org/",children:"ESLint Documentation"})}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"tools",children:"Tools"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://github.com/webpack-contrib/webpack-bundle-analyzer",children:"Webpack Bundle Analyzer"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://github.com/btd/rollup-plugin-visualizer",children:"Vite Bundle Analyzer"})}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://bundlephobia.com/",children:"Bundlephobia"})," - Package size analysis"]}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://chrisbateman.github.io/webpack-visualizer/",children:"Webpack Visualizer"})}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"practice-platforms",children:"Practice Platforms"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://github.com/webpack/webpack/tree/master/examples",children:"Webpack Examples"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://github.com/vitejs/vite/tree/main/packages/create-vite/template-vanilla",children:"Vite Examples"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://github.com/jamiebuilds/babel-handbook",children:"Babel Plugin Handbook"})}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.em,{children:"This guide covers essential build tools and systems for frontend interviews, including practical problems and advanced techniques commonly asked at companies companies."})})]})}function m(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>o,x:()=>l});var i=s(6540);const r={},t=i.createContext(r);function o(n){const e=i.useContext(t);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),i.createElement(t.Provider,{value:e},n.children)}}}]);