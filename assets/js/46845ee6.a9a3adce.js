"use strict";(self.webpackChunkfrontend_interview_guide=self.webpackChunkfrontend_interview_guide||[]).push([[806],{4700:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var s=t(4848),r=t(8453);const i={},o="Testing Interview Preparation",a={id:"frontend/testing/README",title:"Testing Interview Preparation",description:"Core Concepts",source:"@site/docs/frontend/testing/README.md",sourceDirName:"frontend/testing",slug:"/frontend/testing/",permalink:"/interview/docs/frontend/testing/",draft:!1,unlisted:!1,editUrl:"https://github.com/Nhi4912/interview/tree/main/docs/frontend/testing/README.md",tags:[],version:"current",frontMatter:{},sidebar:"frontendSidebar",previous:{title:"Problem: API Integration and Error Handling",permalink:"/interview/docs/frontend/networking/api-integration"},next:{title:"Problem: Component Unit Testing",permalink:"/interview/docs/frontend/testing/component-testing"}},c={},l=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"Testing Fundamentals",id:"testing-fundamentals",level:3},{value:"Testing Pyramid",id:"testing-pyramid",level:3},{value:"Advanced Topics",id:"advanced-topics",level:2},{value:"Modern Testing Tools",id:"modern-testing-tools",level:3},{value:"Testing Strategies",id:"testing-strategies",level:3},{value:"Common Interview Questions &amp; Answers",id:"common-interview-questions--answers",level:2},{value:"Testing Questions",id:"testing-questions",level:3},{value:"Advanced Interview Questions",id:"advanced-interview-questions",level:2},{value:"Practical Problems &amp; Solutions",id:"practical-problems--solutions",level:2},{value:"Problem 1: Test a Form Component with Validation",id:"problem-1-test-a-form-component-with-validation",level:3},{value:"Problem 2: Test a Custom Hook with Async Operations",id:"problem-2-test-a-custom-hook-with-async-operations",level:3},{value:"Problem 3: E2E Testing with Cypress",id:"problem-3-e2e-testing-with-cypress",level:3},{value:"Problem 4: Visual Regression Testing",id:"problem-4-visual-regression-testing",level:3},{value:"Testing Best Practices",id:"testing-best-practices",level:2},{value:"Test Organization",id:"test-organization",level:3},{value:"Mocking Strategies",id:"mocking-strategies",level:3},{value:"Performance Testing",id:"performance-testing",level:3},{value:"Resources",id:"resources",level:2},{value:"Documentation",id:"documentation",level:3},{value:"Tools",id:"tools",level:3},{value:"Practice Platforms",id:"practice-platforms",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"testing-interview-preparation",children:"Testing Interview Preparation"}),"\n",(0,s.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,s.jsx)(n.h3,{id:"testing-fundamentals",children:"Testing Fundamentals"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Unit Testing"}),": Testing individual functions and components in isolation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Integration Testing"}),": Testing how components work together"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"End-to-End Testing"}),": Testing complete user workflows"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Visual Testing"}),": Testing UI appearance and layout"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance Testing"}),": Testing application performance under load"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"testing-pyramid",children:"Testing Pyramid"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Unit Tests"}),": Fast, cheap, many (70%)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Integration Tests"}),": Medium speed, cost, quantity (20%)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"E2E Tests"}),": Slow, expensive, few (10%)"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"advanced-topics",children:"Advanced Topics"}),"\n",(0,s.jsx)(n.h3,{id:"modern-testing-tools",children:"Modern Testing Tools"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Jest"}),": JavaScript testing framework"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"React Testing Library"}),": Component testing utilities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cypress"}),": E2E testing framework"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Playwright"}),": Cross-browser testing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Storybook"}),": Component development and testing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"MSW"}),": API mocking and testing"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"testing-strategies",children:"Testing Strategies"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test-Driven Development (TDD)"}),": Write tests before implementation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Behavior-Driven Development (BDD)"}),": Write tests in natural language"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Visual Regression Testing"}),": Compare screenshots for UI changes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Accessibility Testing"}),": Ensure applications are accessible"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance Testing"}),": Monitor and test application performance"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"common-interview-questions--answers",children:"Common Interview Questions & Answers"}),"\n",(0,s.jsx)(n.h3,{id:"testing-questions",children:"Testing Questions"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Q: What's the difference between unit, integration, and E2E tests?"}),"\nA:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Unit Tests"}),": Test individual functions/components in isolation with mocked dependencies"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Integration Tests"}),": Test how multiple components/services work together"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"E2E Tests"}),": Test complete user workflows from start to finish"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Q: How do you test React components?"}),"\nA: Using React Testing Library with user-centric testing approach:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { render, screen, fireEvent } from "@testing-library/react";\nimport userEvent from "@testing-library/user-event";\nimport Counter from "./Counter";\n\ndescribe("Counter", () => {\n  test("renders counter with initial value", () => {\n    render(<Counter initialValue={5} />);\n    expect(screen.getByText("5")).toBeInTheDocument();\n  });\n\n  test("increments counter when button is clicked", async () => {\n    const user = userEvent.setup();\n    render(<Counter initialValue={0} />);\n\n    const button = screen.getByRole("button", { name: /increment/i });\n    await user.click(button);\n\n    expect(screen.getByText("1")).toBeInTheDocument();\n  });\n\n  test("calls onIncrement callback", async () => {\n    const mockCallback = jest.fn();\n    const user = userEvent.setup();\n    render(<Counter onIncrement={mockCallback} />);\n\n    const button = screen.getByRole("button", { name: /increment/i });\n    await user.click(button);\n\n    expect(mockCallback).toHaveBeenCalledWith(1);\n  });\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Q: How do you test async operations?"}),"\nA: Using async/await and proper waiting strategies:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { render, screen, waitFor } from "@testing-library/react";\nimport { rest } from "msw";\nimport { setupServer } from "msw/node";\nimport UserProfile from "./UserProfile";\n\nconst server = setupServer(\n  rest.get("/api/user/:id", (req, res, ctx) => {\n    return res(\n      ctx.json({\n        id: req.params.id,\n        name: "John Doe",\n        email: "john@example.com",\n      })\n    );\n  })\n);\n\nbeforeAll(() => server.listen());\nafterEach(() => server.resetHandlers());\nafterAll(() => server.close());\n\ndescribe("UserProfile", () => {\n  test("loads and displays user data", async () => {\n    render(<UserProfile userId="123" />);\n\n    // Wait for loading to complete\n    await waitFor(() => {\n      expect(screen.getByText("John Doe")).toBeInTheDocument();\n    });\n\n    expect(screen.getByText("john@example.com")).toBeInTheDocument();\n  });\n\n  test("handles error state", async () => {\n    server.use(\n      rest.get("/api/user/:id", (req, res, ctx) => {\n        return res(ctx.status(500));\n      })\n    );\n\n    render(<UserProfile userId="123" />);\n\n    await waitFor(() => {\n      expect(screen.getByText(/error/i)).toBeInTheDocument();\n    });\n  });\n});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-interview-questions",children:"Advanced Interview Questions"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Q: How would you test a custom hook?"}),"\nA: Using ",(0,s.jsx)(n.code,{children:"@testing-library/react-hooks"})," or custom render function:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { renderHook, act } from "@testing-library/react";\nimport { useCounter } from "./useCounter";\n\ndescribe("useCounter", () => {\n  test("initializes with default value", () => {\n    const { result } = renderHook(() => useCounter());\n    expect(result.current.count).toBe(0);\n  });\n\n  test("increments counter", () => {\n    const { result } = renderHook(() => useCounter(5));\n\n    act(() => {\n      result.current.increment();\n    });\n\n    expect(result.current.count).toBe(6);\n  });\n\n  test("decrements counter", () => {\n    const { result } = renderHook(() => useCounter(5));\n\n    act(() => {\n      result.current.decrement();\n    });\n\n    expect(result.current.count).toBe(4);\n  });\n\n  test("resets counter", () => {\n    const { result } = renderHook(() => useCounter(5));\n\n    act(() => {\n      result.current.increment();\n      result.current.reset();\n    });\n\n    expect(result.current.count).toBe(5);\n  });\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Q: How do you test Redux actions and reducers?"}),"\nA: Testing actions and reducers separately:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { configureStore } from "@reduxjs/toolkit";\nimport counterReducer, { increment, decrement } from "./counterSlice";\n\ndescribe("counter reducer", () => {\n  test("should handle initial state", () => {\n    expect(counterReducer(undefined, { type: "unknown" })).toEqual({\n      value: 0,\n      status: "idle",\n    });\n  });\n\n  test("should handle increment", () => {\n    const initialState = { value: 0, status: "idle" };\n    const actual = counterReducer(initialState, increment());\n    expect(actual.value).toEqual(1);\n  });\n\n  test("should handle decrement", () => {\n    const initialState = { value: 1, status: "idle" };\n    const actual = counterReducer(initialState, decrement());\n    expect(actual.value).toEqual(0);\n  });\n});\n\ndescribe("counter actions", () => {\n  test("should create increment action", () => {\n    const expectedAction = {\n      type: "counter/increment",\n      payload: undefined,\n    };\n    expect(increment()).toEqual(expectedAction);\n  });\n});\n\n// Integration test with store\ndescribe("counter integration", () => {\n  let store;\n\n  beforeEach(() => {\n    store = configureStore({\n      reducer: {\n        counter: counterReducer,\n      },\n    });\n  });\n\n  test("should handle increment action", () => {\n    store.dispatch(increment());\n    const state = store.getState();\n    expect(state.counter.value).toBe(1);\n  });\n});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"practical-problems--solutions",children:"Practical Problems & Solutions"}),"\n",(0,s.jsx)(n.h3,{id:"problem-1-test-a-form-component-with-validation",children:"Problem 1: Test a Form Component with Validation"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Challenge"}),": Create comprehensive tests for a form component with validation and submission."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { render, screen, waitFor } from "@testing-library/react";\nimport userEvent from "@testing-library/user-event";\nimport { rest } from "msw";\nimport { setupServer } from "msw/node";\nimport ContactForm from "./ContactForm";\n\nconst server = setupServer(\n  rest.post("/api/contact", (req, res, ctx) => {\n    return res(ctx.json({ success: true }));\n  })\n);\n\nbeforeAll(() => server.listen());\nafterEach(() => server.resetHandlers());\nafterAll(() => server.close());\n\ndescribe("ContactForm", () => {\n  test("renders form fields", () => {\n    render(<ContactForm />);\n\n    expect(screen.getByLabelText(/name/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/email/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/message/i)).toBeInTheDocument();\n    expect(screen.getByRole("button", { name: /submit/i })).toBeInTheDocument();\n  });\n\n  test("shows validation errors for empty fields", async () => {\n    const user = userEvent.setup();\n    render(<ContactForm />);\n\n    const submitButton = screen.getByRole("button", { name: /submit/i });\n    await user.click(submitButton);\n\n    await waitFor(() => {\n      expect(screen.getByText(/name is required/i)).toBeInTheDocument();\n      expect(screen.getByText(/email is required/i)).toBeInTheDocument();\n      expect(screen.getByText(/message is required/i)).toBeInTheDocument();\n    });\n  });\n\n  test("shows validation error for invalid email", async () => {\n    const user = userEvent.setup();\n    render(<ContactForm />);\n\n    const emailInput = screen.getByLabelText(/email/i);\n    await user.type(emailInput, "invalid-email");\n\n    await waitFor(() => {\n      expect(screen.getByText(/invalid email format/i)).toBeInTheDocument();\n    });\n  });\n\n  test("submits form successfully", async () => {\n    const user = userEvent.setup();\n    const mockOnSubmit = jest.fn();\n    render(<ContactForm onSubmit={mockOnSubmit} />);\n\n    // Fill form\n    await user.type(screen.getByLabelText(/name/i), "John Doe");\n    await user.type(screen.getByLabelText(/email/i), "john@example.com");\n    await user.type(screen.getByLabelText(/message/i), "Hello world");\n\n    // Submit form\n    const submitButton = screen.getByRole("button", { name: /submit/i });\n    await user.click(submitButton);\n\n    await waitFor(() => {\n      expect(mockOnSubmit).toHaveBeenCalledWith({\n        name: "John Doe",\n        email: "john@example.com",\n        message: "Hello world",\n      });\n    });\n  });\n\n  test("handles submission error", async () => {\n    server.use(\n      rest.post("/api/contact", (req, res, ctx) => {\n        return res(ctx.status(500), ctx.json({ error: "Server error" }));\n      })\n    );\n\n    const user = userEvent.setup();\n    render(<ContactForm />);\n\n    // Fill and submit form\n    await user.type(screen.getByLabelText(/name/i), "John Doe");\n    await user.type(screen.getByLabelText(/email/i), "john@example.com");\n    await user.type(screen.getByLabelText(/message/i), "Hello world");\n\n    const submitButton = screen.getByRole("button", { name: /submit/i });\n    await user.click(submitButton);\n\n    await waitFor(() => {\n      expect(screen.getByText(/server error/i)).toBeInTheDocument();\n    });\n  });\n\n  test("disables submit button during submission", async () => {\n    server.use(\n      rest.post("/api/contact", async (req, res, ctx) => {\n        await new Promise((resolve) => setTimeout(resolve, 100));\n        return res(ctx.json({ success: true }));\n      })\n    );\n\n    const user = userEvent.setup();\n    render(<ContactForm />);\n\n    // Fill form\n    await user.type(screen.getByLabelText(/name/i), "John Doe");\n    await user.type(screen.getByLabelText(/email/i), "john@example.com");\n    await user.type(screen.getByLabelText(/message/i), "Hello world");\n\n    const submitButton = screen.getByRole("button", { name: /submit/i });\n    await user.click(submitButton);\n\n    // Button should be disabled during submission\n    expect(submitButton).toBeDisabled();\n\n    // Wait for submission to complete\n    await waitFor(() => {\n      expect(submitButton).not.toBeDisabled();\n    });\n  });\n});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"problem-2-test-a-custom-hook-with-async-operations",children:"Problem 2: Test a Custom Hook with Async Operations"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Challenge"}),": Test a custom hook that manages async data fetching and caching."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { renderHook, waitFor } from "@testing-library/react";\nimport { rest } from "msw";\nimport { setupServer } from "msw/node";\nimport { useDataFetching } from "./useDataFetching";\n\nconst server = setupServer(\n  rest.get("/api/data/:id", (req, res, ctx) => {\n    return res(\n      ctx.json({\n        id: req.params.id,\n        name: "Test Data",\n        value: 42,\n      })\n    );\n  })\n);\n\nbeforeAll(() => server.listen());\nafterEach(() => server.resetHandlers());\nafterAll(() => server.close());\n\ndescribe("useDataFetching", () => {\n  test("initializes with loading state", () => {\n    const { result } = renderHook(() => useDataFetching("123"));\n\n    expect(result.current.loading).toBe(true);\n    expect(result.current.data).toBe(null);\n    expect(result.current.error).toBe(null);\n  });\n\n  test("fetches data successfully", async () => {\n    const { result } = renderHook(() => useDataFetching("123"));\n\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false);\n    });\n\n    expect(result.current.data).toEqual({\n      id: "123",\n      name: "Test Data",\n      value: 42,\n    });\n    expect(result.current.error).toBe(null);\n  });\n\n  test("handles fetch error", async () => {\n    server.use(\n      rest.get("/api/data/:id", (req, res, ctx) => {\n        return res(ctx.status(404));\n      })\n    );\n\n    const { result } = renderHook(() => useDataFetching("999"));\n\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false);\n    });\n\n    expect(result.current.data).toBe(null);\n    expect(result.current.error).toBeTruthy();\n  });\n\n  test("caches data for same ID", async () => {\n    const { result, rerender } = renderHook(({ id }) => useDataFetching(id), {\n      initialProps: { id: "123" },\n    });\n\n    // Wait for first fetch\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false);\n    });\n\n    const firstData = result.current.data;\n\n    // Change ID and fetch new data\n    rerender({ id: "456" });\n\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false);\n    });\n\n    // Go back to first ID - should use cached data\n    rerender({ id: "123" });\n\n    expect(result.current.data).toBe(firstData);\n    expect(result.current.loading).toBe(false);\n  });\n\n  test("refreshes data when refresh function is called", async () => {\n    const { result } = renderHook(() => useDataFetching("123"));\n\n    // Wait for initial fetch\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false);\n    });\n\n    const initialData = result.current.data;\n\n    // Mock different response for refresh\n    server.use(\n      rest.get("/api/data/123", (req, res, ctx) => {\n        return res(\n          ctx.json({\n            id: "123",\n            name: "Updated Data",\n            value: 100,\n          })\n        );\n      })\n    );\n\n    // Call refresh\n    result.current.refresh();\n\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false);\n    });\n\n    expect(result.current.data).not.toEqual(initialData);\n    expect(result.current.data.name).toBe("Updated Data");\n  });\n});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"problem-3-e2e-testing-with-cypress",children:"Problem 3: E2E Testing with Cypress"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Challenge"}),": Create comprehensive E2E tests for a user authentication flow."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// cypress/e2e/auth.cy.js\ndescribe("Authentication Flow", () => {\n  beforeEach(() => {\n    cy.visit("/");\n  });\n\n  it("should display login form", () => {\n    cy.get("[data-testid=login-form]").should("be.visible");\n    cy.get("[data-testid=email-input]").should("be.visible");\n    cy.get("[data-testid=password-input]").should("be.visible");\n    cy.get("[data-testid=login-button]").should("be.visible");\n  });\n\n  it("should show validation errors for empty fields", () => {\n    cy.get("[data-testid=login-button]").click();\n\n    cy.get("[data-testid=email-error]")\n      .should("be.visible")\n      .and("contain", "Email is required");\n\n    cy.get("[data-testid=password-error]")\n      .should("be.visible")\n      .and("contain", "Password is required");\n  });\n\n  it("should show validation error for invalid email", () => {\n    cy.get("[data-testid=email-input]").type("invalid-email");\n    cy.get("[data-testid=password-input]").type("password123");\n    cy.get("[data-testid=login-button]").click();\n\n    cy.get("[data-testid=email-error]")\n      .should("be.visible")\n      .and("contain", "Invalid email format");\n  });\n\n  it("should login successfully with valid credentials", () => {\n    // Mock successful login\n    cy.intercept("POST", "/api/auth/login", {\n      statusCode: 200,\n      body: {\n        token: "fake-jwt-token",\n        user: {\n          id: 1,\n          name: "John Doe",\n          email: "john@example.com",\n        },\n      },\n    }).as("loginRequest");\n\n    cy.get("[data-testid=email-input]").type("john@example.com");\n    cy.get("[data-testid=password-input]").type("password123");\n    cy.get("[data-testid=login-button]").click();\n\n    cy.wait("@loginRequest");\n\n    // Should redirect to dashboard\n    cy.url().should("include", "/dashboard");\n    cy.get("[data-testid=user-name]").should("contain", "John Doe");\n  });\n\n  it("should show error message for invalid credentials", () => {\n    // Mock failed login\n    cy.intercept("POST", "/api/auth/login", {\n      statusCode: 401,\n      body: {\n        error: "Invalid credentials",\n      },\n    }).as("loginRequest");\n\n    cy.get("[data-testid=email-input]").type("john@example.com");\n    cy.get("[data-testid=password-input]").type("wrongpassword");\n    cy.get("[data-testid=login-button]").click();\n\n    cy.wait("@loginRequest");\n\n    cy.get("[data-testid=login-error]")\n      .should("be.visible")\n      .and("contain", "Invalid credentials");\n  });\n\n  it("should handle network errors gracefully", () => {\n    // Mock network error\n    cy.intercept("POST", "/api/auth/login", {\n      forceNetworkError: true,\n    }).as("loginRequest");\n\n    cy.get("[data-testid=email-input]").type("john@example.com");\n    cy.get("[data-testid=password-input]").type("password123");\n    cy.get("[data-testid=login-button]").click();\n\n    cy.get("[data-testid=login-error]")\n      .should("be.visible")\n      .and("contain", "Network error");\n  });\n\n  it("should navigate to registration page", () => {\n    cy.get("[data-testid=register-link]").click();\n    cy.url().should("include", "/register");\n  });\n\n  it("should remember user after page reload", () => {\n    // Mock successful login\n    cy.intercept("POST", "/api/auth/login", {\n      statusCode: 200,\n      body: {\n        token: "fake-jwt-token",\n        user: {\n          id: 1,\n          name: "John Doe",\n          email: "john@example.com",\n        },\n      },\n    }).as("loginRequest");\n\n    cy.get("[data-testid=email-input]").type("john@example.com");\n    cy.get("[data-testid=password-input]").type("password123");\n    cy.get("[data-testid=login-button]").click();\n\n    cy.wait("@loginRequest");\n\n    // Reload page\n    cy.reload();\n\n    // Should still be logged in\n    cy.url().should("include", "/dashboard");\n    cy.get("[data-testid=user-name]").should("contain", "John Doe");\n  });\n\n  it("should logout successfully", () => {\n    // Login first\n    cy.intercept("POST", "/api/auth/login", {\n      statusCode: 200,\n      body: {\n        token: "fake-jwt-token",\n        user: {\n          id: 1,\n          name: "John Doe",\n          email: "john@example.com",\n        },\n      },\n    }).as("loginRequest");\n\n    cy.get("[data-testid=email-input]").type("john@example.com");\n    cy.get("[data-testid=password-input]").type("password123");\n    cy.get("[data-testid=login-button]").click();\n\n    cy.wait("@loginRequest");\n\n    // Mock logout\n    cy.intercept("POST", "/api/auth/logout", {\n      statusCode: 200,\n    }).as("logoutRequest");\n\n    // Click logout\n    cy.get("[data-testid=logout-button]").click();\n\n    cy.wait("@logoutRequest");\n\n    // Should redirect to login page\n    cy.url().should("include", "/login");\n    cy.get("[data-testid=login-form]").should("be.visible");\n  });\n});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"problem-4-visual-regression-testing",children:"Problem 4: Visual Regression Testing"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Challenge"}),": Implement visual regression testing for UI components."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// visual-regression.test.js\nimport { render } from "@testing-library/react";\nimport { toMatchImageSnapshot } from "jest-image-snapshot";\nimport puppeteer from "puppeteer";\n\nexpect.extend({ toMatchImageSnapshot });\n\ndescribe("Visual Regression Tests", () => {\n  let browser;\n  let page;\n\n  beforeAll(async () => {\n    browser = await puppeteer.launch();\n    page = await browser.newPage();\n  });\n\n  afterAll(async () => {\n    await browser.close();\n  });\n\n  test("button component renders correctly", async () => {\n    await page.goto("http://localhost:3000/components/button");\n\n    const button = await page.$("[data-testid=primary-button]");\n    const screenshot = await button.screenshot();\n\n    expect(screenshot).toMatchImageSnapshot({\n      customSnapshotsDir: "__image_snapshots__",\n      customSnapshotIdentifier: "primary-button",\n    });\n  });\n\n  test("form component renders correctly", async () => {\n    await page.goto("http://localhost:3000/components/form");\n\n    const form = await page.$("[data-testid=contact-form]");\n    const screenshot = await form.screenshot();\n\n    expect(screenshot).toMatchImageSnapshot({\n      customSnapshotsDir: "__image_snapshots__",\n      customSnapshotIdentifier: "contact-form",\n    });\n  });\n\n  test("card component renders correctly in different states", async () => {\n    await page.goto("http://localhost:3000/components/card");\n\n    // Test default state\n    const defaultCard = await page.$("[data-testid=card-default]");\n    const defaultScreenshot = await defaultCard.screenshot();\n    expect(defaultScreenshot).toMatchImageSnapshot({\n      customSnapshotIdentifier: "card-default",\n    });\n\n    // Test hover state\n    await defaultCard.hover();\n    await page.waitForTimeout(100); // Wait for hover animation\n    const hoverScreenshot = await defaultCard.screenshot();\n    expect(hoverScreenshot).toMatchImageSnapshot({\n      customSnapshotIdentifier: "card-hover",\n    });\n\n    // Test selected state\n    await defaultCard.click();\n    const selectedScreenshot = await defaultCard.screenshot();\n    expect(selectedScreenshot).toMatchImageSnapshot({\n      customSnapshotIdentifier: "card-selected",\n    });\n  });\n\n  test("responsive design works correctly", async () => {\n    const viewports = [\n      { width: 1920, height: 1080, name: "desktop" },\n      { width: 768, height: 1024, name: "tablet" },\n      { width: 375, height: 667, name: "mobile" },\n    ];\n\n    for (const viewport of viewports) {\n      await page.setViewport(viewport);\n      await page.goto("http://localhost:3000/components/responsive");\n\n      const component = await page.$("[data-testid=responsive-component]");\n      const screenshot = await component.screenshot();\n\n      expect(screenshot).toMatchImageSnapshot({\n        customSnapshotIdentifier: `responsive-${viewport.name}`,\n      });\n    }\n  });\n});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"testing-best-practices",children:"Testing Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"test-organization",children:"Test Organization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// Component test structure\ndescribe("ComponentName", () => {\n  // Setup and teardown\n  beforeEach(() => {\n    // Setup code\n  });\n\n  afterEach(() => {\n    // Cleanup code\n  });\n\n  // Happy path tests\n  describe("when rendering normally", () => {\n    test("should render correctly", () => {\n      // Test implementation\n    });\n  });\n\n  // Edge cases\n  describe("when data is loading", () => {\n    test("should show loading state", () => {\n      // Test implementation\n    });\n  });\n\n  // Error states\n  describe("when error occurs", () => {\n    test("should show error message", () => {\n      // Test implementation\n    });\n  });\n});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"mocking-strategies",children:"Mocking Strategies"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// API mocking with MSW\nimport { rest } from "msw";\nimport { setupServer } from "msw/node";\n\nconst server = setupServer(\n  rest.get("/api/users", (req, res, ctx) => {\n    return res(\n      ctx.json([\n        { id: 1, name: "John Doe" },\n        { id: 2, name: "Jane Smith" },\n      ])\n    );\n  }),\n\n  rest.post("/api/users", (req, res, ctx) => {\n    return res(ctx.json({ id: 3, name: req.body.name }));\n  })\n);\n\n// Component mocking\njest.mock("./ExpensiveComponent", () => {\n  return function MockExpensiveComponent(props) {\n    return <div data-testid="mock-expensive">{props.children}</div>;\n  };\n});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"performance-testing",children:"Performance Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// Performance test example\ndescribe("Performance Tests", () => {\n  test("should render large list within performance budget", () => {\n    const startTime = performance.now();\n\n    render(\n      <LargeList\n        items={Array.from({ length: 1000 }, (_, i) => ({\n          id: i,\n          name: `Item ${i}`,\n        }))}\n      />\n    );\n\n    const endTime = performance.now();\n    const renderTime = endTime - startTime;\n\n    expect(renderTime).toBeLessThan(100); // 100ms budget\n  });\n\n  test("should handle rapid state updates efficiently", () => {\n    const { result } = renderHook(() => useCounter());\n\n    const startTime = performance.now();\n\n    for (let i = 0; i < 100; i++) {\n      act(() => {\n        result.current.increment();\n      });\n    }\n\n    const endTime = performance.now();\n    const updateTime = endTime - startTime;\n\n    expect(updateTime).toBeLessThan(50); // 50ms budget\n  });\n});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,s.jsx)(n.h3,{id:"documentation",children:"Documentation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://jestjs.io/docs/getting-started",children:"Jest Documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://testing-library.com/docs/react-testing-library/intro/",children:"React Testing Library"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.cypress.io/",children:"Cypress Documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://playwright.dev/",children:"Playwright Documentation"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"tools",children:"Tools"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://mswjs.io/",children:"MSW (Mock Service Worker)"})," - API mocking"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://storybook.js.org/",children:"Storybook"})," - Component development"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://percy.io/",children:"Percy"})," - Visual testing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://loki.js.org/",children:"Loki"})," - Visual regression testing"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"practice-platforms",children:"Practice Platforms"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/testing-library/react-testing-library#examples",children:"Testing Library Examples"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/cypress-io/cypress-example-recipes",children:"Cypress Examples"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/facebook/jest/tree/main/examples",children:"Jest Examples"})}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"This guide covers essential testing concepts for frontend interviews, including practical problems and advanced techniques commonly asked at Big Tech companies."})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);