"use strict";(self.webpackChunkfrontend_interview_guide=self.webpackChunkfrontend_interview_guide||[]).push([[8812],{7455:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>o});var i=r(4848),l=r(8453);const t={},s="Problem 1: Dynamic Table Generator",a={id:"frontend/coding-problems/dynamic-table",title:"Problem 1: Dynamic Table Generator",description:"Problem Description",source:"@site/docs/frontend/coding-problems/01-dynamic-table.md",sourceDirName:"frontend/coding-problems",slug:"/frontend/coding-problems/dynamic-table",permalink:"/interview/docs/frontend/coding-problems/dynamic-table",draft:!1,unlisted:!1,editUrl:"https://github.com/Nhi4912/interview/tree/main/docs/frontend/coding-problems/01-dynamic-table.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"frontendSidebar",previous:{title:"Frontend Coding Problems & Solutions",permalink:"/interview/docs/frontend/coding-problems/"},next:{title:"Debounce and Throttle Implementation",permalink:"/interview/docs/frontend/coding-problems/debounce-throttle"}},d={},o=[{value:"Problem Description",id:"problem-description",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Solution",id:"solution",level:2},{value:"CSS Styling",id:"css-styling",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Interview Deep Dive: Dynamic Table",id:"interview-deep-dive-dynamic-table",level:2},{value:"Follow-up Questions",id:"follow-up-questions",level:3},{value:"Diagram: Table Rendering Flow",id:"diagram-table-rendering-flow",level:3},{value:"Advanced Problem: Virtualized Dynamic Table (React)",id:"advanced-problem-virtualized-dynamic-table-react",level:3},{value:"System Design: Table Component API",id:"system-design-table-component-api",level:3},{value:"More Dynamic Table Interview Problems",id:"more-dynamic-table-interview-problems",level:2},{value:"Problem 2: Editable Table Cells",id:"problem-2-editable-table-cells",level:3},{value:"Problem 3: Row Selection and Bulk Actions",id:"problem-3-row-selection-and-bulk-actions",level:3},{value:"Problem 4: Column Reordering",id:"problem-4-column-reordering",level:3},{value:"Problem 5: Server-Side Pagination and Filtering",id:"problem-5-server-side-pagination-and-filtering",level:3},{value:"Problem 6: Accessibility for Dynamic Tables",id:"problem-6-accessibility-for-dynamic-tables",level:3},{value:"Diagram: Table Rendering Flow",id:"diagram-table-rendering-flow-1",level:3},{value:"Advanced Problem: Virtualized Dynamic Table (React)",id:"advanced-problem-virtualized-dynamic-table-react-1",level:3},{value:"System Design: Table Component API",id:"system-design-table-component-api-1",level:3},{value:"More Dynamic Table Interview Problems",id:"more-dynamic-table-interview-problems-1",level:2},{value:"Problem 2: Editable Table Cells",id:"problem-2-editable-table-cells-1",level:3},{value:"Problem 3: Row Selection and Bulk Actions",id:"problem-3-row-selection-and-bulk-actions-1",level:3},{value:"Problem 4: Column Reordering",id:"problem-4-column-reordering-1",level:3},{value:"Problem 5: Server-Side Pagination and Filtering",id:"problem-5-server-side-pagination-and-filtering-1",level:3},{value:"Problem 6: Accessibility for Dynamic Tables",id:"problem-6-accessibility-for-dynamic-tables-1",level:3}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"problem-1-dynamic-table-generator",children:"Problem 1: Dynamic Table Generator"}),"\n",(0,i.jsx)(n.h2,{id:"problem-description",children:"Problem Description"}),"\n",(0,i.jsx)(n.p,{children:"Create a function that generates a dynamic table from an array of objects with sorting and filtering capabilities."}),"\n",(0,i.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Accept array of objects as input"}),"\n",(0,i.jsx)(n.li,{children:"Generate table headers automatically from object keys"}),"\n",(0,i.jsx)(n.li,{children:"Support sorting by any column"}),"\n",(0,i.jsx)(n.li,{children:"Support filtering by any column"}),"\n",(0,i.jsx)(n.li,{children:"Make it responsive"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'class DynamicTable {\n  constructor(containerId, data) {\n    this.container = document.getElementById(containerId);\n    this.data = data;\n    this.currentSort = { column: null, direction: "asc" };\n    this.filters = {};\n    this.init();\n  }\n\n  init() {\n    this.render();\n    this.attachEventListeners();\n  }\n\n  render() {\n    if (!this.data.length) {\n      this.container.innerHTML = "<p>No data available</p>";\n      return;\n    }\n\n    const headers = Object.keys(this.data[0]);\n    const filteredData = this.getFilteredData();\n    const sortedData = this.getSortedData(filteredData);\n\n    const tableHTML = `\n      <div class="table-controls">\n        <div class="filters">\n          ${headers\n            .map(\n              (header) => `\n            <input \n              type="text" \n              placeholder="Filter ${header}..."\n              data-filter="${header}"\n              class="filter-input"\n            >\n          `\n            )\n            .join("")}\n        </div>\n      </div>\n      <table class="dynamic-table">\n        <thead>\n          <tr>\n            ${headers\n              .map(\n                (header) => `\n              <th data-sort="${header}" class="sortable">\n                ${header}\n                <span class="sort-indicator"></span>\n              </th>\n            `\n              )\n              .join("")}\n          </tr>\n        </thead>\n        <tbody>\n          ${sortedData\n            .map(\n              (row) => `\n            <tr>\n              ${headers\n                .map(\n                  (header) => `\n                <td>${row[header]}</td>\n              `\n                )\n                .join("")}\n            </tr>\n          `\n            )\n            .join("")}\n        </tbody>\n      </table>\n    `;\n\n    this.container.innerHTML = tableHTML;\n  }\n\n  getFilteredData() {\n    return this.data.filter((row) => {\n      return Object.keys(this.filters).every((filterKey) => {\n        const filterValue = this.filters[filterKey].toLowerCase();\n        const cellValue = String(row[filterKey]).toLowerCase();\n        return cellValue.includes(filterValue);\n      });\n    });\n  }\n\n  getSortedData(data) {\n    if (!this.currentSort.column) return data;\n\n    return [...data].sort((a, b) => {\n      const aVal = a[this.currentSort.column];\n      const bVal = b[this.currentSort.column];\n\n      if (typeof aVal === "string") {\n        return this.currentSort.direction === "asc"\n          ? aVal.localeCompare(bVal)\n          : bVal.localeCompare(aVal);\n      }\n\n      return this.currentSort.direction === "asc" ? aVal - bVal : bVal - aVal;\n    });\n  }\n\n  attachEventListeners() {\n    // Sort event listeners\n    this.container.addEventListener("click", (e) => {\n      if (e.target.closest(".sortable")) {\n        const header = e.target.closest(".sortable");\n        const column = header.dataset.sort;\n\n        if (this.currentSort.column === column) {\n          this.currentSort.direction =\n            this.currentSort.direction === "asc" ? "desc" : "asc";\n        } else {\n          this.currentSort.column = column;\n          this.currentSort.direction = "asc";\n        }\n\n        this.render();\n      }\n    });\n\n    // Filter event listeners\n    this.container.addEventListener("input", (e) => {\n      if (e.target.classList.contains("filter-input")) {\n        const filterKey = e.target.dataset.filter;\n        const filterValue = e.target.value;\n\n        if (filterValue) {\n          this.filters[filterKey] = filterValue;\n        } else {\n          delete this.filters[filterKey];\n        }\n\n        this.render();\n      }\n    });\n  }\n}\n\n// Usage\nconst sampleData = [\n  { name: "John", age: 25, city: "New York", salary: 50000 },\n  { name: "Jane", age: 30, city: "Los Angeles", salary: 60000 },\n  { name: "Bob", age: 35, city: "Chicago", salary: 55000 },\n  { name: "Alice", age: 28, city: "Boston", salary: 65000 },\n];\n\nconst table = new DynamicTable("table-container", sampleData);\n'})}),"\n",(0,i.jsx)(n.h2,{id:"css-styling",children:"CSS Styling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:'.dynamic-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 20px;\n}\n\n.dynamic-table th,\n.dynamic-table td {\n  padding: 12px;\n  text-align: left;\n  border-bottom: 1px solid #ddd;\n}\n\n.dynamic-table th {\n  background-color: #f5f5f5;\n  font-weight: bold;\n  cursor: pointer;\n  user-select: none;\n}\n\n.dynamic-table th:hover {\n  background-color: #e9e9e9;\n}\n\n.sortable {\n  position: relative;\n}\n\n.sort-indicator::after {\n  content: "\u2195";\n  position: absolute;\n  right: 8px;\n  color: #999;\n}\n\n.sortable[data-sort="name"].asc .sort-indicator::after {\n  content: "\u2191";\n  color: #007bff;\n}\n\n.sortable[data-sort="name"].desc .sort-indicator::after {\n  content: "\u2193";\n  color: #007bff;\n}\n\n.table-controls {\n  margin-bottom: 20px;\n}\n\n.filters {\n  display: flex;\n  gap: 10px;\n  flex-wrap: wrap;\n}\n\n.filter-input {\n  padding: 8px 12px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 14px;\n}\n\n@media (max-width: 768px) {\n  .dynamic-table {\n    font-size: 14px;\n  }\n\n  .dynamic-table th,\n  .dynamic-table td {\n    padding: 8px 6px;\n  }\n\n  .filters {\n    flex-direction: column;\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Automatic Header Generation"}),": Creates headers from object keys"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Sorting"}),": Click headers to sort by column"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Filtering"}),": Real-time filtering by any column"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Responsive Design"}),": Adapts to different screen sizes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance"}),": Efficient rendering and event handling"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Accessibility"}),": Proper semantic HTML and keyboard navigation"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// With custom styling\nconst customTable = new DynamicTable("custom-table", data);\n\n// With custom cell renderers\nclass CustomTable extends DynamicTable {\n  renderCell(value, column) {\n    if (column === "salary") {\n      return `$${value.toLocaleString()}`;\n    }\n    if (column === "age") {\n      return `${value} years`;\n    }\n    return value;\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"interview-deep-dive-dynamic-table",children:"Interview Deep Dive: Dynamic Table"}),"\n",(0,i.jsx)(n.h3,{id:"follow-up-questions",children:"Follow-up Questions"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"How would you add keyboard navigation for accessibility?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:'tabindex="0"'})," on rows and headers."]}),"\n",(0,i.jsx)(n.li,{children:"Add keyboard event listeners for arrow keys, Enter, and Escape."}),"\n",(0,i.jsxs)(n.li,{children:["Use ARIA roles: ",(0,i.jsx)(n.code,{children:'role="table"'}),", ",(0,i.jsx)(n.code,{children:'role="row"'}),", ",(0,i.jsx)(n.code,{children:'role="columnheader"'}),", ",(0,i.jsx)(n.code,{children:'role="cell"'}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"How would you handle large datasets (10,000+ rows)?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Implement virtual scrolling (windowing) using libraries like ",(0,i.jsx)(n.code,{children:"react-window"})," or custom logic."]}),"\n",(0,i.jsx)(n.li,{children:"Only render visible rows to improve performance."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"How would you support custom cell rendering (e.g., links, buttons, icons)?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Allow passing a ",(0,i.jsx)(n.code,{children:"renderCell"})," function as a prop or method override."]}),"\n",(0,i.jsxs)(n.li,{children:["Example: ",(0,i.jsx)(n.code,{children:"renderCell(value, column, row)"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"How would you make the table accessible for screen readers?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use semantic HTML: ",(0,i.jsx)(n.code,{children:"<table>"}),", ",(0,i.jsx)(n.code,{children:"<thead>"}),", ",(0,i.jsx)(n.code,{children:"<tbody>"}),", ",(0,i.jsx)(n.code,{children:"<th>"}),", ",(0,i.jsx)(n.code,{children:"<td>"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Add ",(0,i.jsx)(n.code,{children:'scope="col"'})," to header cells."]}),"\n",(0,i.jsx)(n.li,{children:"Provide captions and summaries if needed."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"diagram-table-rendering-flow",children:"Diagram: Table Rendering Flow"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-mermaid",children:"flowchart TD\n  A[Input Data Array] --\x3e B[Generate Headers]\n  B --\x3e C[Render Filters]\n  C --\x3e D[Apply Filters]\n  D --\x3e E[Sort Data]\n  E --\x3e F[Render Table Rows]\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"advanced-problem-virtualized-dynamic-table-react",children:"Advanced Problem: Virtualized Dynamic Table (React)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Challenge:"})," Implement a dynamic table with virtual scrolling for large datasets in React."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution Outline:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"react-window"})," or similar for windowing."]}),"\n",(0,i.jsx)(n.li,{children:"Only render visible rows."}),"\n",(0,i.jsx)(n.li,{children:"Keep sorting/filtering logic in parent component."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Sample Implementation:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'import { FixedSizeList as List } from "react-window";\n\nfunction VirtualizedTable({ data, height, rowHeight }) {\n  const headers = Object.keys(data[0] || {});\n\n  return (\n    <div style={{ width: "100%" }}>\n      <table className="dynamic-table">\n        <thead>\n          <tr>\n            {headers.map((header) => (\n              <th key={header}>{header}</th>\n            ))}\n          </tr>\n        </thead>\n      </table>\n      <List\n        height={height}\n        itemCount={data.length}\n        itemSize={rowHeight}\n        width="100%"\n      >\n        {({ index, style }) => (\n          <div style={style}>\n            <table className="dynamic-table">\n              <tbody>\n                <tr>\n                  {headers.map((header) => (\n                    <td key={header}>{data[index][header]}</td>\n                  ))}\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        )}\n      </List>\n    </div>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"system-design-table-component-api",children:"System Design: Table Component API"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"data"}),": Array of objects"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"columns"}),": Optional array of column configs (label, key, sortable, filterable, renderCell)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"onSort"}),": Callback for sort changes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"onFilter"}),": Callback for filter changes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"rowKey"}),": Function or string for unique row id"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"more-dynamic-table-interview-problems",children:"More Dynamic Table Interview Problems"}),"\n",(0,i.jsx)(n.h3,{id:"problem-2-editable-table-cells",children:"Problem 2: Editable Table Cells"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Question:"})," How would you allow users to edit table cells inline and save changes?"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution Outline:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Render each cell as a text input or select when in edit mode."}),"\n",(0,i.jsx)(n.li,{children:"Track editing state (row/column)."}),"\n",(0,i.jsx)(n.li,{children:"Save changes on blur or Enter, revert on Escape."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Sample Implementation (JS):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// In your DynamicTable class, add editing state and handlers\n// Pseudocode for cell rendering:\nrenderCell(value, rowIdx, colKey) {\n  if (this.editing && this.editing.row === rowIdx && this.editing.col === colKey) {\n    return `<input value="${value}" onblur="saveEdit()" onkeydown="handleKey(event)" />`;\n  }\n  return `<span ondblclick="startEdit(${rowIdx}, \'${colKey}\')">${value}</span>`;\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"problem-3-row-selection-and-bulk-actions",children:"Problem 3: Row Selection and Bulk Actions"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Question:"})," How would you implement row selection (single/multi) and bulk actions (delete, export)?"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution Outline:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Add a checkbox to each row and a master checkbox in the header."}),"\n",(0,i.jsx)(n.li,{children:"Track selected row IDs in state."}),"\n",(0,i.jsx)(n.li,{children:"Provide bulk action buttons (e.g., Delete Selected, Export Selected)."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Sample Implementation (JS):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Add a 'selected' property to each row or track selected IDs in a Set\n// Render checkboxes in the first column\n// Add event listeners for bulk action buttons\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"problem-4-column-reordering",children:"Problem 4: Column Reordering"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Question:"})," How would you allow users to reorder columns via drag-and-drop?"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution Outline:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use HTML5 Drag and Drop API or a library (e.g., react-beautiful-dnd)."}),"\n",(0,i.jsx)(n.li,{children:"Update the columns order in state on drop."}),"\n",(0,i.jsx)(n.li,{children:"Re-render table with new column order."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Sample Implementation (React):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"// Use react-beautiful-dnd's <DragDropContext> and <Droppable> for columns\n// On drag end, update columns array order\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"problem-5-server-side-pagination-and-filtering",children:"Problem 5: Server-Side Pagination and Filtering"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Question:"})," How would you handle tables with millions of rows (server-side pagination/filtering)?"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution Outline:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Fetch only the current page of data from the server."}),"\n",(0,i.jsx)(n.li,{children:"Send filter/sort params in API requests."}),"\n",(0,i.jsx)(n.li,{children:"Show loading indicators and handle errors."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Sample API Call:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"fetch(`/api/table?page=2&pageSize=50&sort=age&filter=city:Boston`)\n  .then((res) => res.json())\n  .then((data) => updateTable(data));\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"problem-6-accessibility-for-dynamic-tables",children:"Problem 6: Accessibility for Dynamic Tables"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Question:"})," What are the key accessibility considerations for dynamic tables?"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use semantic HTML (",(0,i.jsx)(n.code,{children:"<table>"}),", ",(0,i.jsx)(n.code,{children:"<thead>"}),", ",(0,i.jsx)(n.code,{children:"<tbody>"}),", ",(0,i.jsx)(n.code,{children:"<th>"}),", ",(0,i.jsx)(n.code,{children:"<td>"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"Add ARIA roles and properties as needed"}),"\n",(0,i.jsx)(n.li,{children:"Ensure keyboard navigation (tab, arrow keys)"}),"\n",(0,i.jsx)(n.li,{children:"Provide visible focus indicators"}),"\n",(0,i.jsx)(n.li,{children:"Announce changes to screen readers (e.g., row added/removed)"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"These additional problems cover editing, selection, column reordering, server-side data, and accessibility\u2014key areas for dynamic table interviews. Practice implementing and discussing these features!"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"diagram-table-rendering-flow-1",children:"Diagram: Table Rendering Flow"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-mermaid",children:"flowchart TD\n  A[Input Data Array] --\x3e B[Generate Headers]\n  B --\x3e C[Render Filters]\n  C --\x3e D[Apply Filters]\n  D --\x3e E[Sort Data]\n  E --\x3e F[Render Table Rows]\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"advanced-problem-virtualized-dynamic-table-react-1",children:"Advanced Problem: Virtualized Dynamic Table (React)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Challenge:"})," Implement a dynamic table with virtual scrolling for large datasets in React."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution Outline:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"react-window"})," or similar for windowing."]}),"\n",(0,i.jsx)(n.li,{children:"Only render visible rows."}),"\n",(0,i.jsx)(n.li,{children:"Keep sorting/filtering logic in parent component."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Sample Implementation:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'import { FixedSizeList as List } from "react-window";\n\nfunction VirtualizedTable({ data, height, rowHeight }) {\n  const headers = Object.keys(data[0] || {});\n\n  return (\n    <div style={{ width: "100%" }}>\n      <table className="dynamic-table">\n        <thead>\n          <tr>\n            {headers.map((header) => (\n              <th key={header}>{header}</th>\n            ))}\n          </tr>\n        </thead>\n      </table>\n      <List\n        height={height}\n        itemCount={data.length}\n        itemSize={rowHeight}\n        width="100%"\n      >\n        {({ index, style }) => (\n          <div style={style}>\n            <table className="dynamic-table">\n              <tbody>\n                <tr>\n                  {headers.map((header) => (\n                    <td key={header}>{data[index][header]}</td>\n                  ))}\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        )}\n      </List>\n    </div>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"system-design-table-component-api-1",children:"System Design: Table Component API"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"data"}),": Array of objects"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"columns"}),": Optional array of column configs (label, key, sortable, filterable, renderCell)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"onSort"}),": Callback for sort changes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"onFilter"}),": Callback for filter changes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"rowKey"}),": Function or string for unique row id"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"more-dynamic-table-interview-problems-1",children:"More Dynamic Table Interview Problems"}),"\n",(0,i.jsx)(n.h3,{id:"problem-2-editable-table-cells-1",children:"Problem 2: Editable Table Cells"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Question:"})," How would you allow users to edit table cells inline and save changes?"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution Outline:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Render each cell as a text input or select when in edit mode."}),"\n",(0,i.jsx)(n.li,{children:"Track editing state (row/column)."}),"\n",(0,i.jsx)(n.li,{children:"Save changes on blur or Enter, revert on Escape."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Sample Implementation (JS):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// In your DynamicTable class, add editing state and handlers\n// Pseudocode for cell rendering:\nrenderCell(value, rowIdx, colKey) {\n  if (this.editing && this.editing.row === rowIdx && this.editing.col === colKey) {\n    return `<input value="${value}" onblur="saveEdit()" onkeydown="handleKey(event)" />`;\n  }\n  return `<span ondblclick="startEdit(${rowIdx}, \'${colKey}\')">${value}</span>`;\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"problem-3-row-selection-and-bulk-actions-1",children:"Problem 3: Row Selection and Bulk Actions"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Question:"})," How would you implement row selection (single/multi) and bulk actions (delete, export)?"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution Outline:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Add a checkbox to each row and a master checkbox in the header."}),"\n",(0,i.jsx)(n.li,{children:"Track selected row IDs in state."}),"\n",(0,i.jsx)(n.li,{children:"Provide bulk action buttons (e.g., Delete Selected, Export Selected)."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Sample Implementation (JS):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Add a 'selected' property to each row or track selected IDs in a Set\n// Render checkboxes in the first column\n// Add event listeners for bulk action buttons\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"problem-4-column-reordering-1",children:"Problem 4: Column Reordering"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Question:"})," How would you allow users to reorder columns via drag-and-drop?"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution Outline:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use HTML5 Drag and Drop API or a library (e.g., react-beautiful-dnd)."}),"\n",(0,i.jsx)(n.li,{children:"Update the columns order in state on drop."}),"\n",(0,i.jsx)(n.li,{children:"Re-render table with new column order."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Sample Implementation (React):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"// Use react-beautiful-dnd's <DragDropContext> and <Droppable> for columns\n// On drag end, update columns array order\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"problem-5-server-side-pagination-and-filtering-1",children:"Problem 5: Server-Side Pagination and Filtering"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Question:"})," How would you handle tables with millions of rows (server-side pagination/filtering)?"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution Outline:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Fetch only the current page of data from the server."}),"\n",(0,i.jsx)(n.li,{children:"Send filter/sort params in API requests."}),"\n",(0,i.jsx)(n.li,{children:"Show loading indicators and handle errors."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Sample API Call:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"fetch(`/api/table?page=2&pageSize=50&sort=age&filter=city:Boston`)\n  .then((res) => res.json())\n  .then((data) => updateTable(data));\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"problem-6-accessibility-for-dynamic-tables-1",children:"Problem 6: Accessibility for Dynamic Tables"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Question:"})," What are the key accessibility considerations for dynamic tables?"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use semantic HTML (",(0,i.jsx)(n.code,{children:"<table>"}),", ",(0,i.jsx)(n.code,{children:"<thead>"}),", ",(0,i.jsx)(n.code,{children:"<tbody>"}),", ",(0,i.jsx)(n.code,{children:"<th>"}),", ",(0,i.jsx)(n.code,{children:"<td>"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"Add ARIA roles and properties as needed"}),"\n",(0,i.jsx)(n.li,{children:"Ensure keyboard navigation (tab, arrow keys)"}),"\n",(0,i.jsx)(n.li,{children:"Provide visible focus indicators"}),"\n",(0,i.jsx)(n.li,{children:"Announce changes to screen readers (e.g., row added/removed)"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"These additional problems cover editing, selection, column reordering, server-side data, and accessibility\u2014key areas for dynamic table interviews. Practice implementing and discussing these features!"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var i=r(6540);const l={},t=i.createContext(l);function s(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);