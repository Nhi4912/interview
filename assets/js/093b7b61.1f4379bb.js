"use strict";(self.webpackChunkfrontend_interview_guide=self.webpackChunkfrontend_interview_guide||[]).push([[9405],{7872:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var t=r(4848),s=r(8453);const i={},o="\ud83c\udf10 Browser Architecture Deep Dive",a={id:"theory-and-visuals/browser-architecture",title:"\ud83c\udf10 Browser Architecture Deep Dive",description:"\ud83d\udccb Table of Contents",source:"@site/docs/theory-and-visuals/browser-architecture.md",sourceDirName:"theory-and-visuals",slug:"/theory-and-visuals/browser-architecture",permalink:"/interview/docs/theory-and-visuals/browser-architecture",draft:!1,unlisted:!1,editUrl:"https://github.com/Nhi4912/interview/tree/main/docs/theory-and-visuals/browser-architecture.md",tags:[],version:"current",frontMatter:{},sidebar:"theorySidebar",previous:{title:"\ud83d\ude80 JavaScript Engine Deep Dive",permalink:"/interview/docs/theory-and-visuals/javascript-engine-deep-dive"},next:{title:"\ud83c\udf10 Network Protocols Deep Dive",permalink:"/interview/docs/theory-and-visuals/network-protocols-deep-dive"}},l={},c=[{value:"\ud83d\udccb Table of Contents",id:"-table-of-contents",level:2},{value:"\ud83c\udfd7\ufe0f Browser Process Model",id:"\ufe0f-browser-process-model",level:2},{value:"Multi-Process Architecture",id:"multi-process-architecture",level:3},{value:"Process Communication",id:"process-communication",level:3},{value:"\ud83c\udfa8 Rendering Pipeline",id:"-rendering-pipeline",level:2},{value:"Critical Rendering Path",id:"critical-rendering-path",level:3},{value:"Detailed Rendering Steps",id:"detailed-rendering-steps",level:3},{value:"DOM Tree Construction",id:"dom-tree-construction",level:3},{value:"CSSOM Tree Construction",id:"cssom-tree-construction",level:3},{value:"\ud83c\udf10 Network Stack",id:"-network-stack",level:2},{value:"HTTP Request/Response Flow",id:"http-requestresponse-flow",level:3},{value:"Resource Loading Pipeline",id:"resource-loading-pipeline",level:3},{value:"Network Optimization Strategies",id:"network-optimization-strategies",level:3},{value:"\ud83d\udd12 Security Model",id:"-security-model",level:2},{value:"Same-Origin Policy",id:"same-origin-policy",level:3},{value:"Content Security Policy (CSP)",id:"content-security-policy-csp",level:3},{value:"Cross-Origin Resource Sharing (CORS)",id:"cross-origin-resource-sharing-cors",level:3},{value:"\u26a1 Performance Optimization",id:"-performance-optimization",level:2},{value:"Rendering Performance",id:"rendering-performance",level:3},{value:"\ud83c\udfaf Memory Management",id:"-memory-management",level:2},{value:"Memory Leaks Prevention",id:"memory-leaks-prevention",level:3},{value:"\ud83d\udcca Performance Monitoring",id:"-performance-monitoring",level:2},{value:"Real User Monitoring (RUM)",id:"real-user-monitoring-rum",level:3},{value:"\ud83c\udfaf Summary",id:"-summary",level:2},{value:"Key Takeaways",id:"key-takeaways",level:3},{value:"Next Steps",id:"next-steps",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"-browser-architecture-deep-dive",children:"\ud83c\udf10 Browser Architecture Deep Dive"}),"\n",(0,t.jsx)(n.h2,{id:"-table-of-contents",children:"\ud83d\udccb Table of Contents"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#browser-process-model",children:"Browser Process Model"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#rendering-pipeline",children:"Rendering Pipeline"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#network-stack",children:"Network Stack"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#security-model",children:"Security Model"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#performance-optimization",children:"Performance Optimization"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#visual-diagrams",children:"Visual Diagrams"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-browser-process-model",children:"\ud83c\udfd7\ufe0f Browser Process Model"}),"\n",(0,t.jsx)(n.h3,{id:"multi-process-architecture",children:"Multi-Process Architecture"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-mermaid",children:'graph TB\n    subgraph "Browser Process"\n        A[Browser Process] --\x3e B[UI Thread]\n        A --\x3e C[Network Thread]\n        A --\x3e D[Storage Thread]\n    end\n\n    subgraph "Renderer Processes"\n        E[Renderer Process 1] --\x3e F[Main Thread]\n        E --\x3e G[Compositor Thread]\n        E --\x3e H[Raster Thread]\n\n        I[Renderer Process 2] --\x3e J[Main Thread]\n        I --\x3e K[Compositor Thread]\n        I --\x3e L[Raster Thread]\n    end\n\n    subgraph "Utility Processes"\n        M[GPU Process] --\x3e N[Hardware Acceleration]\n        O[Plugin Process] --\x3e P[Flash, PDF]\n        Q[Extension Process] --\x3e R[Browser Extensions]\n    end\n'})}),"\n",(0,t.jsx)(n.h3,{id:"process-communication",children:"Process Communication"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant User\n    participant Browser\n    participant Renderer\n    participant Network\n    participant GPU\n\n    User->>Browser: Navigate to URL\n    Browser->>Network: Fetch page\n    Network--\x3e>Browser: HTML/CSS/JS\n    Browser->>Renderer: Create renderer process\n    Renderer->>Renderer: Parse & render\n    Renderer->>GPU: Composite layers\n    GPU--\x3e>Renderer: Display frame\n    Renderer--\x3e>Browser: Page ready\n    Browser--\x3e>User: Show page\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-rendering-pipeline",children:"\ud83c\udfa8 Rendering Pipeline"}),"\n",(0,t.jsx)(n.h3,{id:"critical-rendering-path",children:"Critical Rendering Path"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-mermaid",children:"graph LR\n    A[HTML] --\x3e B[DOM Tree]\n    C[CSS] --\x3e D[CSSOM Tree]\n    B --\x3e E[Render Tree]\n    D --\x3e E\n    E --\x3e F[Layout]\n    F --\x3e G[Paint]\n    G --\x3e H[Composite]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"detailed-rendering-steps",children:"Detailed Rendering Steps"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-mermaid",children:'graph TB\n    subgraph "Parsing"\n        A[HTML Bytes] --\x3e B[HTML Parser]\n        B --\x3e C[DOM Tree]\n        D[CSS Bytes] --\x3e E[CSS Parser]\n        E --\x3e F[CSSOM Tree]\n    end\n\n    subgraph "Rendering"\n        C --\x3e G[Render Tree]\n        F --\x3e G\n        G --\x3e H[Layout]\n        H --\x3e I[Paint]\n        I --\x3e J[Composite]\n    end\n\n    subgraph "JavaScript"\n        K[JavaScript] --\x3e L[DOM Manipulation]\n        L --\x3e M[Style Recalculation]\n        M --\x3e N[Layout Reflow]\n        N --\x3e O[Repaint]\n        O --\x3e P[Recomposite]\n    end\n'})}),"\n",(0,t.jsx)(n.h3,{id:"dom-tree-construction",children:"DOM Tree Construction"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html>\n  <head>\n    <title>Example</title>\n  </head>\n  <body>\n    <div id="container">\n      <h1>Hello World</h1>\n      <p>This is a paragraph.</p>\n    </div>\n  </body>\n</html>\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-mermaid",children:"graph TD\n    A[Document] --\x3e B[html]\n    B --\x3e C[head]\n    B --\x3e D[body]\n    C --\x3e E[title]\n    D --\x3e F[div#container]\n    F --\x3e G[h1]\n    F --\x3e H[p]\n    G --\x3e I[Text: Hello World]\n    H --\x3e J[Text: This is a paragraph]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"cssom-tree-construction",children:"CSSOM Tree Construction"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:"body {\n  font-size: 16px;\n  margin: 0;\n}\n\n#container {\n  width: 100%;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\nh1 {\n  color: #333;\n  font-size: 2em;\n}\n\np {\n  color: #666;\n  line-height: 1.6;\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-mermaid",children:"graph TD\n    A[CSSOM] --\x3e B[body]\n    A --\x3e C[#container]\n    A --\x3e D[h1]\n    A --\x3e E[p]\n\n    B --\x3e F[font-size: 16px]\n    B --\x3e G[margin: 0]\n\n    C --\x3e H[width: 100%]\n    C --\x3e I[max-width: 1200px]\n    C --\x3e J[margin: 0 auto]\n\n    D --\x3e K[color: #333]\n    D --\x3e L[font-size: 2em]\n\n    E --\x3e M[color: #666]\n    E --\x3e N[line-height: 1.6]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-network-stack",children:"\ud83c\udf10 Network Stack"}),"\n",(0,t.jsx)(n.h3,{id:"http-requestresponse-flow",children:"HTTP Request/Response Flow"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant Browser\n    participant DNS\n    participant TCP\n    participant TLS\n    participant Server\n\n    Browser->>DNS: DNS Lookup\n    DNS--\x3e>Browser: IP Address\n    Browser->>TCP: TCP Handshake\n    TCP--\x3e>Browser: Connection Established\n    Browser->>TLS: TLS Handshake\n    TLS--\x3e>Browser: Encrypted Connection\n    Browser->>Server: HTTP Request\n    Server--\x3e>Browser: HTTP Response\n    Browser->>Browser: Parse Response\n"})}),"\n",(0,t.jsx)(n.h3,{id:"resource-loading-pipeline",children:"Resource Loading Pipeline"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-mermaid",children:'graph TB\n    subgraph "Resource Discovery"\n        A[HTML Parsing] --\x3e B[Resource Discovery]\n        B --\x3e C[CSS Files]\n        B --\x3e D[JavaScript Files]\n        B --\x3e E[Images]\n        B --\x3e F[Fonts]\n    end\n\n    subgraph "Loading Priority"\n        G[Critical Resources] --\x3e H[High Priority]\n        I[Non-Critical] --\x3e J[Low Priority]\n        K[Lazy Load] --\x3e L[On Demand]\n    end\n\n    subgraph "Caching"\n        M[Memory Cache] --\x3e N[Disk Cache]\n        N --\x3e O[Network Request]\n    end\n'})}),"\n",(0,t.jsx)(n.h3,{id:"network-optimization-strategies",children:"Network Optimization Strategies"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// 1. Resource Hints\nconst resourceHints = `\n    \x3c!-- DNS Prefetch --\x3e\n    <link rel="dns-prefetch" href="//cdn.example.com">\n    \n    \x3c!-- Preconnect --\x3e\n    <link rel="preconnect" href="https://api.example.com">\n    \n    \x3c!-- Preload Critical Resources --\x3e\n    <link rel="preload" href="/critical.css" as="style">\n    <link rel="preload" href="/critical.js" as="script">\n    \n    \x3c!-- Prefetch Non-Critical Resources --\x3e\n    <link rel="prefetch" href="/next-page.js">\n    \n    \x3c!-- Preload Images --\x3e\n    <link rel="preload" href="/hero-image.jpg" as="image">\n`;\n\n// 2. Service Worker Caching\nclass CacheManager {\n  constructor() {\n    this.cacheName = "app-cache-v1";\n    this.criticalResources = ["/", "/styles/main.css", "/scripts/app.js"];\n  }\n\n  async install(event) {\n    const cache = await caches.open(this.cacheName);\n    await cache.addAll(this.criticalResources);\n  }\n\n  async fetch(event) {\n    const cachedResponse = await caches.match(event.request);\n    if (cachedResponse) {\n      return cachedResponse;\n    }\n\n    const networkResponse = await fetch(event.request);\n    const cache = await caches.open(this.cacheName);\n    cache.put(event.request, networkResponse.clone());\n\n    return networkResponse;\n  }\n}\n\n// 3. HTTP/2 Server Push\nconst http2Push = `\n    // Server-side (Node.js with HTTP/2)\n    const http2 = require(\'http2\');\n    const fs = require(\'fs\');\n    \n    const server = http2.createSecureServer({\n        key: fs.readFileSync(\'key.pem\'),\n        cert: fs.readFileSync(\'cert.pem\')\n    });\n    \n    server.on(\'stream\', (stream, headers) => {\n        if (headers[\':path\'] === \'/\') {\n            // Push critical CSS\n            stream.pushStream({ \':path\': \'/styles/critical.css\' }, (pushStream) => {\n                pushStream.respondWithFile(\'./styles/critical.css\');\n            });\n            \n            // Push critical JS\n            stream.pushStream({ \':path\': \'/scripts/critical.js\' }, (pushStream) => {\n                pushStream.respondWithFile(\'./scripts/critical.js\');\n            });\n            \n            stream.respondWithFile(\'./index.html\');\n        }\n    });\n`;\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-security-model",children:"\ud83d\udd12 Security Model"}),"\n",(0,t.jsx)(n.h3,{id:"same-origin-policy",children:"Same-Origin Policy"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-mermaid",children:'graph TB\n    subgraph "Same-Origin Policy"\n        A[Origin] --\x3e B[Protocol]\n        A --\x3e C[Host]\n        A --\x3e D[Port]\n    end\n\n    subgraph "Cross-Origin Restrictions"\n        E[DOM Access] --\x3e F[Blocked]\n        G[Cookie Access] --\x3e H[Blocked]\n        I[Network Requests] --\x3e J[CORS Required]\n    end\n'})}),"\n",(0,t.jsx)(n.h3,{id:"content-security-policy-csp",children:"Content Security Policy (CSP)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// CSP Implementation\nconst cspHeaders = {\n  \"Content-Security-Policy\": `\n        default-src 'self';\n        script-src 'self' 'unsafe-inline' https://cdn.example.com;\n        style-src 'self' 'unsafe-inline' https://fonts.googleapis.com;\n        img-src 'self' data: https:;\n        font-src 'self' https://fonts.gstatic.com;\n        connect-src 'self' https://api.example.com;\n        frame-src 'none';\n        object-src 'none';\n        base-uri 'self';\n        form-action 'self';\n    `\n    .replace(/\\s+/g, \" \")\n    .trim(),\n};\n\n// CSP Violation Reporting\nconst cspReporting = `\n    <meta http-equiv=\"Content-Security-Policy\" \n          content=\"default-src 'self'; report-uri /csp-report\">\n`;\n\n// CSP Nonce for Inline Scripts\nconst cspNonce = `\n    <script nonce=\"random-nonce-here\">\n        // This script is allowed because of the nonce\n        console.log('CSP compliant inline script');\n    <\/script>\n`;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"cross-origin-resource-sharing-cors",children:"Cross-Origin Resource Sharing (CORS)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// CORS Implementation\nclass CORSHandler {\n  constructor() {\n    this.allowedOrigins = [\n      "https://app.example.com",\n      "https://admin.example.com",\n    ];\n    this.allowedMethods = ["GET", "POST", "PUT", "DELETE", "OPTIONS"];\n    this.allowedHeaders = ["Content-Type", "Authorization"];\n  }\n\n  handleRequest(req, res) {\n    const origin = req.headers.origin;\n\n    // Check if origin is allowed\n    if (this.allowedOrigins.includes(origin)) {\n      res.setHeader("Access-Control-Allow-Origin", origin);\n    }\n\n    // Handle preflight requests\n    if (req.method === "OPTIONS") {\n      res.setHeader(\n        "Access-Control-Allow-Methods",\n        this.allowedMethods.join(", ")\n      );\n      res.setHeader(\n        "Access-Control-Allow-Headers",\n        this.allowedHeaders.join(", ")\n      );\n      res.setHeader("Access-Control-Max-Age", "86400"); // 24 hours\n      res.status(200).end();\n      return;\n    }\n\n    // Handle actual request\n    res.setHeader("Access-Control-Allow-Credentials", "true");\n    this.processRequest(req, res);\n  }\n\n  processRequest(req, res) {\n    // Handle the actual request logic\n    res.json({ message: "CORS enabled response" });\n  }\n}\n\n// Client-side CORS handling\nclass CORSClient {\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n  }\n\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n\n    const config = {\n      method: "GET",\n      credentials: "include", // Include cookies\n      headers: {\n        "Content-Type": "application/json",\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error("CORS request failed:", error);\n      throw error;\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-performance-optimization",children:"\u26a1 Performance Optimization"}),"\n",(0,t.jsx)(n.h3,{id:"rendering-performance",children:"Rendering Performance"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// 1. Optimize Layout Thrashing\nclass LayoutOptimizer {\n  constructor() {\n    this.pendingReads = [];\n    this.pendingWrites = [];\n    this.scheduled = false;\n  }\n\n  // Batch read operations\n  read(callback) {\n    this.pendingReads.push(callback);\n    this.schedule();\n  }\n\n  // Batch write operations\n  write(callback) {\n    this.pendingWrites.push(callback);\n    this.schedule();\n  }\n\n  schedule() {\n    if (!this.scheduled) {\n      this.scheduled = true;\n      requestAnimationFrame(() => this.flush());\n    }\n  }\n\n  flush() {\n    // Execute all reads first\n    this.pendingReads.forEach((callback) => callback());\n    this.pendingReads.length = 0;\n\n    // Then execute all writes\n    this.pendingWrites.forEach((callback) => callback());\n    this.pendingWrites.length = 0;\n\n    this.scheduled = false;\n  }\n}\n\n// Usage\nconst optimizer = new LayoutOptimizer();\n\n// \u274c Bad: Layout thrashing\nfunction badExample() {\n  const elements = document.querySelectorAll(".item");\n  elements.forEach((element) => {\n    const height = element.offsetHeight; // Read\n    element.style.height = height * 2 + "px"; // Write\n  });\n}\n\n// \u2705 Good: Batched operations\nfunction goodExample() {\n  const elements = document.querySelectorAll(".item");\n\n  // Batch reads\n  optimizer.read(() => {\n    elements.forEach((element) => {\n      element.dataset.height = element.offsetHeight;\n    });\n  });\n\n  // Batch writes\n  optimizer.write(() => {\n    elements.forEach((element) => {\n      const height = element.dataset.height;\n      element.style.height = height * 2 + "px";\n    });\n  });\n}\n\n// 2. Virtual Scrolling\nclass VirtualScroller {\n  constructor(container, itemHeight, totalItems) {\n    this.container = container;\n    this.itemHeight = itemHeight;\n    this.totalItems = totalItems;\n    this.visibleItems = Math.ceil(container.clientHeight / itemHeight);\n    this.scrollTop = 0;\n    this.startIndex = 0;\n    this.endIndex = this.visibleItems;\n\n    this.setup();\n  }\n\n  setup() {\n    // Create viewport\n    this.viewport = document.createElement("div");\n    this.viewport.style.height = `${this.totalItems * this.itemHeight}px`;\n    this.viewport.style.position = "relative";\n\n    // Create visible items container\n    this.visibleContainer = document.createElement("div");\n    this.visibleContainer.style.position = "absolute";\n    this.visibleContainer.style.top = "0";\n    this.visibleContainer.style.left = "0";\n    this.visibleContainer.style.right = "0";\n\n    this.viewport.appendChild(this.visibleContainer);\n    this.container.appendChild(this.viewport);\n\n    // Add scroll listener\n    this.container.addEventListener("scroll", this.handleScroll.bind(this));\n\n    this.render();\n  }\n\n  handleScroll() {\n    this.scrollTop = this.container.scrollTop;\n    this.updateVisibleRange();\n    this.render();\n  }\n\n  updateVisibleRange() {\n    this.startIndex = Math.floor(this.scrollTop / this.itemHeight);\n    this.endIndex = Math.min(\n      this.startIndex + this.visibleItems + 1,\n      this.totalItems\n    );\n  }\n\n  render() {\n    this.visibleContainer.innerHTML = "";\n    this.visibleContainer.style.transform = `translateY(${\n      this.startIndex * this.itemHeight\n    }px)`;\n\n    for (let i = this.startIndex; i < this.endIndex; i++) {\n      const item = this.createItem(i);\n      this.visibleContainer.appendChild(item);\n    }\n  }\n\n  createItem(index) {\n    const item = document.createElement("div");\n    item.style.height = `${this.itemHeight}px`;\n    item.textContent = `Item ${index + 1}`;\n    return item;\n  }\n}\n\n// 3. Intersection Observer for Lazy Loading\nclass LazyLoader {\n  constructor() {\n    this.observer = new IntersectionObserver(\n      this.handleIntersection.bind(this),\n      {\n        rootMargin: "50px",\n        threshold: 0.1,\n      }\n    );\n  }\n\n  observe(element) {\n    this.observer.observe(element);\n  }\n\n  handleIntersection(entries) {\n    entries.forEach((entry) => {\n      if (entry.isIntersecting) {\n        this.loadContent(entry.target);\n        this.observer.unobserve(entry.target);\n      }\n    });\n  }\n\n  loadContent(element) {\n    const src = element.dataset.src;\n    if (src) {\n      if (element.tagName === "IMG") {\n        element.src = src;\n      } else if (element.tagName === "IFRAME") {\n        element.src = src;\n      }\n      element.removeAttribute("data-src");\n    }\n  }\n}\n\n// Usage\nconst lazyLoader = new LazyLoader();\ndocument.querySelectorAll("[data-src]").forEach((element) => {\n  lazyLoader.observe(element);\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-memory-management",children:"\ud83c\udfaf Memory Management"}),"\n",(0,t.jsx)(n.h3,{id:"memory-leaks-prevention",children:"Memory Leaks Prevention"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// 1. Event Listener Cleanup\nclass EventManager {\n  constructor() {\n    this.listeners = new Map();\n  }\n\n  addListener(element, event, handler) {\n    if (!this.listeners.has(element)) {\n      this.listeners.set(element, new Map());\n    }\n\n    const elementListeners = this.listeners.get(element);\n    if (!elementListeners.has(event)) {\n      elementListeners.set(event, []);\n    }\n\n    elementListeners.get(event).push(handler);\n    element.addEventListener(event, handler);\n  }\n\n  removeListener(element, event, handler) {\n    const elementListeners = this.listeners.get(element);\n    if (elementListeners) {\n      const handlers = elementListeners.get(event);\n      if (handlers) {\n        const index = handlers.indexOf(handler);\n        if (index > -1) {\n          handlers.splice(index, 1);\n          element.removeEventListener(event, handler);\n        }\n      }\n    }\n  }\n\n  cleanup(element) {\n    const elementListeners = this.listeners.get(element);\n    if (elementListeners) {\n      elementListeners.forEach((handlers, event) => {\n        handlers.forEach((handler) => {\n          element.removeEventListener(event, handler);\n        });\n      });\n      this.listeners.delete(element);\n    }\n  }\n}\n\n// 2. WeakMap for Caching\nclass CacheManager {\n  constructor() {\n    this.cache = new WeakMap();\n  }\n\n  set(key, value) {\n    this.cache.set(key, value);\n  }\n\n  get(key) {\n    return this.cache.get(key);\n  }\n\n  has(key) {\n    return this.cache.has(key);\n  }\n\n  // No need for cleanup - WeakMap automatically removes entries\n  // when the key object is garbage collected\n}\n\n// 3. AbortController for Cancellable Requests\nclass RequestManager {\n  constructor() {\n    this.controllers = new Map();\n  }\n\n  async request(url, options = {}) {\n    const controller = new AbortController();\n    this.controllers.set(url, controller);\n\n    try {\n      const response = await fetch(url, {\n        ...options,\n        signal: controller.signal,\n      });\n\n      this.controllers.delete(url);\n      return response;\n    } catch (error) {\n      if (error.name === "AbortError") {\n        console.log("Request was cancelled");\n      }\n      throw error;\n    }\n  }\n\n  cancel(url) {\n    const controller = this.controllers.get(url);\n    if (controller) {\n      controller.abort();\n      this.controllers.delete(url);\n    }\n  }\n\n  cancelAll() {\n    this.controllers.forEach((controller) => controller.abort());\n    this.controllers.clear();\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-performance-monitoring",children:"\ud83d\udcca Performance Monitoring"}),"\n",(0,t.jsx)(n.h3,{id:"real-user-monitoring-rum",children:"Real User Monitoring (RUM)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'class PerformanceMonitor {\n  constructor() {\n    this.metrics = {};\n    this.init();\n  }\n\n  init() {\n    // Core Web Vitals\n    this.observeLCP();\n    this.observeFID();\n    this.observeCLS();\n\n    // Custom metrics\n    this.observeCustomMetrics();\n\n    // Error tracking\n    this.observeErrors();\n  }\n\n  observeLCP() {\n    new PerformanceObserver((list) => {\n      const entries = list.getEntries();\n      const lastEntry = entries[entries.length - 1];\n      this.metrics.lcp = lastEntry.startTime;\n      this.reportMetric("LCP", lastEntry.startTime);\n    }).observe({ entryTypes: ["largest-contentful-paint"] });\n  }\n\n  observeFID() {\n    new PerformanceObserver((list) => {\n      const entries = list.getEntries();\n      entries.forEach((entry) => {\n        this.metrics.fid = entry.processingStart - entry.startTime;\n        this.reportMetric("FID", this.metrics.fid);\n      });\n    }).observe({ entryTypes: ["first-input"] });\n  }\n\n  observeCLS() {\n    let clsValue = 0;\n    new PerformanceObserver((list) => {\n      const entries = list.getEntries();\n      entries.forEach((entry) => {\n        if (!entry.hadRecentInput) {\n          clsValue += entry.value;\n        }\n      });\n      this.metrics.cls = clsValue;\n      this.reportMetric("CLS", clsValue);\n    }).observe({ entryTypes: ["layout-shift"] });\n  }\n\n  observeCustomMetrics() {\n    // Custom timing\n    performance.mark("app-start");\n\n    // Measure app initialization\n    window.addEventListener("load", () => {\n      performance.mark("app-loaded");\n      performance.measure("app-init", "app-start", "app-loaded");\n\n      const measure = performance.getEntriesByName("app-init")[0];\n      this.reportMetric("AppInit", measure.duration);\n    });\n  }\n\n  observeErrors() {\n    window.addEventListener("error", (event) => {\n      this.reportError("JavaScript Error", {\n        message: event.message,\n        filename: event.filename,\n        lineno: event.lineno,\n        colno: event.colno,\n      });\n    });\n\n    window.addEventListener("unhandledrejection", (event) => {\n      this.reportError("Unhandled Promise Rejection", {\n        reason: event.reason,\n      });\n    });\n  }\n\n  reportMetric(name, value) {\n    // Send to analytics service\n    console.log(`Metric: ${name} = ${value}`);\n\n    // You could send this to Google Analytics, custom analytics, etc.\n    if (window.gtag) {\n      window.gtag("event", "performance", {\n        metric_name: name,\n        metric_value: value,\n      });\n    }\n  }\n\n  reportError(type, details) {\n    console.error(`Error: ${type}`, details);\n\n    // Send to error tracking service\n    if (window.Sentry) {\n      window.Sentry.captureException(new Error(type), {\n        extra: details,\n      });\n    }\n  }\n\n  getMetrics() {\n    return {\n      ...this.metrics,\n      navigation: performance.getEntriesByType("navigation")[0],\n      memory: performance.memory,\n    };\n  }\n}\n\n// Usage\nconst monitor = new PerformanceMonitor();\n\n// Get metrics after page load\nwindow.addEventListener("load", () => {\n  setTimeout(() => {\n    console.log("Performance Metrics:", monitor.getMetrics());\n  }, 1000);\n});\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-summary",children:"\ud83c\udfaf Summary"}),"\n",(0,t.jsx)(n.p,{children:"Understanding browser architecture helps you:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Optimize performance"})," by leveraging browser capabilities"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Debug issues"})," more effectively"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Write more efficient code"})," that works with the browser's rendering pipeline"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Implement security best practices"})," to protect users"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Monitor and improve"})," real-world performance"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Multi-process architecture"})," provides security and stability"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rendering pipeline"})," affects performance and user experience"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Network optimization"})," reduces loading times"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Security model"})," protects users from malicious code"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Memory management"})," prevents leaks and improves performance"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Profile your applications"})," using browser DevTools"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Monitor Core Web Vitals"})," in production"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Implement performance optimizations"})," based on browser capabilities"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Stay updated"})," with browser features and best practices"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(6540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);