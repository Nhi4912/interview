"use strict";(self.webpackChunkfrontend_interview_guide=self.webpackChunkfrontend_interview_guide||[]).push([[944],{6413:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"frontend/react/advanced-patterns","title":"React Advanced Patterns & Interview Questions","description":"Table of Contents","source":"@site/docs/frontend/react/advanced-patterns.md","sourceDirName":"frontend/react","slug":"/frontend/react/advanced-patterns","permalink":"/interview/docs/frontend/react/advanced-patterns","draft":false,"unlisted":false,"editUrl":"https://github.com/Nhi4912/interview/tree/main/docs/frontend/react/advanced-patterns.md","tags":[],"version":"current","frontMatter":{},"sidebar":"frontendSidebar","previous":{"title":"React Core: Definitions, Interview Questions & Answers","permalink":"/interview/docs/frontend/react/core"},"next":{"title":"HTML & CSS Interview Preparation","permalink":"/interview/docs/frontend/html-css/"}}');var o=t(4848),s=t(8453);const a={},i="React Advanced Patterns & Interview Questions",l={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Advanced Hooks",id:"advanced-hooks",level:2},{value:"useReducer for Complex State",id:"usereducer-for-complex-state",level:3},{value:"Custom Hooks",id:"custom-hooks",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"React.memo and useMemo",id:"reactmemo-and-usememo",level:3},{value:"Code Splitting and Lazy Loading",id:"code-splitting-and-lazy-loading",level:3},{value:"React 18 Features",id:"react-18-features",level:2},{value:"Concurrent Features",id:"concurrent-features",level:3},{value:"New Hooks in React 18",id:"new-hooks-in-react-18",level:3},{value:"State Management Patterns",id:"state-management-patterns",level:2},{value:"Context + Reducer Pattern",id:"context--reducer-pattern",level:3},{value:"Zustand Integration",id:"zustand-integration",level:3},{value:"Testing React Components",id:"testing-react-components",level:2},{value:"Testing with Jest and React Testing Library",id:"testing-with-jest-and-react-testing-library",level:3},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Higher-Order Components (HOCs)",id:"higher-order-components-hocs",level:3},{value:"Render Props Pattern",id:"render-props-pattern",level:3},{value:"Compound Components Pattern",id:"compound-components-pattern",level:3},{value:"Server-Side Rendering",id:"server-side-rendering",level:2},{value:"Next.js Patterns",id:"nextjs-patterns",level:3},{value:"Advanced Interview Questions",id:"advanced-interview-questions",level:2},{value:"1. Explain React&#39;s reconciliation algorithm and how keys work.",id:"1-explain-reacts-reconciliation-algorithm-and-how-keys-work",level:3},{value:"2. What are the differences between useMemo and useCallback?",id:"2-what-are-the-differences-between-usememo-and-usecallback",level:3},{value:"3. How does React&#39;s Fiber architecture improve performance?",id:"3-how-does-reacts-fiber-architecture-improve-performance",level:3},{value:"4. Explain the difference between controlled and uncontrolled components.",id:"4-explain-the-difference-between-controlled-and-uncontrolled-components",level:3},{value:"5. What are React Portals and when would you use them?",id:"5-what-are-react-portals-and-when-would-you-use-them",level:3},{value:"6. How do you handle error boundaries in React?",id:"6-how-do-you-handle-error-boundaries-in-react",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"react-advanced-patterns--interview-questions",children:"React Advanced Patterns & Interview Questions"})}),"\n",(0,o.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#advanced-hooks",children:"Advanced Hooks"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#performance-optimization",children:"Performance Optimization"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#react-18-features",children:"React 18 Features"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#state-management-patterns",children:"State Management Patterns"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#testing-react-components",children:"Testing React Components"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#common-patterns",children:"Common Patterns"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#server-side-rendering",children:"Server-Side Rendering"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#advanced-interview-questions",children:"Advanced Interview Questions"})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"advanced-hooks",children:"Advanced Hooks"}),"\n",(0,o.jsx)(n.h3,{id:"usereducer-for-complex-state",children:"useReducer for Complex State"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Complex state management with useReducer\nconst initialState = {\n  items: [],\n  loading: false,\n  error: null,\n  filter: 'all'\n};\n\nfunction todoReducer(state, action) {\n  switch (action.type) {\n    case 'FETCH_START':\n      return { ...state, loading: true, error: null };\n    case 'FETCH_SUCCESS':\n      return { ...state, loading: false, items: action.payload };\n    case 'FETCH_ERROR':\n      return { ...state, loading: false, error: action.payload };\n    case 'ADD_ITEM':\n      return { ...state, items: [...state.items, action.payload] };\n    case 'UPDATE_ITEM':\n      return {\n        ...state,\n        items: state.items.map(item =>\n          item.id === action.payload.id ? action.payload : item\n        )\n      };\n    case 'DELETE_ITEM':\n      return {\n        ...state,\n        items: state.items.filter(item => item.id !== action.payload)\n      };\n    case 'SET_FILTER':\n      return { ...state, filter: action.payload };\n    default:\n      return state;\n  }\n}\n\nfunction TodoApp() {\n  const [state, dispatch] = useReducer(todoReducer, initialState);\n\n  useEffect(() => {\n    dispatch({ type: 'FETCH_START' });\n    fetchTodos()\n      .then(todos => dispatch({ type: 'FETCH_SUCCESS', payload: todos }))\n      .catch(error => dispatch({ type: 'FETCH_ERROR', payload: error.message }));\n  }, []);\n\n  const addTodo = (text) => {\n    const newTodo = {\n      id: Date.now(),\n      text,\n      completed: false\n    };\n    dispatch({ type: 'ADD_ITEM', payload: newTodo });\n  };\n\n  const filteredItems = state.items.filter(item => {\n    if (state.filter === 'completed') return item.completed;\n    if (state.filter === 'pending') return !item.completed;\n    return true;\n  });\n\n  return (\n    <div>\n      <TodoForm onSubmit={addTodo} />\n      <FilterButtons \n        filter={state.filter} \n        onChange={(filter) => dispatch({ type: 'SET_FILTER', payload: filter })}\n      />\n      {state.loading && <div>Loading...</div>}\n      {state.error && <div>Error: {state.error}</div>}\n      <TodoList items={filteredItems} dispatch={dispatch} />\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"custom-hooks",children:"Custom Hooks"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Custom hook for API calls\nfunction useApi(url) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await fetch(url);\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const result = await response.json();\n        setData(result);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [url]);\n\n  const refetch = useCallback(() => {\n    fetchData();\n  }, [url]);\n\n  return { data, loading, error, refetch };\n}\n\n// Custom hook for local storage\nfunction useLocalStorage(key, initialValue) {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error('Error reading from localStorage:', error);\n      return initialValue;\n    }\n  });\n\n  const setValue = useCallback((value) => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error('Error writing to localStorage:', error);\n    }\n  }, [key, storedValue]);\n\n  return [storedValue, setValue];\n}\n\n// Custom hook for form handling\nfunction useForm(initialValues, validate) {\n  const [values, setValues] = useState(initialValues);\n  const [errors, setErrors] = useState({});\n  const [touched, setTouched] = useState({});\n\n  const handleChange = useCallback((name, value) => {\n    setValues(prev => ({ ...prev, [name]: value }));\n    \n    // Clear error when user starts typing\n    if (errors[name]) {\n      setErrors(prev => ({ ...prev, [name]: null }));\n    }\n  }, [errors]);\n\n  const handleBlur = useCallback((name) => {\n    setTouched(prev => ({ ...prev, [name]: true }));\n    \n    if (validate) {\n      const fieldErrors = validate({ ...values, [name]: values[name] });\n      setErrors(prev => ({ ...prev, [name]: fieldErrors[name] }));\n    }\n  }, [values, validate]);\n\n  const handleSubmit = useCallback((onSubmit) => {\n    return (e) => {\n      e.preventDefault();\n      \n      const validationErrors = validate ? validate(values) : {};\n      setErrors(validationErrors);\n      \n      if (Object.keys(validationErrors).length === 0) {\n        onSubmit(values);\n      }\n    };\n  }, [values, validate]);\n\n  return {\n    values,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    handleSubmit\n  };\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,o.jsx)(n.h3,{id:"reactmemo-and-usememo",children:"React.memo and useMemo"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// React.memo for component memoization\nconst ExpensiveComponent = React.memo(({ data, onClick }) => {\n  console.log('ExpensiveComponent rendered');\n  \n  return (\n    <div>\n      {data.map(item => (\n        <div key={item.id} onClick={() => onClick(item.id)}>\n          {item.name}\n        </div>\n      ))}\n    </div>\n  );\n}, (prevProps, nextProps) => {\n  // Custom comparison function\n  return prevProps.data.length === nextProps.data.length &&\n         prevProps.onClick === nextProps.onClick;\n});\n\n// useMemo for expensive calculations\nfunction DataProcessor({ items, filter }) {\n  const processedData = useMemo(() => {\n    console.log('Processing data...');\n    \n    return items\n      .filter(item => item.category === filter)\n      .sort((a, b) => a.priority - b.priority)\n      .map(item => ({\n        ...item,\n        displayName: `${item.name} (${item.category})`\n      }));\n  }, [items, filter]);\n\n  return (\n    <div>\n      {processedData.map(item => (\n        <div key={item.id}>{item.displayName}</div>\n      ))}\n    </div>\n  );\n}\n\n// useCallback for stable function references\nfunction TodoList({ todos, onToggle, onDelete }) {\n  const handleToggle = useCallback((id) => {\n    onToggle(id);\n  }, [onToggle]);\n\n  const handleDelete = useCallback((id) => {\n    onDelete(id);\n  }, [onDelete]);\n\n  return (\n    <div>\n      {todos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          onToggle={handleToggle}\n          onDelete={handleDelete}\n        />\n      ))}\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"code-splitting-and-lazy-loading",children:"Code Splitting and Lazy Loading"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// React.lazy for code splitting\nconst LazyComponent = React.lazy(() => import('./LazyComponent'));\nconst AnotherLazyComponent = React.lazy(() => \n  import('./AnotherComponent').then(module => ({\n    default: module.AnotherComponent\n  }))\n);\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Suspense fallback={<div>Loading...</div>}>\n        <Routes>\n          <Route path=\"/lazy\" element={<LazyComponent />} />\n          <Route path=\"/another\" element={<AnotherLazyComponent />} />\n        </Routes>\n      </Suspense>\n    </div>\n  );\n}\n\n// Dynamic imports based on conditions\nfunction ConditionalComponent({ userRole }) {\n  const [Component, setComponent] = useState(null);\n\n  useEffect(() => {\n    if (userRole === 'admin') {\n      import('./AdminPanel').then(module => {\n        setComponent(() => module.default);\n      });\n    } else if (userRole === 'user') {\n      import('./UserDashboard').then(module => {\n        setComponent(() => module.default);\n      });\n    }\n  }, [userRole]);\n\n  if (!Component) {\n    return <div>Loading...</div>;\n  }\n\n  return <Component />;\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"react-18-features",children:"React 18 Features"}),"\n",(0,o.jsx)(n.h3,{id:"concurrent-features",children:"Concurrent Features"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Suspense for data fetching\nfunction UserProfile({ userId }) {\n  const user = useSuspenseQuery(['user', userId], () => fetchUser(userId));\n\n  return (\n    <div>\n      <h1>{user.name}</h1>\n      <p>{user.email}</p>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <Suspense fallback={<UserProfileSkeleton />}>\n      <UserProfile userId={1} />\n    </Suspense>\n  );\n}\n\n// useTransition for non-urgent updates\nfunction SearchComponent() {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n  const [isPending, startTransition] = useTransition();\n\n  const handleSearch = (value) => {\n    setQuery(value);\n    \n    // Mark this update as non-urgent\n    startTransition(() => {\n      setResults(searchItems(value));\n    });\n  };\n\n  return (\n    <div>\n      <input\n        value={query}\n        onChange={(e) => handleSearch(e.target.value)}\n        placeholder=\"Search...\"\n      />\n      {isPending && <div>Searching...</div>}\n      <SearchResults results={results} />\n    </div>\n  );\n}\n\n// useDeferredValue for deferring expensive updates\nfunction ExpensiveList({ query }) {\n  const deferredQuery = useDeferredValue(query);\n  const filteredItems = useMemo(() => {\n    return items.filter(item => \n      item.name.toLowerCase().includes(deferredQuery.toLowerCase())\n    );\n  }, [deferredQuery]);\n\n  return (\n    <div>\n      {filteredItems.map(item => (\n        <ExpensiveItem key={item.id} item={item} />\n      ))}\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"new-hooks-in-react-18",children:"New Hooks in React 18"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// useId for unique IDs\nfunction FormField({ label, type = 'text' }) {\n  const id = useId();\n\n  return (\n    <div>\n      <label htmlFor={id}>{label}</label>\n      <input id={id} type={type} />\n    </div>\n  );\n}\n\n// useSyncExternalStore for external state\nfunction useOnlineStatus() {\n  const isOnline = useSyncExternalStore(\n    (callback) => {\n      window.addEventListener('online', callback);\n      window.addEventListener('offline', callback);\n      return () => {\n        window.removeEventListener('online', callback);\n        window.removeEventListener('offline', callback);\n      };\n    },\n    () => navigator.onLine,\n    () => true // Server-side snapshot\n  );\n\n  return isOnline;\n}\n\n// useInsertionEffect for CSS-in-JS libraries\nfunction useCSS(css) {\n  useInsertionEffect(() => {\n    const style = document.createElement('style');\n    style.textContent = css;\n    document.head.appendChild(style);\n    \n    return () => {\n      document.head.removeChild(style);\n    };\n  }, [css]);\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"state-management-patterns",children:"State Management Patterns"}),"\n",(0,o.jsx)(n.h3,{id:"context--reducer-pattern",children:"Context + Reducer Pattern"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// State management with Context and Reducer\nconst AppStateContext = createContext();\nconst AppDispatchContext = createContext();\n\nfunction appReducer(state, action) {\n  switch (action.type) {\n    case 'SET_USER':\n      return { ...state, user: action.payload };\n    case 'SET_THEME':\n      return { ...state, theme: action.payload };\n    case 'ADD_NOTIFICATION':\n      return {\n        ...state,\n        notifications: [...state.notifications, action.payload]\n      };\n    case 'REMOVE_NOTIFICATION':\n      return {\n        ...state,\n        notifications: state.notifications.filter(n => n.id !== action.payload)\n      };\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n}\n\nfunction AppProvider({ children }) {\n  const [state, dispatch] = useReducer(appReducer, {\n    user: null,\n    theme: 'light',\n    notifications: []\n  });\n\n  return (\n    <AppStateContext.Provider value={state}>\n      <AppDispatchContext.Provider value={dispatch}>\n        {children}\n      </AppDispatchContext.Provider>\n    </AppStateContext.Provider>\n  );\n}\n\n// Custom hooks for accessing state and dispatch\nfunction useAppState() {\n  const context = useContext(AppStateContext);\n  if (!context) {\n    throw new Error('useAppState must be used within AppProvider');\n  }\n  return context;\n}\n\nfunction useAppDispatch() {\n  const context = useContext(AppDispatchContext);\n  if (!context) {\n    throw new Error('useAppDispatch must be used within AppProvider');\n  }\n  return context;\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"zustand-integration",children:"Zustand Integration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Zustand store\nimport { create } from 'zustand';\nimport { subscribeWithSelector } from 'zustand/middleware';\n\nconst useStore = create(\n  subscribeWithSelector((set, get) => ({\n    // State\n    user: null,\n    todos: [],\n    filter: 'all',\n    \n    // Actions\n    setUser: (user) => set({ user }),\n    \n    addTodo: (text) => set((state) => ({\n      todos: [...state.todos, {\n        id: Date.now(),\n        text,\n        completed: false\n      }]\n    })),\n    \n    toggleTodo: (id) => set((state) => ({\n      todos: state.todos.map(todo =>\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\n      )\n    })),\n    \n    setFilter: (filter) => set({ filter }),\n    \n    // Computed values\n    get filteredTodos() {\n      const { todos, filter } = get();\n      if (filter === 'completed') return todos.filter(t => t.completed);\n      if (filter === 'pending') return todos.filter(t => !t.completed);\n      return todos;\n    }\n  }))\n);\n\n// Using Zustand in components\nfunction TodoApp() {\n  const { filteredTodos, addTodo, toggleTodo, filter, setFilter } = useStore();\n\n  return (\n    <div>\n      <TodoForm onSubmit={addTodo} />\n      <FilterButtons filter={filter} onChange={setFilter} />\n      <TodoList todos={filteredTodos} onToggle={toggleTodo} />\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"testing-react-components",children:"Testing React Components"}),"\n",(0,o.jsx)(n.h3,{id:"testing-with-jest-and-react-testing-library",children:"Testing with Jest and React Testing Library"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Component to test\nfunction Counter({ initialCount = 0 }) {\n  const [count, setCount] = useState(initialCount);\n\n  return (\n    <div>\n      <span data-testid=\"count\">Count: {count}</span>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n      <button onClick={() => setCount(count - 1)}>Decrement</button>\n      <button onClick={() => setCount(0)}>Reset</button>\n    </div>\n  );\n}\n\n// Test file\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Counter from './Counter';\n\ndescribe('Counter Component', () => {\n  test('renders with initial count', () => {\n    render(<Counter initialCount={5} />);\n    expect(screen.getByTestId('count')).toHaveTextContent('Count: 5');\n  });\n\n  test('increments count when increment button is clicked', async () => {\n    const user = userEvent.setup();\n    render(<Counter />);\n    \n    const incrementButton = screen.getByText('Increment');\n    await user.click(incrementButton);\n    \n    expect(screen.getByTestId('count')).toHaveTextContent('Count: 1');\n  });\n\n  test('decrements count when decrement button is clicked', async () => {\n    const user = userEvent.setup();\n    render(<Counter initialCount={2} />);\n    \n    const decrementButton = screen.getByText('Decrement');\n    await user.click(decrementButton);\n    \n    expect(screen.getByTestId('count')).toHaveTextContent('Count: 1');\n  });\n\n  test('resets count when reset button is clicked', async () => {\n    const user = userEvent.setup();\n    render(<Counter initialCount={5} />);\n    \n    const resetButton = screen.getByText('Reset');\n    await user.click(resetButton);\n    \n    expect(screen.getByTestId('count')).toHaveTextContent('Count: 0');\n  });\n});\n\n// Testing hooks\nimport { renderHook, act } from '@testing-library/react';\nimport { useCounter } from './useCounter';\n\ndescribe('useCounter Hook', () => {\n  test('should initialize with default value', () => {\n    const { result } = renderHook(() => useCounter());\n    expect(result.current.count).toBe(0);\n  });\n\n  test('should increment count', () => {\n    const { result } = renderHook(() => useCounter());\n    \n    act(() => {\n      result.current.increment();\n    });\n    \n    expect(result.current.count).toBe(1);\n  });\n\n  test('should decrement count', () => {\n    const { result } = renderHook(() => useCounter(5));\n    \n    act(() => {\n      result.current.decrement();\n    });\n    \n    expect(result.current.count).toBe(4);\n  });\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,o.jsx)(n.h3,{id:"higher-order-components-hocs",children:"Higher-Order Components (HOCs)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// HOC for authentication\nfunction withAuth(Component) {\n  return function AuthenticatedComponent(props) {\n    const { user, loading } = useAuth();\n\n    if (loading) {\n      return <div>Loading...</div>;\n    }\n\n    if (!user) {\n      return <div>Please log in to access this page.</div>;\n    }\n\n    return <Component {...props} user={user} />;\n  };\n}\n\n// Usage\nconst ProtectedDashboard = withAuth(Dashboard);\n\n// HOC for loading state\nfunction withLoading(Component) {\n  return function LoadingComponent({ isLoading, ...props }) {\n    if (isLoading) {\n      return <div>Loading...</div>;\n    }\n\n    return <Component {...props} />;\n  };\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"render-props-pattern",children:"Render Props Pattern"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'// Render props for data fetching\nfunction DataFetcher({ url, children }) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setData(data);\n        setLoading(false);\n      })\n      .catch(error => {\n        setError(error);\n        setLoading(false);\n      });\n  }, [url]);\n\n  return children({ data, loading, error });\n}\n\n// Usage\nfunction UserList() {\n  return (\n    <DataFetcher url="/api/users">\n      {({ data, loading, error }) => {\n        if (loading) return <div>Loading...</div>;\n        if (error) return <div>Error: {error.message}</div>;\n        \n        return (\n          <ul>\n            {data.map(user => (\n              <li key={user.id}>{user.name}</li>\n            ))}\n          </ul>\n        );\n      }}\n    </DataFetcher>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"compound-components-pattern",children:"Compound Components Pattern"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'// Compound components for tabs\nconst TabsContext = createContext();\n\nfunction Tabs({ children, defaultValue }) {\n  const [activeTab, setActiveTab] = useState(defaultValue);\n\n  return (\n    <TabsContext.Provider value={{ activeTab, setActiveTab }}>\n      <div className="tabs">{children}</div>\n    </TabsContext.Provider>\n  );\n}\n\nfunction TabList({ children }) {\n  return <div className="tab-list">{children}</div>;\n}\n\nfunction Tab({ value, children }) {\n  const { activeTab, setActiveTab } = useContext(TabsContext);\n  const isActive = activeTab === value;\n\n  return (\n    <button\n      className={`tab ${isActive ? \'active\' : \'\'}`}\n      onClick={() => setActiveTab(value)}\n    >\n      {children}\n    </button>\n  );\n}\n\nfunction TabPanels({ children }) {\n  return <div className="tab-panels">{children}</div>;\n}\n\nfunction TabPanel({ value, children }) {\n  const { activeTab } = useContext(TabsContext);\n  \n  if (activeTab !== value) {\n    return null;\n  }\n\n  return <div className="tab-panel">{children}</div>;\n}\n\n// Attach components to main component\nTabs.List = TabList;\nTabs.Tab = Tab;\nTabs.Panels = TabPanels;\nTabs.Panel = TabPanel;\n\n// Usage\nfunction App() {\n  return (\n    <Tabs defaultValue="tab1">\n      <Tabs.List>\n        <Tabs.Tab value="tab1">Tab 1</Tabs.Tab>\n        <Tabs.Tab value="tab2">Tab 2</Tabs.Tab>\n        <Tabs.Tab value="tab3">Tab 3</Tabs.Tab>\n      </Tabs.List>\n      \n      <Tabs.Panels>\n        <Tabs.Panel value="tab1">Content of Tab 1</Tabs.Panel>\n        <Tabs.Panel value="tab2">Content of Tab 2</Tabs.Panel>\n        <Tabs.Panel value="tab3">Content of Tab 3</Tabs.Panel>\n      </Tabs.Panels>\n    </Tabs>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"server-side-rendering",children:"Server-Side Rendering"}),"\n",(0,o.jsx)(n.h3,{id:"nextjs-patterns",children:"Next.js Patterns"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Server-side rendering with getServerSideProps\nexport async function getServerSideProps(context) {\n  const { params, query, req, res } = context;\n  \n  try {\n    const data = await fetchData(params.id);\n    \n    return {\n      props: {\n        data,\n        timestamp: Date.now()\n      }\n    };\n  } catch (error) {\n    return {\n      notFound: true\n    };\n  }\n}\n\n// Static generation with getStaticProps\nexport async function getStaticProps({ params }) {\n  const post = await getPostBySlug(params.slug);\n  \n  return {\n    props: {\n      post\n    },\n    revalidate: 60 // ISR - revalidate every 60 seconds\n  };\n}\n\n// Dynamic routes with getStaticPaths\nexport async function getStaticPaths() {\n  const posts = await getAllPosts();\n  const paths = posts.map(post => ({\n    params: { slug: post.slug }\n  }));\n  \n  return {\n    paths,\n    fallback: 'blocking' // or false, true\n  };\n}\n\n// App Router (React 18)\n// app/page.tsx\nexport default async function HomePage() {\n  const data = await fetchData();\n  \n  return (\n    <div>\n      <h1>Welcome</h1>\n      <DataComponent data={data} />\n    </div>\n  );\n}\n\n// app/layout.tsx\nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>\n        <header>My App</header>\n        {children}\n        <footer>Footer</footer>\n      </body>\n    </html>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"advanced-interview-questions",children:"Advanced Interview Questions"}),"\n",(0,o.jsx)(n.h3,{id:"1-explain-reacts-reconciliation-algorithm-and-how-keys-work",children:"1. Explain React's reconciliation algorithm and how keys work."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Answer:"}),"\nReact's reconciliation is the diffing algorithm that compares the current virtual DOM tree with the previous one to determine what changes need to be made to the real DOM."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"How it works:"})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"When state or props change, React creates a new virtual DOM tree"}),"\n",(0,o.jsx)(n.li,{children:"React compares (diffs) the new tree with the previous tree"}),"\n",(0,o.jsx)(n.li,{children:"React calculates the minimum set of changes needed"}),"\n",(0,o.jsx)(n.li,{children:"React applies only those changes to the real DOM"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Keys are crucial for:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Identifying which items have changed, been added, or removed"}),"\n",(0,o.jsx)(n.li,{children:"Maintaining component state during re-renders"}),"\n",(0,o.jsx)(n.li,{children:"Optimizing performance by reusing DOM nodes"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// \u274c Bad - using array index\n{items.map((item, index) => (\n  <Item key={index} data={item} />\n))}\n\n// \u2705 Good - using stable unique identifier\n{items.map(item => (\n  <Item key={item.id} data={item} />\n))}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-what-are-the-differences-between-usememo-and-usecallback",children:"2. What are the differences between useMemo and useCallback?"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"useMemo"}),": Memoizes the result of a computation/expression"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"useCallback"}),": Memoizes a function definition"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// useMemo - memoizes the computed value\nconst expensiveValue = useMemo(() => {\n  return computeExpensiveValue(a, b);\n}, [a, b]);\n\n// useCallback - memoizes the function itself\nconst memoizedCallback = useCallback(() => {\n  doSomething(a, b);\n}, [a, b]);\n\n// useCallback is equivalent to:\nconst memoizedCallback = useMemo(() => {\n  return () => doSomething(a, b);\n}, [a, b]);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-how-does-reacts-fiber-architecture-improve-performance",children:"3. How does React's Fiber architecture improve performance?"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Answer:"}),"\nFiber is React's reconciliation algorithm that makes reconciliation interruptible and prioritizable:"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Key improvements:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Incremental rendering"}),": Work can be split into chunks"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Prioritization"}),": Updates can have different priorities"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Pausing and resuming"}),": React can pause work and come back to it later"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Error boundaries"}),": Better error handling during rendering"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Time slicing"}),": Prevents blocking the main thread"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Benefits:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Smoother animations and interactions"}),"\n",(0,o.jsx)(n.li,{children:"Better responsiveness"}),"\n",(0,o.jsx)(n.li,{children:"Ability to schedule low-priority updates"}),"\n",(0,o.jsx)(n.li,{children:"Improved user experience"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"4-explain-the-difference-between-controlled-and-uncontrolled-components",children:"4. Explain the difference between controlled and uncontrolled components."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Controlled Components:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"function ControlledInput() {\n  const [value, setValue] = useState('');\n  \n  return (\n    <input\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n    />\n  );\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Uncontrolled Components:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'function UncontrolledInput() {\n  const inputRef = useRef();\n  \n  const handleSubmit = () => {\n    console.log(inputRef.current.value);\n  };\n  \n  return (\n    <input ref={inputRef} defaultValue="initial" />\n  );\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"When to use:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Controlled"}),": When you need validation, formatting, or dynamic behavior"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Uncontrolled"}),": For simple forms or when integrating with non-React code"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"5-what-are-react-portals-and-when-would-you-use-them",children:"5. What are React Portals and when would you use them?"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Answer:"}),"\nPortals provide a way to render children into a DOM node outside of the parent component's DOM hierarchy."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'function Modal({ children, isOpen }) {\n  if (!isOpen) return null;\n  \n  return ReactDOM.createPortal(\n    <div className="modal-overlay">\n      <div className="modal-content">\n        {children}\n      </div>\n    </div>,\n    document.getElementById(\'modal-root\')\n  );\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Use cases:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Modals and dialogs"}),"\n",(0,o.jsx)(n.li,{children:"Tooltips and popovers"}),"\n",(0,o.jsx)(n.li,{children:"Notifications"}),"\n",(0,o.jsx)(n.li,{children:"Any UI that needs to escape parent's overflow/z-index constraints"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"6-how-do-you-handle-error-boundaries-in-react",children:"6. How do you handle error boundaries in React?"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Answer:"}),"\nError boundaries are React components that catch JavaScript errors anywhere in their child component tree."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Log error to monitoring service\n    logErrorToService(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div>\n          <h2>Something went wrong.</h2>\n          <details>\n            {this.state.error && this.state.error.toString()}\n          </details>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\n// Usage\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <MyComponent />\n    </ErrorBoundary>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Important notes:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Error boundaries only work in class components"}),"\n",(0,o.jsx)(n.li,{children:"They don't catch errors in event handlers, async code, or during SSR"}),"\n",(0,o.jsxs)(n.li,{children:["Use libraries like ",(0,o.jsx)(n.code,{children:"react-error-boundary"})," for hook-based error boundaries"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This comprehensive guide covers advanced React patterns and interview questions essential for senior frontend positions at companies companies."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var r=t(6540);const o={},s=r.createContext(o);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);